{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.6-f3af763');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    this._positionStrategy.positionChanges.subscribe(({connectionPair}) => {\n      if (this.autocomplete) {\n        this.autocomplete._classList['mat-autocomplete-panel-above'] =\n            connectionPair.originY === 'top';\n      }\n    });\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    } else if (_platform.IOS && (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA')) {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  InjectionToken\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  return typeof window !== 'undefined' ? window.location : {pathname: ''};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use\n    // `Location` from `@angular/common` since we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = Math.round(coerceNumberProperty(value)); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document?: any) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element.nativeElement, 'program'));\n\n      _focusMonitor.monitor(_element);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => this._hasFocus = false);\n\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    this._appearance = value;\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","positions","_inkBarPositioner","element","inkBar","nativeElement","style","left","width","NgZone","_MAT_INK_BAR_POSITIONER","MatInkBar","_CdkPortal","CdkPortal","MatTabLabel","MatTabContent","TemplateRef","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_setStyles","_vertical","MatSlider","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","toString","split","pop","parseFloat","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_onInputFocusChange","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","_focusRipple","fadeOut","_ripple","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRipple","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_bufferValue","path","pathname","_rectangleFillValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","yearView","multiYearView","headerComponent","monthView","MatChipList","_clearSelection","skip","chips","chip","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","correspondingChip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_appearance","appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}