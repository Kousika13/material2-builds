{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.2.0-beta.0-adc251c');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n  private _componentDestroyed = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    } else if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._isYearEnabled(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _isYearEnabled(year: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  /** @deprecated Use the animation property instead. */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, {...this.rippleConfig, ...config});\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","args","selector","host","class","type","ElementRef","NgZone","MatInkBar","MatTabLabel","templateRef","viewContainerRef","_super","call","this","tslib_1.__extends","Directive","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","_this","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","Object","defineProperty","prototype","ngOnChanges","changes","hasOwnProperty","next","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Component","template","inputs","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","exportAs","propDecorators","Input","matTabsAnimations","translateTab","trigger","state","style","transform","transition","animate","MatTabBodyPortal","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","subscribe","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","unsubscribe","ComponentFactoryResolver","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","value","styles","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","apply","map","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","declarations","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","_config","_applyConfigDefaults","config","snackBarRef","_attach","component","afterDismissed","_openedSnackBarRef","containerInstance","enter","dismiss","duration","afterOpened","_dismissAfter","announcementMessage","_live","announce","politeness","MatSnackBar","open","message","action","data","openFromComponent","SimpleSnackBar","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","MatSnackBarContainer","containerRef","instance","snackBarConfig","_createOverlay","container","MatSnackBarRef","injector","_createInjector","portal","contentRef","attachComponentPortal","_breakpointObserver","observe","Breakpoints","Handset","detachments","take","matches","overlayElement","overlayConfig","OverlayConfig","direction","positionStrategy","_overlay","global","isRtl","isLeft","horizontalPosition","isRight","left","right","centerHorizontally","verticalPosition","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","_injector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","opacity","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","role","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","ContentChildren","MatHorizontalStepper","aria-orientation","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","Number","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","show","_setStyles","hide","inkBar","width","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","MatSlideToggle","labelPosition","ariaLabel","ariaLabelledby","required","checked","_inputElement","_ripple","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragging","dragX","dragPercentage","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","source","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","setTimeout","_open","dispose","dismissedByAction","asObservable","_onEnter","InjectionToken","MatSnackBarConfig","SHOW_ANIMATION","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","COMPLEX","snackBarState","[@contentFade]","_animationState","_portalOutlet","Error","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","onMicrotaskEmpty","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","_parentSnackBar","_snackBarRefAtThisLevel","parent","_markRadiosForCheck","MatRadioGroup","_required","_isInitialized","_touch","_updateRadioButtonNames","_radios","radio","_updateSelectedRadioFromValue","isAlreadySelected","MatRadioChange","_markForCheck","_changeDetector","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioButton","descendants","align","_MatRadioGroupMixinBase","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_uniqueId","nextUniqueId","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_labelPosition","_disabled","focusVia","focusOrigin","_onInputFocusChange","_isRippleDisabled","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","_focusRipple","fadeOut","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","_slideRenderer","_onChangeEvent","toggle","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","MatTooltip","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","_tooltipInstance","scrollableViewProperties","isOverlayClipped","isVisible","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","_disposeTooltip","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","_updateTooltipMessage","updatePosition","_setTooltipClass","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","showDelay","hideDelay","TooltipComponent","_visibility","_closeOnInteraction","_transformOrigin","_onHide","delay","_hideTimeoutId","_showTimeoutId","afterHidden","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","touchendHideDelay","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","newValue","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MatRadioGroupBase","_name","_checkSelectedRadioButton","menu","MatMenuTrigger","_checkMenu","reason","_destroyMenu","_parentMenu","triggersSubmenu","_hoverSubscription","_hovered","_menuItemInstance","_openedByMouse","openMenu","_cleanUpSubscriptions","_menuOpen","toggleMenu","closeMenu","_portal","lazyContent","menuData","_closeSubscription","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","_positionSubscription","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_DEFAULT_OPTIONS","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_ariaDescriber","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","removeDescription","_isTooltipVisible","describe","_tooltipClass","removeEventListener","_createTooltip","ESCAPE","_handleTouchend","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","_dateFilter","controlValue","matDatepickerFilter","_validator","Validators","compose","_parseValidator","_minValidator","_maxValidator","_filterValidator","_lastValueValid","_dateAdapter","createMissingDateImplError","_dateFormats","_localeSubscription","localeChanges","MatDatepickerInput","registerDatepicker","_datepicker","_registerInput","_validatorOnChange","deserialize","isValid","_getValidDateOrNull","oldDate","format","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","registerOnValidatorChange","validate","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_selectedDate","_getDateInCurrentMonth","_init","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_isYearEnabled","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","matDatepickerParse","text","matDatepickerMin","actual","matDatepickerMax","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","TransitionCheckState","Unchecked","animSuffix","newState","Checked","Indeterminate","MatCheckbox","_removeFocusRipple","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","_isRoundButton","DEFAULT_ROUND_BUTTON_COLOR","MatButton","_hasHostAttributes","attributes","_i","attribute","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","Init","_indeterminate","changed","_transitionCheckState","_getAriaChecked","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","_emitSelectionChangeEvent","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocomplete","defaults","showPanel","_isOpen","displayWith","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","readOnly","aria-autocomplete","(focusin)","Host","MatAutocompleteModule","MatButtonBase","_MatButtonMixinBase","_isIconButton","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","scrollStrategies","reposition","block","defaultOptions","tslib_1.__assign","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","setActiveStyles","setInactiveStyles"],"mappings":"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"}