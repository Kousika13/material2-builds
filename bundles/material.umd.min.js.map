{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0-e5c8880');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private _closeKeyEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options. */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '*'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '*'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed: EventEmitter<void | 'click' | 'keydown'>\n      = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // TODO(crisbeto): make the origin required when doing breaking changes.\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    // TODO(crisbeto): switch to a required param when doing breaking changes.\n    private _focusMonitor?: FocusMonitor) {\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * <mat-expansion-panel>\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header>\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange: EventEmitter<MatChipSelectionChange>\n      = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["declarations","MatTabGroup","MatTabLabel","MatTab","MatInkBar","MatTabLabelWrapper","MatTabNav","MatTabLink","MatTabBody","MatTabBodyPortal","MatTabHeader","providers","VIEWPORT_RULER_PROVIDER","MatTabsModule","MatToolbarBase","_elementRef","this","_MatToolbarMixinBase","mixinColor","type","Directive","args","selector","exportAs","host","class","MatToolbarRow","MatToolbar","_super","elementRef","_platform","_this","call","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","slice","nativeElement","childNodes","filter","node","classList","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","inputs","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","PlatformModule","exports","VERSION","Version","SELECT_PANEL_PADDING_X","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","role","apply","arguments","MatRow","ctorParameters","MatTableModule","CdkTableModule","CommonModule","MatTable","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRowDef","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","value","_isNumberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","Object","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","defineProperty","next","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","pipe","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","connect","disconnect","_ngZone","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","ElementRef","NgZone","templateRef","viewContainerRef","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Input","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","decorators","Inject","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinDisableRipple","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","_activeLinkChanged","_activeLinkElement","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","_afterDismissed","asObservable","MatSnackBarRef","afterOpened","containerInstance","_onEnter","onAction","_onAction","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","dismissWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","exit","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","afterDismissed","dismiss","_dismissAfter","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","selected","optional","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","CDK_TABLE_TEMPLATE","CdkTable","CdkCellDef","CdkHeaderCellDef","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkCell","CdkHeaderRowDef","MatSidenavContainer","_drawers","ContentChildren","MatSidenav","ContentChild","MatSidenavContent","MatDrawerContainer","MatSidenavModule","MatDrawer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_rippleConfig","centered","radius","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","percentage","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterOpened","_dismissedByAction","_finishDismiss","clearTimeout","_durationTimeoutId","closeWithAction","_open","dispose","dismissedByAction","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","_manualListeners","listener","addEventListener","MatTooltip","_tooltipInstance","_disposeTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","IOS","removeEventListener","clear","delay","showDelay","_createTooltip","hideDelay","isVisible","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","platform","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","nodeName","webkitUserSelect","userSelect","MatListSubheaderCssMatStyler","_navList","_isNavList","MatListItem","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","MatNavList","_MatListItemMixinBase","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOptionChange","MatSelectionListChange","MatListOption","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","getLabel","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","MatDatepickerInput","_dateAdapter","deserialize","_lastValueValid","isValid","_getValidDateOrNull","oldDate","format","_dateFormats","display","dateInput","sameDate","_valueChange","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","selectedChange","selectedDate","_userSelection","_init","_selectedDate","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","getMonth","activeDate","toLocaleUpperCase","firstOfMonth","createDate","getYear","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","createMissingDateImplError","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","selectedYear","selectedMonth","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter"],"mappings":"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"}