{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.0-b62343a');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = this._elementRef.nativeElement.nodeName.toLowerCase() === 'select';\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex,\n    CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTableDataSource","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatInkBar","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","style","visibility","hide","positions","inkBar","left","width","NgZone","MatTabContent","TemplateRef","_CdkPortal","CdkPortal","MatTabLabel","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","MatSlider","_tickInterval","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","_thumbLabel","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatExpansionPanelTitle","_hideToggle","displayMode","MatAccordion","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","MatExpansionPanelHeader","hideToggle","CdkAccordion","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelDescription","MatExpansionPanelContent","MatExpansionModule","MatGridTile","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","startAt","minDate","maxDate","dateFilter","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","_CdkAccordionItem","CdkAccordionItem","uniqueId","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","cellNumber","activeCell","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","MatChipList","chips","chip","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_hasFocus","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","siblings","sibling","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_onInputFocusChange","ngAfterViewChecked","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_focusRipple","fadeOut","ripple","launch","persistent","_onInteractionEvent","animSuffix","rippleWidth","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_setVisibility","MatAutocomplete","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}