{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-cae16b0');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.asObservable().subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedByMouse = event.button === 0;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const {phaseName, toState, fromState} = event;\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","NgZone","ChangeDetectorRef","ViewportRuler","MatTabNav","propDecorators","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_this","_super","call","this","_tabNavBar","_elementRef","_focusMonitor","_tabLinkRipple","setupTriggerEvents","nativeElement","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","args","exportAs","inputs","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","selector","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatRowDef","_CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatFooterRowDef","MatHeaderCell","MatCell","MatFooterCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","positions","inkBar","left","width","TemplateRef","_CdkPortal","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","_activeLinkElement","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","CdkColumnDef","sticky","stickyEnd","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkFooterCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","CdkRowDef","MatSlider","_tickInterval","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","_thumbLabel","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","getPathname","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","_dateAdapter","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","todayValue","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","MatCheckbox","_calculateRippleRadius","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","MatCheckboxChange","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","_hasFocus","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxBase","_MatCheckboxMixinBase","_uniqueAutocompleteIdCounter","_autoActiveFirstOption","autoActiveFirstOption","MatAutocomplete","_isOpen","showPanel","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","HAMMER_LOADER","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}