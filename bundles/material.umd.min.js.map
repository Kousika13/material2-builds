{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /** Ripple config for all ripples created by events. */\n  rippleConfig: RippleConfig = {};\n\n  /** Whether mouse ripples should be created or not. */\n  rippleDisabled: boolean = false;\n\n  constructor(elementRef: ElementRef, private _ngZone: NgZone, platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets the trigger element and registers the mouse events. */\n  setTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) =>\n            element.addEventListener(type, fn, this._eventOptions));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(event.touches[0].clientX, event.touches[0].clientY, this.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\n// TODO(devversion): Move into global utility function.\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const previouslyFocusedIndex = this._keyManager.activeItemIndex;\n\n      this._keyManager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && this._keyManager.activeItem &&\n          this._keyManager.activeItemIndex !== previouslyFocusedIndex) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple) {\n        this.close();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element, false).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal<any> | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal<any> | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal<any>;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  _position: MatTabBodyPositionState;\n  @Input('position') set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  _origin: MatTabBodyOriginState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input('origin') set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n  get scrollDistance(): number { return this._scrollDistance; }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleGlobalOptions,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase = mixinTabIndex(mixinDisabled(MatTabLinkBase));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Whether the ripples for this tab should be disabled or not. */\n  private _disableRipple: boolean = false;\n\n  /** Reference to the instance of the ripple for the tab link. */\n  private _tabLinkRipple: MatRipple;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /** Whether ripples should be disabled or not. */\n  get disableRipple(): boolean { return this.disabled || this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._tabLinkRipple.disabled = this.disableRipple;\n    this._tabLinkRipple._updateRippleRenderer();\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MatRipple(_elementRef, ngZone, platform, globalOptions);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.0.3-bfd513d');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  get direction(): SortDirection { return this._direction; }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear() { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input('start') start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index() { return this._index; }\n  set index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active() { return this._active; }\n  set active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional() { return this._optional; }\n  set optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext { }\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  set data(data: T[]) { this._data.next(data); }\n  get data() { return this._data.value; }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  set filter(filter: string) { this._filter.next(filter); }\n  get filter(): string { return this._filter.value; }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  get sort(): MatSort|null { return this._sort; }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  get paginator(): MatPaginator|null { return this._paginator; }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  source: MatSlideToggle;\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    let event = new MatSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.onChange(this.checked);\n    this.change.emit(event);\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert() { return this._invert; }\n  set invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max() { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min() { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step() { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical() { return this._vertical; }\n  set vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: any = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. **/\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A radio-button. May be inside of\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value) { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value) {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._validateDrawers());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage() {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value() { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition() { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition() { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  set classList(classes: string) { this.panelClass = classes; }\n  get classList(): string { return this.panelClass; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu. This method is used by the menu trigger\n   * to focus the first item when the menu is opened by the ENTER key.\n   */\n  focusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened by mouse,\n   * allowing the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // If the menu was opened by mouse, we focus the root node, which allows for the keyboard\n    // interactions to work. Otherwise, if the menu was opened by keyboard, we focus the first item.\n    if (this._openedByMouse) {\n      let rootNode = this._overlayRef!.overlayElement.firstElementChild as HTMLElement;\n\n      if (rootNode) {\n        this.menu.resetActiveItem();\n        rootNode.focus();\n      }\n    } else {\n      this.menu.focusFirstItem();\n    }\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse || !this.triggersSubmenu()) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve(() => this.selected && this.selectionList._reportValueChange());\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList.onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': 'onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(private _elementRef: ElementRef) {\n    super();\n  }\n\n  /** Focuses the menu item. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  ngOnDestroy() {\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input() get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input() get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input() get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private  _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal<any>;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal<any>(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, false);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keyup event calling to toggle() if appropriate. */\n  _keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /** Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols() { return this._cols; }\n  set cols(value: any) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize() { return this._gutter; }\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Date filter for the month and year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _monthView: boolean;\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n\n  get _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * Determine the date for the month that comes before the given month in the same column in the\n   * calendar table.\n   */\n  private _prevMonthInSameCol(date: D): D {\n    // Decrement by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, -4);\n  }\n\n  /**\n   * Determine the date for the month that comes after the given month in the same column in the\n   * calendar table.\n   */\n  private _nextMonthInSameCol(date: D): D {\n    // Increment by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, 4);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n\n  /**\n   * Handles keydown event on datepicker content.\n   * @param event The event.\n   */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(this._popupRef.backdropClick(), this._popupRef.detachments())\n      .subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(@Optional() private _httpClient: HttpClient, private _sanitizer: DomSanitizer) {}\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      // Note: 1 corresponds to `Node.ELEMENT_NODE` which we can't use in Universal.\n      if (element.childNodes[i].nodeType === 1) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input() fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input() fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  get minRows() { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows() { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Change to month view';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToYearViewLabel = 'Change to year view';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input() get checked() {\n    return this._checked;\n  }\n\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input() get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input() get selectable(): boolean {\n    return this._selectable;\n  }\n\n\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input() get removable(): boolean {\n    return this._removable;\n  }\n\n\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  get id() { return this._id || this._uid; }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  get required() {\n    return this._required;\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur() { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus() { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog.  */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker() { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder() { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel() { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {MatOption, MatOptgroup} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n})\nexport class MatAutocomplete implements AfterContentInit {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n  @Input('matRippleTrigger') trigger: HTMLElement|HTMLElement;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled') disabled: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /** Custom color for ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether foreground ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  constructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n\n  ngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Updates the ripple renderer with the latest ripple configuration. */\n  _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport {MatRipple, RippleGlobalOptions, MAT_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","this","_setStyles","element","MatInkBar","prototype","show","_elementRef","nativeElement","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","type","Directive","args","selector","host","class","ElementRef","NgZone","MatTabLabel","templateRef","viewContainerRef","_super","call","tslib_1.__extends","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","_this","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","Object","defineProperty","ngOnChanges","changes","hasOwnProperty","next","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Component","template","inputs","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","exportAs","propDecorators","Input","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","MatTabBodyPortal","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","subscribe","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","unsubscribe","ComponentFactoryResolver","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","value","styles","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","apply","map","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","MatRipple","ngZone","platform","globalOptions","parseInt","get","enumerable","configurable","_updateRippleRenderer","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","declarations","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","MatToolbarModule","PlatformModule","VERSION","Version","matSnackBarAnimations","snackBarState","role","[@state]","(@state.done)","MatSnackBarContainer","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","snackBarRef","_attach","afterDismissed","containerInstance","enter","dismiss","duration","afterOpened","_dismissAfter","announcementMessage","announce","politeness","open","message","action","data","SimpleSnackBar","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","snackBarConfig","_createOverlay","container","MatSnackBarRef","injector","_createInjector","portal","contentRef","attachComponentPortal","observe","Breakpoints","Handset","detachments","take","matches","overlayElement","overlayConfig","OverlayConfig","direction","positionStrategy","global","isRtl","isLeft","horizontalPosition","isRight","right","centerHorizontally","verticalPosition","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","opacity","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","(click)","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","selected","optional","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","ctorParameters","MatVerticalStepper","MatStepperNext","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","_inputElement","focusOrigin","_onInputFocusChange","MatSlideToggle","_onChangeEvent","stopPropagation","_slideRenderer","dragging","checked","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","onChange","registerOnTouched","onTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","_rippleConfig","MatSlideToggleChange","source","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","labelPosition","ariaLabel","ariaLabelledby","required","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","closeWithAction","_open","dispose","asObservable","_onEnter","InjectionToken","MatSnackBarConfig","SHOW_ANIMATION","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","contentFade","COMPLEX","[@contentFade]","_animationState","_portalOutlet","Error","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","onMicrotaskEmpty","Array","isArray","cssClass","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_required","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","ContentChildren","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_uniqueId","_checked","centered","radius","speedFactor","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","blur","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_validateDrawers","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","MatSlideToggleBase","_MatSlideToggleMixinBase","_","MatTooltip","_tooltipInstance","_disposeTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","IOS","_manualListeners","listener","removeEventListener","clear","delay","showDelay","_createTooltip","hideDelay","isVisible","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","rootNode","resetActiveItem","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","_getOptionIndex","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","nodeName","webkitUserSelect","userSelect","addEventListener","_navList","_isNavList","MatListItem","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","MatNavList","_MatListItemMixinBase","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOptionChange","MatSelectionListChange","MatListOption","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","newElevation","customElevation","c","_previousElevation","_onAnimationDone","MatDatepickerToggle","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatDatepickerInput","MatMonthView","MatYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keyup","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_weeks","MatCalendarCell","dateNames","_getDateInCurrentMonth","date","_hasSameMonthAndYear","activeDate","_dateAdapter","getDate","d1","d2","getMonth","getYear","_getValidDateOrNull","isDateInstance","isValid","dateFilter","selectedChange","_userSelection","_dateFormats","createMissingDateImplError","_activeDate","today","oldActiveDate","deserialize","_init","_selectedMonth","_getMonthInCurrentYear","_monthSelected","month","daysInMonth","getNumDaysInMonth","createDate","_todayMonth","_yearLabel","getYearName","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_isMonthEnabled","firstOfMonth","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_monthView","monthYearLabel","switchToYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","nextMonthLabel","nextYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","_dateSelected","sameDate","_userSelected","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","date1","date2","_prevMonthInSameCol","_nextMonthInSameCol","DateAdapter","MAT_DATE_FORMATS","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","datepicker","[class.mat-datepicker-content-touch]","_disabledChange","_inputSubscription","_popupRef","selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","isAttached","completeClose","closedStream","afterClosed","componentInstance","_createPopup","getPopupConnectionElementRef","fallbackOffset","MatDialog","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","oldDate","registerOnValidatorChange","validate","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","parse","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","matDatepicker","_watchStateChanges","datepickerDisabled","inputDisabled","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","disableClose","_afterOpen","_beforeClose","_animationStateChanged","phaseName","_result","keydownEvents","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","closeAll","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_selectedDate","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","getDateNames","dateA11yLabel","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_escapeEventStream","_destroyPanel","autocomplete","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","optionSelections","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","button","anchor","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","year","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","rippleConfig","rippleDisabled","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","setTriggerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_rippleRenderer","_globalOptions","baseSpeedFactor","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]"],"mappings":"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"}