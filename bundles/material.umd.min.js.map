{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.0-bd21f21');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document?: any) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = this._elementRef.nativeElement.nodeName.toLowerCase() === 'select';\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex,\n    CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","positions","_inkBarPositioner","element","inkBar","nativeElement","style","left","width","NgZone","_MAT_INK_BAR_POSITIONER","MatInkBar","MatTabContent","TemplateRef","_CdkPortal","CdkPortal","MatTabLabel","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_setStyles","_value","_percent","_calculatePercentage","MatSlider","_vertical","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","toString","split","pop","parseFloat","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","selectedOptionOffset","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatAccordion","_handleHeaderFocus","header","MAT_ACCORDION","_headers","MatExpansionPanelHeader","hideToggle","displayMode","CdkAccordion","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MatExpansionModule","MatGridTile","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","_CdkAccordionItem","CdkAccordionItem","uniqueId","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","activeCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","cellAspectRatio","selectedValueChange","selectedChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","MatChipList","chips","chip","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_hasFocus","_lastDestroyedChipIndex","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_onInputFocusChange","ngAfterViewChecked","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_focusRipple","fadeOut","ripple","launch","persistent","_onInteractionEvent","animSuffix","rippleWidth","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_setVisibility","MatAutocomplete","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}