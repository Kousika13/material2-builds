{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {MatTabContent} from './tab-content';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {take} from 'rxjs/operators/take';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.4-2b745c4');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback)\n      .withScrollableContainers(\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef)\n      );\n\n    strategy.onPositionChange.pipe(\n        filter(() => !!this._tooltipInstance),\n        takeUntil(this._destroyed)\n    ).subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance!.isVisible()) {\n        // After position changes occur and the overlay is clipped by\n        // a parent scrollable then close the tooltip.\n        this._ngZone.run(() => this.hide(0));\n      } else {\n        // Otherwise recalculate the origin based on the new position.\n        this._tooltipInstance!._setTransformOrigin(change.connectionPair);\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position = this._overlayRef!.getConfig().positionStrategy as ConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([])\n      .withFallbackPosition(origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options');\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar, MAT_SNACK_BAR_DEFAULT_OPTIONS} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY() {\n  return new MatSnackBarConfig();\n}\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [\n    MatSnackBar,\n    LIVE_ANNOUNCER_PROVIDER,\n    {\n      provide: MAT_SNACK_BAR_DEFAULT_OPTIONS,\n      useFactory: MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY\n    },\n  ]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as ConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.onPositionChange.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase\n    implements OnInit, OnDestroy, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [\n    MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n    {provide: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, useValue: false}\n  ],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatBadge,\n  ],\n  declarations: [\n    MatBadge,\n  ],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_selectedIndexChanged","_scrollToLabel","_selectedIndex","_checkScrollingControls","_alignInkBarToSelectedTab","_changeDetectorRef","markForCheck","_scrollDistanceChanged","_updateTabScrollPosition","MatTabHeader","prototype","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","selectFocusedIndex","emit","focusIndex","ngAfterContentInit","_this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","_updatePagination","requestAnimationFrame","_realignInkBar","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","Object","defineProperty","_focusIndex","value","_isValidIndex","indexFocused","_setTabFocus","index","_labelWrappers","tab","toArray","disabled","tabIndex","_showPaginationControls","length","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","Output","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","ngAfterContentChecked","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","PlatformModule","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","state","visibility","transition","animate","verticalStepTransition","trigger","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","matStepperAnimations","horizontalStepTransition","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepHeader","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","show","_setStyles","hide","inkBar","left","offsetLeft","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceNumberProperty","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabHeaderBase","_MatTabHeaderMixinBase","_tabLabelCount","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","displayWith","vertical","input","_sliderWrapper","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","useFactory","MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatDrawerContainer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","MatSidenavModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatRadioModule","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","errorStateMatcher","selectionChange","valueChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","withScrollableContainers","getAncestorScrollContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","withPositions","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_previousElevation","newElevation","MatMenu","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","customElevation","c","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","setAttribute","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","iconName","parts","svgIcon","namespace","getNamedSvgIcon","svg","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","ICON_REGISTRY_PROVIDER","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","dateChange","MatDatepickerInputEvent","_getThemePalette","_formField","_getValidDateOrNull","_dateAdapter","isDateInstance","isValid","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","dateInput","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","_disabledChange","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","year","maxDate","getYear","minDate","dateFilter","firstOfYear","createDate","date","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","_dateFormats","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","getYearName","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","MatCalendarCell","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","startView","_userSelection","_startAt","_clampedActiveDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","firstChange","view","monthView","yearView","multiYearView","_dateSelected","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","selectedChanged","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","NG_VALIDATORS","target","targetElement","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","oldDate","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","yearName","_shouldEnableYear","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MatAutocompleteTrigger","fromEvent","clickTarget","formField","_overlayAttached","_setTriggerValue","_resetActiveItem","_closeKeyEventStream","activeOption","prevActiveItem","autocomplete","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_previousValue","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","recalculateLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","underlineRef","_inputContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","_componentDestroyed","optionSelections","_outsideClickStream","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}