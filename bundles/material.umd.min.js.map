{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.3-98b9ed1');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n          // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n          // adding a tab within the `selectedIndexChange` event.\n          this._indexToSelect = this._selectedIndex = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @deletion-target 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  /**\n   * Current page path. Used to prefix SVG references which\n   * won't work on Safari unless they're prefixed with the path.\n   */\n  _currentPath: string;\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @deletion-target 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n    this._currentPath = location ? location.path() : '';\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @deletion-target 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatNestedTreeNode","_elementRef","_tree","_differs","tabIndex","_this","_super","call","this","Number","tslib_1.__extends","prototype","ngAfterContentInit","ngOnDestroy","type","Directive","args","selector","exportAs","host","[attr.aria-expanded]","[attr.role]","class","inputs","providers","provide","CdkNestedTreeNode","useExisting","CdkTreeNode","ElementRef","CdkTree","IterableDiffers","undefined","decorators","Attribute","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNodeDef","MatTreeNode","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_contentPortal","MatTab","ngOnChanges","hasOwnProperty","_labelChange","_disableChange","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","_viewContainerRef","propDecorators","ViewChild","TemplateRef","textLabel","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","ViewContainerRef","MatTabBody","Inject","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","position","_getLayoutDirection","origin","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","_setTabFocus","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTabContent","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_MatTreeNodeMixinBase","[attr.aria-level]","CdkTreeNodeDef","_isSorted","_updateArrowDirection","_viewState","_disableViewStateAnimation","_setAnimationTransitionState","_arrowDirection","changeDetectorRef","MatSortHeader","_disableClear","id","_cdkColumnDef","name","_sort","register","deregister","_rerenderSubscription","_setIndicatorHintVisible","visible","_isDisabled","_showIndicatorHint","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","CdkColumnDef","disableClear","MAT_SORT_HEADER_INTL_PROVIDER","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","Injectable","providedIn","MatStepperIntl","MatStepHeader","_intl","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","MatSlider","axis","vertical","scale","percent","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_isMinValue","_invertAxis","detectChanges","_dirChangeSubscription","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","thumbLabel","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","sortButtonLabel","MatSortHeaderIntl","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","getSortHeaderNotContainedWithinSortError","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","MatSelect","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","scrollBuffer","maxScroll","optionOffsetFromPanelTop","itemHeight","_getItemHeight","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_currentPath","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","insertBefore","_outlet","outletElement","context","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withWrap","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","DomPortalOutlet","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","autoActiveFirstOption","panelWidth","optionSelected","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}