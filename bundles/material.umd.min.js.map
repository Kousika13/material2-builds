{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-rc.12-6df3709');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(value, 0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: () => _matInkBarPositioner\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n */\nexport const _matInkBarPositioner: _MatInkBarPositioner = (element: HTMLElement) => {\n  return {\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  };\n};\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => this._slideRenderer.stopThumbDrag());\n      });\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance && !active.disabled))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._getDirection(),\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupRef.setDirection(this._getDirection());\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._getDirection(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n\n  /** Returns the layout direction of the datepicker. */\n  private _getDirection() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return !!this._rawValue.find(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform to be made required.\n      private _platform?: Platform) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (!this._initialGapCalculated) {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_dynamicHeight","_tabBodyWrapperHeight","wrapper","_tabBodyWrapper","nativeElement","style","height","offsetHeight","tabHeight","MatTabGroup","prototype","_removeTabBodyWrapperHeight","clientHeight","animationDone","emit","_handleClick","tab","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","type","Component","args","selector","exportAs","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","inputs","host","class","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","propDecorators","_tabHeader","ViewChild","dynamicHeight","Input","headerPosition","backgroundColor","selectedIndexChange","Output","focusChange","selectedTabChange","MatTabNavBase","_elementRef","_MatTabNavMixinBase","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","Object","defineProperty","_backgroundColor","value","classList","remove","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","active","_activeLinkElement","ngOnDestroy","next","complete","_inkBar","show","alignToElement","hide","forEach","link","disableRipple","NgZone","ChangeDetectorRef","ViewportRuler","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","event","preventDefault","MatTabLink","decorators","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","aria-orientation","animations","matStepperAnimations","verticalStepTransition","MatStepper","MatVerticalStepper","ctorParameters","Directionality","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatHorizontalStepper","MatStep","MatStepLabel","MatStepHeader","MatStepperIcon","MatStepperIntl","ErrorStateMatcher","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","arguments","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","_renderChangesSubscription","unsubscribe","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_matInkBarPositioner","left","offsetLeft","width","offsetWidth","_inkBarPositioner","requestAnimationFrame","_setStyles","visibility","positions","inkBar","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabsSubscription","_tabLabelSubscription","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","realignInkBar","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","_afterOpened","MatSnackBarRef","_finishDismiss","_overlayRef","dispose","_onAction","closed","_afterDismissed","dismissedByAction","_dismissedByAction","afterDismissed","asObservable","afterOpened","containerInstance","_onEnter","onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","dismissWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","exit","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","dismiss","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","_dismissAfter","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","horizontalStepTransition","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","[class.mat-drawer-container-explicit-backdrop]","MatSidenavContainer","_drawers","MatSidenav","ContentChild","MatSidenavContent","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawer","MatDrawerContainer","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","displayWith","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatSliderModule","clearTimeout","_durationTimeoutId","closeWithAction","_open","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","matDrawerAnimations","transformDrawer","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatFormFieldModule","MatSelect","MatSelectTrigger","MatOptionModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleDimensions","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","svgElement","_fetchUrl","url","svgText","_svgElementFromString","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_getValidDateOrNull","_dateAdapter","deserialize","_validatorOnChange","MatDatepickerInput","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","setDirection","_getDirection","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_canOpen","_previousValue","openPanel","MatAutocompleteTrigger","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","_scrollToOption","autocomplete","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_viewportSubscription","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","_outsideClickStream","clickTarget","formField","activeOption","prevActiveItem","TAB","_handleInput","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":";;;;;;;o3D6JoBA,SAAgB8pF,GAAUC,EAAGn0E,GAEzB,QAASo0E,KAAOhqF,KAAKiqF,YAAcF,EADnCG,GAAcH,EAAGn0E,GAEjBm0E,EAAEppF,UAAkB,OAANiV,EAAatR,OAAOmmB,OAAO7U,IAAMo0E,EAAGrpF,UAAYiV,EAAEjV,UAAW,GAAIqpF,ICLnF,QAAA5iF,GAAyD+iF,GACvD,MAAF,UAAAnmF,GAMI,QAAJomF,KAAA,IAAgB,GAAhB1oF,MAAAwlD,EAAA,EAAgBA,EAAhBxyC,UAAAvJ,OAAgB+7C,IAAAxlD,EAAhBwlD,GAAAxyC,UAAAwyC,EAAI,IAAJnjD,GAAAC,EAAA8M,MAAA9Q,KAA2C0B,IAA3C1B,WALA+D,GAAAm7B,WAAiC,IApBjC,MAmBuB76B,GAAvB+lF,EAAApmF,GAGIM,OAAJC,eAAQ6lF,EAARzpF,UAAA,gBAAI,WAAiB,MAAOX,MAAKk/B,eAC7B,SAAaz6B,GAAczE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,oCAvBtE2lF,GAmBuBD,GCOvB,QAAA3mF,GAAiE2mF,EAC7DE,GACF,MAAF,UAAArmF,GAmBI,QAAJomF,KAAA,IAAgB,GAAhB1oF,MAAAwlD,EAAA,EAAgBA,EAAhBxyC,UAAAvJ,OAAgB+7C,IAAAxlD,EAAhBwlD,GAAAxyC,UAAAwyC,EAAI,IAAJnjD,GAAAC,EAAA8M,MAAA9Q,KACe0B,IADf1B,WAIM+D,GAAKi3C,MAAQqvC,IAnDnB,MA4BuBhmF,GAAvB+lF,EAAApmF,GAGIM,OAAJC,eAAQ6lF,EAARzpF,UAAA,aAAI,WAA4B,MAAOX,MAAKw+E,YACxC,SAAU/5E,GACR,GAAM66E,GAAe76E,GAAS4lF,CAE1B/K,KAAiBt/E,KAAKw+E,SACpBx+E,KAAKw+E,QACPx+E,KAAKsD,YAAYjD,cAAcqE,UAAUC,OAAO,OAAO3E,KAAKw+E,QAE1Dc,GACFt/E,KAAKsD,YAAYjD,cAAcqE,UAAUE,IAAI,OAAO06E,GAGtDt/E,KAAKw+E,OAASc,oCA3CtB8K,GA4BuBD,GCVvB,QAAAhjF,GAA8DgjF,GAE5D,MAAF,UAAAnmF,GAOI,QAAJomF,KAAA,IAAgB,GAAhB1oF,MAAAwlD,EAAA,EAAgBA,EAAhBxyC,UAAAvJ,OAAgB+7C,IAAAxlD,EAAhBwlD,GAAAxyC,UAAAwyC,EAAI,IAAJnjD,GAAAC,EAAA8M,MAAA9Q,KAA2C0B,IAA3C1B,WANA+D,GAAAK,gBAAsC,IArBtC,MAoBuBC,GAAvB+lF,EAAApmF,GAIIM,OAAJC,eAAQ6lF,EAARzpF,UAAA,qBAAI,WAAsB,MAAOX,MAAKoE,oBAClC,SAAkBK,GAAczE,KAAKoE,eAAiBS,EAAAA,sBAAsBJ,oCAzBhF2lF,GAoBuBD,GCFvB,QAAAjjF,GAAiEijF,EAASG,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAAtmF,GASI,QAAJomF,KAAA,IAAgB,GAAhB1oF,MAAAwlD,EAAA,EAAgBA,EAAhBxyC,UAAAvJ,OAAgB+7C,IAAAxlD,EAAhBwlD,GAAAxyC,UAAAwyC,EAAI,IAAJnjD,GAAAC,EAAA8M,MAAA9Q,KACe0B,IADf1B,WARA+D,GAAA0vE,UAAgC6W,IArBhC,MAoBuBjmF,GAAvB+lF,EAAApmF,GAGIM,OAAJC,eAAQ6lF,EAARzpF,UAAA,gBAAI,WAAyB,MAAOX,MAAKoB,UAAY,EAAIpB,KAAKyzE,eAC1D,SAAahvE,GAEXzE,KAAKyzE,UAAqB,MAAThvE,EAAgBA,EAAQ6lF,mCA1B/CF,GAoBuBD,GCavB,QAAAr0C,GAAsEq0C,GAEpE,MAAF,UAAAnmF,GAyBI,QAAJomF,KAAA,IAAgB,GAAhB1oF,MAAAwlD,EAAA,EAAgBA,EAAhBxyC,UAAAvJ,OAAgB+7C,IAAAxlD,EAAhBwlD,GAAAxyC,UAAAwyC,EAAI,IAAJnjD,GAAAC,EAAA8M,MAAA9Q,KACe0B,IADf1B,WAvBA+D,GAAAoiF,YAA0B,EAM1BpiF,EAAAg0C,aAA4B,GAAI5zC,GAAAA,UA3ChC,MAmCuBE,GAAvB+lF,EAAApmF,GAYIomF,EAAJzpF,UAAA83C,iBAAI,WACE,GAAMsiC,GAAW/6E,KAAKmmF,WAChBx+D,EAAS3nB,KAAK21C,kBAAoB31C,KAAK01C,YACvC60C,EAAUvqF,KAAK0hD,mBAAqB1hD,KAAKy1C,0BACzCxkB,EAAUjxB,KAAK41C,UAAY51C,KAAK41C,UAAgC,QAAG,KACnEklC,EAAWyP,EAAQv5D,aAAaC,EAAStJ,EAE3CmzD,KAAaC,IACf/6E,KAAKmmF,WAAarL,EAClB96E,KAAK+3C,aAAa3xC,SAxD1BgkF,GAmCuBD,GCHvB,QAAAz+D,GAA4Dy+D,GAE1D,MAAF,UAAAnmF,GAyBI,QAAJomF,KAAA,IAAgB,GAAhB1oF,MAAAwlD,EAAA,EAAgBA,EAAhBxyC,UAAAvJ,OAAgB+7C,IAAAxlD,EAAhBwlD,GAAAxyC,UAAAwyC,EAAI,IAAJnjD,GAAAC,EAAA8M,MAAA9Q,KAA2C0B,IAA3C1B,WAvBA+D,GAAAi7B,gBAAqB,EAOrBj7B,EAAAymF,uBAMAzmF,EAAAgT,YAAkB,GAAI0zE,GAAAA,WAAiB,SAAAC,GAG7B3mF,EAAKi7B,eACPj7B,EAAK4mF,kBAAkBD,GAEvB3mF,EAAwB,oBAAEmL,KAAKw7E,OAvDvC,MAkCuBrmF,GAAvB+lF,EAAApmF,GAgCIomF,EAAJzpF,UAAAqsB,iBAAI,WACE,GAAIhtB,KAAKg/B,eACP,KAAMjY,OAAM,wFAId/mB,MAAKg/B,gBAAiB,EAEtBh/B,KAAwB,oBAAE0G,QAAQ1G,KAAK2qF,mBACvC3qF,KAAKwqF,oBAAsB,MAI7BJ,EAAJzpF,UAAAgqF,kBAAI,SAAkBD,GAChBA,EAAWtkF,OACXskF,EAAWrkF,YAjFjB+jF,GAkCuBD,GCgBvB,QAAAS,GAAkBz/E,EAAgB0/E,GAEhC,IAAK,GADCC,GAAclkE,MAAMzb,GACjB6E,EAAI,EAAGA,EAAI7E,EAAQ6E,IAC1B86E,EAAY96E,GAAK66E,EAAc76E,EAEjC,OAAO86E,GC4OT,QAAAC,GAAmC/lF,GAIjCgmF,OAAOpyC,iBAAiB5zC,GAASimF,iBAAiB,WAMpD,QAAAC,GAAkC9wD,EAAWE,EAAW+sD,GACtD,GAAM8D,GAAQ5yE,KAAKqI,IAAIrI,KAAK+mC,IAAIllB,EAAIitD,EAAKtuE,MAAOR,KAAK+mC,IAAIllB,EAAIitD,EAAKh9D,QAC5D+gE,EAAQ7yE,KAAKqI,IAAIrI,KAAK+mC,IAAIhlB,EAAI+sD,EAAK98D,KAAMhS,KAAK+mC,IAAIhlB,EAAI+sD,EAAK78D,QACjE,OAAOjS,MAAK8yE,KAAKF,EAAQA,EAAQC,EAAQA,kCtBtCvC,IAAJ,GALAE,GAAAj0C,EAAAr3B,UAG2BurE,EAA3BvuC,EAAAh9B,UACQwrE,EAAe,EACvBx7E,EAAiB,EAAjBA,EAAAq3C,EAAA,EAAAr3C,IACAs7E,EAAQt7E,GAARmlC,OAAoBm2C,EAApBt7E,GAAAmlC,QAAAo2C,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,gCAcA,OAAAC,GAAAC,EAEAD,EAGIA,EAAJE,EAAAD,EAAAluC,EACAjlC,KAAAqI,IAAA,EAAA6qE,EAAAjuC,EAAAmuC,GAGAD,EuBjSA,QAAApF,KACE,MAAOv/D,OAAM,gEAIf,QAAA6/D,GAAmD3N,GACjD,MAAOlyD,OAAM,4CAA2CkyD,EAA1D,QAIA,QAAA8N,KACE,MAAOhgE,OAAM,sDxJ+Df,QAAAu2D,KACE,MAAOv2D,OAAM,6M+HgFf,QAAA2gD,GAA8B3/C,GAC5B,MAAFM,OAAa,GAAI+3D,IAA2Br4D,GpC9H5C,QAAAivD,KACE,KAAMjwD,OAAM,yEEcd,QAAA+/C,GAA4D7gC,GAE1D,MAAO,YAAM,MAAAA,GAAQE,iBAAiBygC,SA4SxC,QAAAc,GACI3/C,EAA0B6jE,GAC5B,MAAFvjE,OAAaujE,EAAmB7jE,GClOhC,QAAAuhD,GAA0BtkE,EAAqBuiE,GAG7C,IAFA,GAAI5/C,GAA6B3iB,EAAQ3E,cAAcuoE,cAEhDjhD,IAAWA,EAAOjjB,UAAU8G,SAAS,yBAC1Cmc,EAASA,EAAOihD,aAGlB,OAAOjhD,GAAS4/C,EAAYvhE,KAAK,SAAAoiE,GAAU,MAAAA,GAAO/7C,KAApD,EAAmEA,KAAM,K2DlIzE,QAAAy/C,GAAgDtqE,GAC9C,MAAOulB,OAAM,eAAevlB,EAA9B,mCCDA,QAAA87D,GAA2CuuB,GACzC,MAAO9kE,OACH,wCAAwC8kE,EAD9C,0JCEA,QAAAtyB,GAA+B90D,GAC7B,MAAO,IAAGA,GAAS,IAOrB,QAAAiwD,GAA+BjwD,GAC7B,MAAwB,gBAAVA,GAAqBgD,SAAShD,EAAO,IAAMA,ExE8P3D,QAAA4yD,GAAcy0B,GAAuB,MAAO,QAAQA,EAApD,IAIA,QAAAh1B,GAAwBryD,GACtB,MAAQA,GAAMsnF,MAAM,aAAgBtnF,EAAQA,EAAQ,Kf5PtD,QAAAm3D,GAA4ClT,GAC1C,MAAO3hC,OAAM,sCAAsC2hC,EAArD,KASA,QAAAa,KACE,MAAOxiC,OAAM,8JAWf,QAAA6iC,IAAmD5B,GACjD,MAAOjhC,OAAM,yHACkDihC,EAAjE,MAQA,QAAA2S,IAAuDJ,GACrD,MAAOxzC,OAAM,2HACkDwzC,EAAjE,MAihBA,QAAA1P,IACEmhC,EACAC,EACAC,EACAvhF,GACA,MAAOqhF,IAAkB,GAAI7jC,IAAgB8jC,EAAYC,EAAWvhF,GAiBtE,QAAA0wD,IAAkB/S,GAChB,MAAOA,GAAIO,WAAU,GAIvB,QAAAyB,IAAiBF,EAAmB32C,GAClC,MAAO22C,GAAY,IAAM32C,EwF/lB3B,QAAA4/B,MACE,KAAMtsB,OAAM,yKAYd,QAAAw9B,MACE,KAAMx9B,OAAM,oIASd,QAAAy9B,MACE,KAAMz9B,OAAM,kICvBd,QAAAkxB,MACE,MAAOlxB,OAAM,iEASf,QAAAo0B,MACE,MAAOp0B,OAAM,sDAQf,QAAAmxB,MACE,MAAOnxB,OAAM,qC1J8Ff,QAAAuuB,IAA4DrP,GAE1D,MAAO,YAAM,MAAAA,GAAQE,iBAAiBC,cCxExC,QAAA6D,IAAkD7vB,GAChD,MAAO2M,OAAM,qBAAqB3M,EAApC,iBiDDA,QAAA0xB,IAAoDqgD,GAClD,MAAOA,IAAc,GAAIvgD,uBG0CD,6BAAF,KAAxBhrB,IAA4CA,EAA5C,KAAArI,KAAAqI,IAAAnI,EAAAF,KAAAE,IAAAmI,EAAAD,IPzDA,QAAA8jB,IAA8CrqB,GAC5C,KAAM2M,OAAM,iDAAgD3M,EAA9D,O6GnCA,QAAAoS,IAAgDH,GAC9C,MAAOtF,OAAM,kDAAkDsF,EAAjE,MAIA,QAAAuC,MACE,MAAO7H,OAAM,oFAIf,QAAAuF,MACE,MAAOvF,OAAM,oDAIf,QAAAkF,IAA6CvW,GAC3C,MAAOqR,OAASrR,EAAlB,qDlI0IA,QAAAoX,IAA+BhB,EACAc,GAC7B,GAAIw/D,IAA8B,MAAO,OAIzC,OAHa,QAATtgE,GAAmBsgE,EAAU5yC,UAC5B5sB,GAAgBw/D,EAAUl9E,KAAK,IAE7Bk9E,EE5IT,QAAAl+D,IAAsDi+D,GACpD,MAAOA,IAAc,GAAIr+D,gOiHd3B,GAAIo8D,IAAgB5lF,OAAO+nF,iBACpBC,uBAA2B1lE,QAAS,SAAUmjE,EAAGn0E,GAAKm0E,EAAEuC,UAAY12E,IACvE,SAAUm0E,EAAGn0E,GAAK,IAAK,GAAI+2B,KAAK/2B,GAAOA,EAAE4E,eAAemyB,KAAIo9C,EAAEp9C,GAAK/2B,EAAE+2B,KAQ9D4/C,GAAWjoF,OAAOkoF,QAAU,SAAkBxhB,GACrD,IAAK,GAAIyhB,GAAGz8E,EAAI,EAAG08E,EAAIh4E,UAAUvJ,OAAQ6E,EAAI08E,EAAG18E,IAAK,CACjDy8E,EAAI/3E,UAAU1E,EACd,KAAK,GAAI28B,KAAK8/C,GAAOnoF,OAAO3D,UAAU6Z,eAAevW,KAAKwoF,EAAG9/C,KAAIq+B,EAAEr+B,GAAK8/C,EAAE9/C,IAE9E,MAAOq+B,gCgB/BX,MAUAtmD,GAAAC,eAA0B,8BAC1BD,EAAAM,mBAA8B,8BAC9BN,EAAAI,mBAA8B,4BAC9BJ,EAAAioE,YAAuB,8BAbvBjoE,iCAAA,MAmBAF,GAAAC,QAAmB,QACnBD,EAAAO,SAAoB,QACpBP,EAAAK,QAAmB,QArBnBL,KCaaooE,GAAyB,GAAIj0E,GAAAA,eAAwB,qBAChEC,WAAY,OACZC,QAAS,WAAM,OAAA,mBA2Bf,QAAFtP,GAAkEsjF,GAAA7sF,KAAlE6sF,qBAAkEA,EAXlE7sF,KAAA8sF,sBAAiC,EAGjC9sF,KAAA+sF,mBAA8B,EAG9B/sF,KAAA4K,UAA0C,gBAAbD,WAAyBA,SAAWA,SAAW,KAG5E3K,KAAAgtF,QAAsC,gBAAXhC,SAAuBA,OAASA,OAAS,KAG5DhrF,KAAKitF,sBAAwBjtF,KAAK8sF,uBACpC9sF,KAAKktF,yBACLltF,KAAKmtF,uBACLntF,KAAK8sF,sBAAuB,GA9ClC,MAmDUvjF,GAAV5I,UAAAssF,6BACI,MAAOjtF,MAAK6sF,sBAAwB/hF,EAAAA,cAAgB9K,KAAKotF,cAInD7jF,EAAV5I,UAAAysF,sBACI,MAAOptF,MAAKgtF,UAAYhtF,KAAKgtF,QAAmB,WAAKhtF,KAAKgtF,QAAiB,UAGrEzjF,EAAV5I,UAAAusF,kCACQltF,KAAK4K,YAAc5K,KAAK4K,UAAUyiF,SACpC1xC,QAAQC,KACN,yHAMEryC,EAAV5I,UAAAwsF,gCACI,GAAIntF,KAAK4K,WAAyC,kBAArBguC,kBAAiC,CAC5D,GAAM00C,GAActtF,KAAK4K,UAAUilC,cAAc,MAEjDy9C,GAAY5oF,UAAUE,IAAI,2BAC1B5E,KAAK4K,UAAU2iF,KAAKx9C,YAAYu9C,EAEhC,IAAME,GAAgB50C,iBAAiB00C,EAKnCE,IAA2C,SAA1BA,EAAcz+B,SACjCpT,QAAQC,KACN,sLAMJ57C,KAAK4K,UAAU2iF,KAAKnhC,YAAYkhC,KAKpC/jF,EAAF5I,UAAA8sF,wBAAE,YACMztF,KAAK+sF,mBAAsB/sF,KAAKgtF,UAIhChtF,KAAKitF,sBAAwBjtF,KAAKgtF,QAAgB,QACpDrxC,QAAQC,KACN,wFAEJ57C,KAAK+sF,mBAAoB,mBA9E7BvrF,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUqkF,EAAAA,YACV/jF,SAAU+jF,EAAAA,oDAeZlsF,SAAAuH,GAAAR,aAAA/G,KAAewH,EAAAA,WAAfxH,KAA2ByH,EAAAA,OAA3BvH,MAAkCkrF,SA1ClCrjF,KCYaokF,GAAkB,GAAIh1E,GAAAA,eAAuB,mBACxDC,WAAY,OACZC,QAAS,WAAM,MAAAqtB,GAAAA,OAAO0nD,EAAAA,cASXC,IAA4B3gF,QAASygF,GAAiBxgF,YAAaygF,EAAAA,WAGhFl+B,GAAA,wBAMA1vD,KAAA8tF,eAA6B,GAAI3pF,GAAAA,QAhCjC,MA+BEG,QAAFC,eAAMmrD,EAAN/uD,UAAA,qBAAE,WAAwC,MAAOX,MAAK8tF,gDAqLpDp+B,EAAF/uD,UAAAwsD,YAAE,SAAY1oD,GACV,MAAa,OAATA,GAAiBzE,KAAKgvD,eAAevqD,IAAUzE,KAAK2uD,QAAQlqD,GACvDA,EAEFzE,KAAKqxB,WAOdq+B,EAAF/uD,UAAAotF,UAAE,SAAUC,GACRhuF,KAAKguF,OAASA,EACdhuF,KAAK8tF,eAAe1nF,QAUtBspD,EAAF/uD,UAAA2jE,YAAE,SAAY5lB,EAAUuvC,GACpB,MAAOjuF,MAAK68D,QAAQne,GAAS1+C,KAAK68D,QAAQoxB,IACtCjuF,KAAK2+D,SAASjgB,GAAS1+C,KAAK2+D,SAASsvB,IACrCjuF,KAAKw+D,QAAQ9f,GAAS1+C,KAAKw+D,QAAQyvB,IAUzCv+B,EAAF/uD,UAAAgiE,SAAE,SAASjkB,EAAiBuvC,GACxB,GAAIvvC,GAASuvC,EAAQ,CACnB,GAAIC,GAAaluF,KAAK2uD,QAAQjQ,GAC1ByvC,EAAcnuF,KAAK2uD,QAAQs/B,EAC/B,OAAIC,IAAcC,GACRnuF,KAAKskE,YAAY5lB,EAAOuvC,GAE3BC,GAAcC,EAEvB,MAAOzvC,IAASuvC,GAWlBv+B,EAAF/uD,UAAAg9D,UAAE,SAAUpP,EAAS91C,EAAgBmI,GACjC,MAAInI,IAAOzY,KAAKskE,YAAY/V,EAAM91C,GAAO,EAChCA,EAELmI,GAAO5gB,KAAKskE,YAAY/V,EAAM3tC,GAAO,EAChCA,EAEF2tC,GAnRXmB,KCwBaC,GAAmB,GAAIh3C,GAAAA,eAA+B,oBZV7Dy1E,GAAmC,mBAARC,MAI3BC,IACJpgB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzBqgB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvFpgB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEoI,GAAqC,SAAAvmE,GAAK,MAAAw+E,QAAOx+E,EAAI,IAA/Cy+E,GAAqB7D,EAAM,GAAjCrU,IAIMmY,IACJxgB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3EqgB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpDpgB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrCwgB,GACF,oGA+BF,QAAFC,GAAmDC,EAAuB1wD,GAAxE,GAAFp6B,GACIC,EADJC,KAAAjE,OAAAA,WAFA+D,GAAA+qF,kBAA8B,EAI1B9qF,EAAJrD,UAAUotF,UAAV9pF,KAAAF,EAAoB8qF,GAGhB9qF,EAAK+qF,kBAAoB3wD,EAAS8Q,QAClClrC,EAAKgrF,WAAa5wD,EAAS8Q,SAAW9Q,EAAS6Q,OAnFnD,MA4DuC3qC,GAAvCuqF,EAAA5qF,GA0BE4qF,EAAFjuF,UAAAk8D,QAAE,SAAQtO,GACN,MAAOA,GAAKygC,eAGdJ,EAAFjuF,UAAAg+D,SAAE,SAASpQ,GACP,MAAOA,GAAKoQ,YAGdiwB,EAAFjuF,UAAA69D,QAAE,SAAQjQ,GACN,MAAOA,GAAKiQ,WAGdowB,EAAFjuF,UAAAouE,aAAE,SAAaxgB,GACX,MAAOA,GAAK0gC,UAGdL,EAAFjuF,UAAAq+D,cAAE,SAAc1+D,GAAd,GAAFyD,GAAA/D,IACI,IAAIouF,GAAmB,CACrB,GAAMc,GAAM,GAAIb,MAAKc,eAAenvF,KAAKguF,QAAS7vB,MAAO79D,EAAO8uF,SAAU,OAC1E,OAAOxE,GAAM,GAAI,SAAA56E,GACb,MAAAjM,GAAKsrF,+BAA+BtrF,EAAKurF,QAAQJ,EAAK,GAAIK,MAAK,KAAMv/E,EAAG,OAE9E,MAAOs+E,IAAoBhuF,IAG7BsuF,EAAFjuF,UAAAuuE,aAAE,WAAA,GAAFnrE,GAAA/D,IACI,IAAIouF,GAAmB,CACrB,GAAMoB,GAAM,GAAInB,MAAKc,eAAenvF,KAAKguF,QAASyB,IAAK,UAAWL,SAAU,OAC5E,OAAOxE,GAAM,GAAI,SAAA56E,GAAK,MAAAjM,GAAKsrF,+BACvBtrF,EAAKurF,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAGv/E,EAAI,OAE9C,MAAOy+E,KAGTG,EAAFjuF,UAAAotE,kBAAE,SAAkBztE,GAAlB,GAAFyD,GAAA/D,IACI,IAAIouF,GAAmB,CACrB,GAAMsB,GAAM,GAAIrB,MAAKc,eAAenvF,KAAKguF,QAAS2B,QAASrvF,EAAO8uF,SAAU,OAC5E,OAAOxE,GAAM,EAAG,SAAA56E,GAAK,MAAAjM,GAAKsrF,+BACtBtrF,EAAKurF,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAGv/E,EAAI,OAE9C,MAAO0+E,IAA0BpuF,IAGnCsuF,EAAFjuF,UAAA67D,YAAE,SAAYjO,GACV,GAAI6/B,GAAmB,CACrB,GAAMwB,GAAM,GAAIvB,MAAKc,eAAenvF,KAAKguF,QAAS1xB,KAAM,UAAW8yB,SAAU,OAC7E,OAAOpvF,MAAKqvF,+BAA+BrvF,KAAKsvF,QAAQM,EAAKrhC,IAE/D,MAAOigC,QAAOxuF,KAAK68D,QAAQtO,KAG7BqgC,EAAFjuF,UAAAktE,kBAAE,WAEE,MAAO,IAGT+gB,EAAFjuF,UAAA49D,kBAAE,SAAkBhQ,GAChB,MAAOvuD,MAAKw+D,QAAQx+D,KAAK6vF,wBACrB7vF,KAAK68D,QAAQtO,GAAOvuD,KAAK2+D,SAASpQ,GAAQ,EAAG,KAGnDqgC,EAAFjuF,UAAAmvF,MAAE,SAAMvhC,GACJ,MAAOvuD,MAAKy8D,WAAWz8D,KAAK68D,QAAQtO,GAAOvuD,KAAK2+D,SAASpQ,GAAOvuD,KAAKw+D,QAAQjQ,KAG/EqgC,EAAFjuF,UAAA87D,WAAE,SAAWH,EAAc6B,EAAe5P,GAGtC,GAAI4P,EAAQ,GAAKA,EAAQ,GACvB,KAAMp3C,OAAM,wBAAwBo3C,EAA1C,6CAGI,IAAI5P,EAAO,EACT,KAAMxnC,OAAM,iBAAiBwnC,EAAnC,oCAGI,IAAInR,GAASp9C,KAAK6vF,wBAAwBvzB,EAAM6B,EAAO5P,EAEvD,IAAInR,EAAOuhB,YAAcR,EACvB,KAAMp3C,OAAM,iBAAiBwnC,EAAnC,2BAAkE4P,EAAlE,KAGI,OAAO/gB,IAGTwxC,EAAFjuF,UAAA68D,MAAE,WACE,MAAO,IAAI+xB,OAGbX,EAAFjuF,UAAA6tD,MAAE,SAAM/pD,GAGJ,MAAoB,gBAATA,GACF,GAAI8qF,MAAK9qF,GAEXA,EAAQ,GAAI8qF,MAAKA,KAAK/gC,MAAM/pD,IAAU,MAG/CmqF,EAAFjuF,UAAAmuD,OAAE,SAAOP,EAAYwhC,GACjB,IAAK/vF,KAAK2uD,QAAQJ,GAChB,KAAMxnC,OAAM,iDAGd,IAAIqnE,GAAmB,CAGjBpuF,KAAK+uF,aAAexgC,EAAKygC,cAAgB,GAAKzgC,EAAKygC,cAAgB,QACrEzgC,EAAOvuD,KAAK8vF,MAAMvhC,GAClBA,EAAKyhC,YAAYz3E,KAAKqI,IAAI,EAAGrI,KAAKE,IAAI,KAAM81C,EAAKygC,kBAGnDe,EAAN1nE,MAA0B0nE,GAAeX,SAAU,OAE7C,IAAMQ,GAAM,GAAIvB,MAAKc,eAAenvF,KAAKguF,OAAQ+B,EACjD,OAAO/vF,MAAKqvF,+BAA+BrvF,KAAKsvF,QAAQM,EAAKrhC,IAE/D,MAAOvuD,MAAKqvF,+BAA+B9gC,EAAK0hC,iBAGlDrB,EAAFjuF,UAAAi+D,iBAAE,SAAiBrQ,EAAY2hC,GAC3B,MAAOlwF,MAAK0+D,kBAAkBnQ,EAAc,GAAR2hC,IAGtCtB,EAAFjuF,UAAA+9D,kBAAE,SAAkBnQ,EAAY4hC,GAC5B,GAAIC,GAAUpwF,KAAK6vF,wBACf7vF,KAAK68D,QAAQtO,GAAOvuD,KAAK2+D,SAASpQ,GAAQ4hC,EAAQnwF,KAAKw+D,QAAQjQ,GAUnE,OAJIvuD,MAAK2+D,SAASyxB,MAAcpwF,KAAK2+D,SAASpQ,GAAQ4hC,GAAU,GAAK,IAAM,KACzEC,EAAUpwF,KAAK6vF,wBAAwB7vF,KAAK68D,QAAQuzB,GAAUpwF,KAAK2+D,SAASyxB,GAAU,IAGjFA,GAGTxB,EAAFjuF,UAAAs8D,gBAAE,SAAgB1O,EAAY8hC,GAC1B,MAAOrwF,MAAK6vF,wBACR7vF,KAAK68D,QAAQtO,GAAOvuD,KAAK2+D,SAASpQ,GAAOvuD,KAAKw+D,QAAQjQ,GAAQ8hC,IAGpEzB,EAAFjuF,UAAA2vF,UAAE,SAAU/hC,GACR,OACEA,EAAKgiC,iBACLvwF,KAAKwwF,QAAQjiC,EAAKkiC,cAAgB,GAClCzwF,KAAKwwF,QAAQjiC,EAAKmiC,eAClBj3C,KAAK,MAQTm1C,EAAFjuF,UAAAwsD,YAAE,SAAY1oD,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAIkqF,GAAegC,KAAKlsF,GAAQ,CAC9B,GAAI8pD,GAAO,GAAIghC,MAAK9qF,EACpB,IAAIzE,KAAK2uD,QAAQJ,GACf,MAAOA,IAIb,MAAOvqD,GAAXrD,UAAiBwsD,YAAjBlpD,KAAAjE,KAA6ByE,IAG3BmqF,EAAFjuF,UAAAquD,eAAE,SAAep3C,GACb,MAAOA,aAAe23E,OAGxBX,EAAFjuF,UAAAguD,QAAE,SAAQJ,GACN,OAAQqiC,MAAMriC,EAAKsiC,YAGrBjC,EAAFjuF,UAAA0wB,QAAE,WACE,MAAO,IAAIk+D,MAAKuB,MAIVlC,EAAVjuF,UAAAkvF,wBAAA,SAAkCvzB,EAAc6B,EAAe5P,GAC3D,GAAMnR,GAAS,GAAImyC,MAAKjzB,EAAM6B,EAAO5P,EAOrC,OAHI+N,IAAQ,GAAKA,EAAO,KACtBlf,EAAO4yC,YAAYhwF,KAAK68D,QAAQzf,GAAU,MAErCA,GAQDwxC,EAAVjuF,UAAA6vF,QAAA,SAAkB9D,GACd,OAAQ,KAAOA,GAAGthF,OAAO,IAUnBwjF,EAAVjuF,UAAA0uF,+BAAA,SAAyCrmC,GACrC,MAAOA,GAAI7Y,QAAQ,kBAAmB,KAchCy+C,EAAVjuF,UAAA2uF,QAAA,SAAkBM,EAA0BrhC,GACxC,GAAMw7B,GAAI,GAAIwF,MAAKA,KAAKwB,IACpBxiC,EAAKygC,cAAezgC,EAAKoQ,WAAYpQ,EAAKiQ,UAAWjQ,EAAKyiC,WAC1DziC,EAAK0iC,aAAc1iC,EAAK2iC,aAAc3iC,EAAK4iC,mBAC/C,OAAOvB,GAAI9gC,OAAOi7B,mBAnQtBvoF,KAACupB,EAAAA,iDAkBDvpB,SAAAuH,GAAAR,aAAA/G,KAAewH,EAAAA,WAAfxH,KAA2ByH,EAAAA,OAA3BvH,MAAkCisF,QArElCnsF,KAAQsH,EAAAA,YARR8lF,GA4DuCl/B,IajD1B0hC,IACX5iC,OACEb,UAAW,MAEboB,SACEpB,WAAY2O,KAAM,UAAW6B,MAAO,UAAWsxB,IAAK,WACpDxvB,gBAAiB3D,KAAM,UAAW6B,MAAO,SACzCkR,eAAgB/S,KAAM,UAAW6B,MAAO,OAAQsxB,IAAK,WACrDrwB,oBAAqB9C,KAAM,UAAW6B,MAAO,sCCnBjD,sBAqBA38D,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUipB,EAAAA,gBACVrlB,YACGC,QAASwiD,GAAa34B,SAAU63D,SAxBrCyC,KAgCA9a,GAAoD6a,+BAhCpD,sBA8BA5vF,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUgoF,IACVpkF,YAAaC,QAASyiD,GAAkB6mB,SAA1CD,SAhCA+a,iCCAA,MAcEC,GAAF5wF,UAAAqwB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQugE,OAAUtgE,GAAQA,EAAKugE,4BAH5EjwF,KAACupB,EAAAA,aAZDwmE,iCAAA,MAsBE1+E,GAAFlS,UAAAqwB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQygE,SAAYxgE,GAAQA,EAAKugE,4BAH9EjwF,KAACupB,EAAAA,WAADrpB,OAAakX,WAAY,8GApBzB/F,KCuBa8+E,GAAqB,GAAIh5E,GAAAA,eAA8B,qCAiBlE,QAAFqe,GACoD46D,EACpCC,GAFd,GAAF9tF,GAGIC,EAHJC,KAAAjE,OAAAA,WACoD+D,GAApD6tF,eAAoDA,EAbpD7tF,EAAA+tF,QAAoD,mBAAX9G,QAAyB,OAAgB+G,OAAS,KAG3FhuF,EAAAiuF,OAAqBjuF,EAAK+tF,SACtB,YACA,QACA,aACA,WACA,aACA,gBAOID,GACFA,EAAapE,4BA7CnB,MA2BmCppF,GAAnC2yB,EAAAhzB,GAmCEgzB,EAAFr2B,UAAAsxF,YAAE,SAAYjtF,GACV,GAAMktF,GAAK,GAAIlyF,MAAK8xF,QAAQ9sF,EAAShF,KAAK4xF,oBAAkB7oF,IAGtDopF,EAAM,GAAInyF,MAAK8xF,QAAQM,IACvBC,EAAQ,GAAIryF,MAAK8xF,QAAQQ,MACzBC,EAAQ,GAAIvyF,MAAK8xF,QAAQU,MAKzBC,EAAQzyF,KAAK0yF,kBAAkBP,GAAM/pF,MAAO,QAASuqF,UAAW,GAAIN,GACpEO,EAAY5yF,KAAK0yF,kBAAkBH,GAAQnqF,MAAO,YAAayqF,KAAM,KAQ3E,OALAV,GAAIW,cAAcT,GAGlBH,EAAGttF,KAAKytF,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIM57D,EAAVr2B,UAAA+xF,kBAAA,SAA4BvI,EAAkB9yC,GAA9C,IAA4D,GAA5D07C,MAAA7rC,EAAA,EAA4DA,EAA5DxyC,UAAAvJ,OAA4D+7C,IAAA6rC,EAA5D7rC,EAAA,GAAAxyC,UAAAwyC,EACI,IAAI8rC,GAAa,GAAK7I,GAAoC,YAAE9yC,EAK5D,OAHA07C,GAAa7jF,KAAKi7E,GAClB4I,EAAarsF,QAAQ,SAAAm+C,GAAQ,MAAAmuC,GAAWF,cAAcjuC,KAE/CmuC,kBAlEXxxF,KAACupB,EAAAA,iDAeDvpB,SAAAuH,GAAAR,aAAA/G,KAAKwH,EAAAA,WAALxH,KAAiByH,EAAAA,OAAjBvH,MAAwBiwF,QA/BxBnwF,KAAQ+H,GAARhB,aAAA/G,KAgCKwH,EAAAA,cA1CLguB,GA2BmCi8D,EAAAA,iDC3BnC,sBAsBAzxF,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,wBACVW,MAAOC,MAAS,gBAxBlB2wF,KAgCA7sC,GAAA,WACE,QAAFA,GAAsBC,EAAoCp2B,GAAxD,GAAFnsB,GAAA/D,IAAsBA,MAAtBsmD,OAAsBA,EAAoCtmD,KAA1DkwB,SAA0DA,EACtDlwB,KAAKmzF,cAAcnzF,KAAKsmD,OAAOn7C,QAE/BnL,KAAKsmD,OAAOp7C,QAAQvF,UAAU,WAC5B5B,EAAKovF,cAAcpvF,EAAKuiD,OAAOn7C,UArCrC,MAyCUk7C,GAAV1lD,UAAAwyF,cAAA,SAAwBC,GACpBpzF,KAAKqzF,gBACS,IAAVD,GAAyB,IAAVA,EACjBpzF,KAAKszF,UAAU,OAAOF,EAA5B,SAA0C,GAC3BA,EAAQ,GACjBpzF,KAAKszF,UAAU,kBAAkB,IAI7BjtC,EAAV1lD,UAAA0yF,yBACIrzF,KAAKszF,UAAU,cAAc,GAC7BtzF,KAAKszF,UAAU,cAAc,GAC7BtzF,KAAKszF,UAAU,kBAAkB,IAG3BjtC,EAAV1lD,UAAA2yF,UAAA,SAAoB5uC,EAAmB6uC,GAC/BA,EACFvzF,KAAKkwB,SAAS7vB,cAAcqE,UAAUE,IAAI8/C,GAE1C1kD,KAAKkwB,SAAS7vB,cAAcqE,UAAUC,OAAO+/C,IA5DnD2B,iCAAA,sBAkEA7kD,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,IACVI,SAAUupF,GAAS3pF,IACnBQ,cAAempF,QArEjBnxC,iKCkBA,IAAAyxC,IAAA,WAKE,QAAFA,GACYC,EACDzuF,EACA+iB,GAFC/nB,KAAZyzF,UAAYA,EACDzzF,KAAXgF,QAAWA,EACAhF,KAAX+nB,OAAWA,EALX/nB,KAAAgb,MAAuB04E,GAAYC,OArBnC,MA8BEH,GAAF7yF,UAAAq0B,QAAE,WACEh1B,KAAKyzF,UAAUG,cAAc5zF,OA/BjCwzF,KjBoDaK,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IASjCriB,GAAA,WA4BE,QAAFA,GAAsBsiB,EACArwF,EACRF,EACAy6B,GAHZ,GAAFp6B,GAAA/D,IAAsBA,MAAtBi0F,QAAsBA,EACAj0F,KAAtB4D,QAAsBA,EArBtB5D,KAAAk0F,gBAA2B,EAG3Bl0F,KAAAm0F,eAA2B,GAAIvoE,KAG/B5rB,KAAAo0F,eAA2B,GAAIhkD,KAM/BpwC,KAAAq0F,gBAA0BC,EAAAA,kCAAoCC,SAAS,GA4IvEv0F,KAAAw0F,YAAwB,SAACpsF,GACrB,GAAMqsF,GAAmB1wF,EAAK2wF,sBAC1BnF,KAAKoF,MAAQ5wF,EAAK2wF,qBAAuBV,EAExCjwF,GAAKkwF,QAAQW,gBAAmBH,IACnC1wF,EAAKmwF,gBAAiB,EACtBnwF,EAAK8wF,aAAazsF,EAAMiyB,QAASjyB,EAAMmyB,QAASx2B,EAAKkwF,QAAQtsF,gBAKnE3H,KAAA80F,aAAyB,SAAC1sF,GACjBrE,EAAKkwF,QAAQW,iBAIhB7wF,EAAK2wF,qBAAuBnF,KAAKoF,MACjC5wF,EAAKmwF,gBAAiB,EAEtBnwF,EAAK8wF,aACDzsF,EAAM2sF,QAAQ,GAAG16D,QAASjyB,EAAM2sF,QAAQ,GAAGx6D,QAASx2B,EAAKkwF,QAAQtsF,gBAK3E3H,KAAAg1F,YAAwB,WACfjxF,EAAKmwF,iBAIVnwF,EAAKmwF,gBAAiB,EAGtBnwF,EAAKqwF,eAAe1tF,QAAQ,SAAA6pE,GAG1B,GAAMhoC,GAAYgoC,EAAOv1D,QAAU04E,GAAYuB,SAC7C1kB,EAAOxoD,OAAOngB,sBAAwB2oE,EAAOv1D,QAAU04E,GAAYwB,WAEhE3kB,EAAOxoD,OAAOoN,YAAcoT,GAC/BgoC,EAAOv7C,cAtKPmJ,EAASpzB,YACX/K,KAAKm1F,kBAAoBzxF,EAAWrD,cAGpCL,KAAKm0F,eAAetpE,IAAI,YAAa7qB,KAAKw0F,aAC1Cx0F,KAAKm0F,eAAetpE,IAAI,UAAW7qB,KAAKg1F,aACxCh1F,KAAKm0F,eAAetpE,IAAI,aAAc7qB,KAAKg1F,aAE3Ch1F,KAAKm0F,eAAetpE,IAAI,aAAc7qB,KAAK80F,cAC3C90F,KAAKm0F,eAAetpE,IAAI,WAAY7qB,KAAKg1F,cAjH/C,MA2HErjB,GAAFhxE,UAAAk0F,aAAE,SAAaz6D,EAAWE,EAAWvS,GAAnC,GAAFhkB,GAAA/D,SAAA,KAAA+nB,IAAqCA,KACjC,IAAMqtE,GAAgBp1F,KAAKq1F,eACLr1F,KAAKq1F,gBAAkBr1F,KAAKm1F,kBAAkB74D,wBAC9Dg5D,EAAVjtE,MAAgCwrE,GAAiC9rE,EAAOhgB,UAEhEggB,GAAOwtE,WACTn7D,EAAIg7D,EAAcr8E,KAAOq8E,EAAcn8E,MAAQ,EAC/CqhB,EAAI86D,EAAc7qE,IAAM6qE,EAAc70F,OAAS,EAGjD,IAAMi1F,GAASztE,EAAOytE,QAAUtK,EAAyB9wD,EAAGE,EAAG86D,GACzD56C,EAAUpgB,EAAIg7D,EAAcr8E,KAC5Bs7B,EAAU/Z,EAAI86D,EAAc7qE,IAC5BrG,EAAWoxE,EAAgBxB,eAAiB/rE,EAAOlgB,aAAe,GAElE0oE,EAAS5lE,SAASklC,cAAc,MACtC0gC,GAAO7rE,UAAUE,IAAI,sBAErB2rE,EAAOjwE,MAAMyY,KAAUyhC,EAAUg7C,EAArC,KACIjlB,EAAOjwE,MAAMiqB,IAAS8pB,EAAUmhD,EAApC,KACIjlB,EAAOjwE,MAAMC,OAAqB,EAATi1F,EAA7B,KACIjlB,EAAOjwE,MAAM2Y,MAAoB,EAATu8E,EAA5B,KAGIjlB,EAAOjwE,MAAM0C,gBAAkB+kB,EAAOizB,OAAS,KAC/Cu1B,EAAOjwE,MAAMm1F,mBAAwBvxE,EAAzC,KAEIlkB,KAAKm1F,kBAAkBplD,YAAYwgC,GAInCwa,EAA0Bxa,GAE1BA,EAAOjwE,MAAM2a,UAAY,UAGzB,IAAMy6E,GAAY,GAAIlC,IAAUxzF,KAAMuwE,EAAQxoD,EAiB9C,OAfA2tE,GAAU16E,MAAQ04E,GAAYwB,UAG9Bl1F,KAAKo0F,eAAexvF,IAAI8wF,GAIxB11F,KAAK21F,sBAAsB,WACzBD,EAAU16E,MAAQ04E,GAAYuB,QAEzBltE,EAAOoN,YAAepxB,EAAKmwF,gBAC9BwB,EAAU1gE,WAEX9Q,GAEIwxE,GAIT/jB,EAAFhxE,UAAAizF,cAAE,SAAc8B,GACZ,GAAME,GAAY51F,KAAKo0F,eAAe1nE,OAAOgpE,EAQ7C,IALK11F,KAAKo0F,eAAe14D,OACvB17B,KAAKq1F,eAAiB,MAInBO,EAAL,CAIA,GAAMC,GAAWH,EAAU1wF,QACrBswF,EAAVjtE,MAAgCwrE,GAAiC6B,EAAU3tE,OAAOhgB,UAE9E8tF,GAASv1F,MAAMm1F,mBAAwBH,EAAgBvB,aAA3D,KACI8B,EAASv1F,MAAMikB,QAAU,IACzBmxE,EAAU16E,MAAQ04E,GAAYoC,WAG9B91F,KAAK21F,sBAAsB,WACzBD,EAAU16E,MAAQ04E,GAAYC,OAC9BkC,EAAmB,WAAEzpC,YAAYypC,IAChCP,EAAgBvB,gBAIrBpiB,EAAFhxE,UAAAo1F,WAAE,WACE/1F,KAAKo0F,eAAe1tF,QAAQ,SAAA6pE,GAAU,MAAAA,GAAOv7C,aAI/C28C,EAAFhxE,UAAA4G,mBAAE,SAAmBvC,GAAnB,GAAFjB,GAAA/D,IACSgF,IAAWA,IAAYhF,KAAKg2F,kBAKjCh2F,KAAKiyE,uBAELjyE,KAAK4D,QAAQwB,kBAAkB,WAC7BrB,EAAKowF,eAAeztF,QAAQ,SAAC+tB,EAAIjzB,GAC7B,MAAAwD,GAAQsiC,iBAAiB9lC,EAAMizB,EAAI1wB,EAAKswF,mBAG9Cr0F,KAAKg2F,gBAAkBhxF,IAkDjB2sE,EAAVhxE,UAAAg1F,sBAAA,SAAgClhE,EAAcyT,OAA9C,KAAAA,IAA8CA,EAA9C,GACIloC,KAAK4D,QAAQwB,kBAAkB,WAAM,MAAAwwB,YAAWnB,EAAIyT,MAItDypC,EAAFhxE,UAAAsxE,qBAAE,WAAA,GAAFluE,GAAA/D,IACQA,MAAKg2F,iBACPh2F,KAAKm0F,eAAeztF,QAAQ,SAAC+tB,EAAIjzB,GAC/BuC,EAAoB,gBAAEikC,oBAAoBxmC,EAAMizB,EAAI1wB,EAAKswF,kBA5RjE1iB,KkBsDazoE,GACT,GAAIyP,GAAAA,eAAoC,2CA+E1C,QAAF0d,GAAsB/yB,EACRonE,EACAvsC,EAC+Cz2B,GAHvC1H,KAAtBsD,YAAsBA,EAlDtBtD,KAAAw1F,OAA6C,EAS7Cx1F,KAAA6H,YAAuD,EAkBvD7H,KAAAk/B,WAA+B,EAqB/Bl/B,KAAAg/B,gBAAoC,EAOhCh/B,KAAKi2F,eAAiBvuF,MACtB1H,KAAKk2F,gBAAkB,GAAIvkB,IAAe3xE,KAAM0qE,EAAQpnE,EAAa66B,GA5IzE,MA0GA75B,QAAAC,eAAM8xB,EAAN11B,UAAA,gBAAA,WAAmB,MAAOX,MAAKk/B,eAC7B,SAAaz6B,GACXzE,KAAKk/B,UAAYz6B,EACjBzE,KAAKm2F,gEAST7xF,OAAAC,eAAM8xB,EAAN11B,UAAA,eAAA,WAAkB,MAAOX,MAAKo2F,UAAYp2F,KAAKsD,YAAYjD,mBACzD,SAAY0a,GACV/a,KAAKo2F,SAAWr7E,EAChB/a,KAAKm2F,gEAsBP9/D,EAAF11B,UAAA8Z,SAAE,WACEza,KAAKg/B,gBAAiB,EACtBh/B,KAAKm2F,gCAGP9/D,EAAF11B,UAAAwF,YAAE,WACEnG,KAAKk2F,gBAAgBjkB,wBAIvB57C,EAAF11B,UAAAo1F,WAAE,WACE/1F,KAAKk2F,gBAAgBH,cAIvBzxF,OAAFC,eAAM8xB,EAAN11B,UAAA,oBAAE,WACE,OACE40F,SAAUv1F,KAAKu1F,SACfC,OAAQx1F,KAAKw1F,OACbx6C,MAAOh7C,KAAKg7C,MACZjzC,UAANsgB,MAAqBroB,KAAKi2F,eAAeluF,UAAc/H,KAAK+H,WACtDH,qBAAsB5H,KAAKi2F,eAAeruF,qBAC1CC,YAAa7H,KAAK6H,aAAe7H,KAAKi2F,eAAenuF,iBAAmB,qCAK5ExD,OAAFC,eAAM8xB,EAAN11B,UAAA,sBAAE,WACE,MAAOX,MAAKoB,YAAcpB,KAAKi2F,eAAe70F,0CAIxCi1B,EAAV11B,UAAAw1F,yCACSn2F,KAAKoB,UAAYpB,KAAKg/B,gBACzBh/B,KAAKk2F,gBAAgB3uF,mBAAmBvH,KAAK+a,UAmBjDsb,EAAF11B,UAAAu0B,OAAE,SAAOmhE,EAAkC/7D,EAAevS,GACtD,WADJ,KAAAuS,IAA2CA,EAA3C,GAC6B,gBAAd+7D,GACFr2F,KAAKk2F,gBAAgBrB,aAAawB,EAAW/7D,EAA1DjS,MAAiEroB,KAAK2H,aAAiBogB,IAE1E/nB,KAAKk2F,gBAAgBrB,aAAa,EAAG,EAAlDxsE,MAAyDroB,KAAK2H,aAAiB0uF,oBA/I/E70F,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,4BACVC,SAAU,YACVU,MACEC,MAAS,aACT+zF,+BAAgC,qDAnDpC90F,KAAE4L,EAAAA,aAIF5L,KAAEqF,EAAAA,SAPFrF,KAAQsH,EAAAA,WAiIRtH,SAAAuH,GAAAR,aAAA/G,KAAewH,EAAAA,WAAfxH,KAA2ByH,EAAAA,OAA3BvH,MAAkCwH,2BArElC8xC,QAAAx5C,KAAGsB,EAAAA,MAAHpB,MAAS,oBAGT60F,YAAA/0F,KAAGsB,EAAAA,MAAHpB,MAAS,wBAMT6zF,WAAA/zF,KAAGsB,EAAAA,MAAHpB,MAAS,uBAOT8zF,SAAAh0F,KAAGsB,EAAAA,MAAHpB,MAAS,qBASTmG,cAAArG,KAAGsB,EAAAA,MAAHpB,MAAS,0BAMTqG,YAAAvG,KAAGsB,EAAAA,MAAHpB,MAAS,wBAMTN,WAAAI,KAAGsB,EAAAA,MAAHpB,MAAS,uBAYTqZ,UAAAvZ,KAAGsB,EAAAA,MAAHpB,MAAS,uBArHT20B,iCCAA,sBAiBA70B,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,GAAiB+oB,EAAAA,gBAC3B3oB,SAAU0sB,GAAW9sB,IACrBQ,cAAessB,QApBjB5sB,gCCyCAzJ,KAAAgb,MAA2C,YAG3Chb,KAAAoB,UAA+B,EAA/B,sBAnBAI,KAACC,EAAAA,UAADC,OAAAK,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACET,SAAF,sBACEG,QAAF,g0BACED,SAAU,GACVS,MACFC,MAAA,sBACMi0F,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,oFAUAC,iCC5CA,sBAYAn1F,KAAC4H,EAAAA,SAAD1H,OACEiI,SAAUgtF,IACV5sF,cAAe4sF,QAdjB30C,KCaA40C,GAAA,yBAbA,MAAAA,MAcaC,GAAwBzvF,EAAcwvF,IAG/CE,GAA2B,kFA2B/B/yF,GAAAgzF,SAAqB,sBAAsBD,OAH3C,MAFiCzyF,GAAjCi9C,EAAAt9C,kBAjBAxC,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,cACVC,SAAU,mIACVE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,QAAF,YACEP,QAAF,ojBACEQ,MACFC,MAAA,eACMqK,KAAN,QACIoqF,gCAAJ,WACIvuF,uBAAJ,sBACI23C,yBAAJ,0DAOAkB,O5CRIs2B,GAAmB,EAGvBgL,GAAA,WACE,QAAFA,GAEW5vD,EAEAkoB,sBAFAl7C,KAAXgzB,OAAWA,EAEAhzB,KAAXk7C,YAAWA,EAzCX,MAAA0nC,MAyDa7hC,GACT,GAAIpoC,GAAAA,eAAyC,6CA6D/C,QAAF0oC,GACYnxB,EACArsB,EACiDozF,EACpC9hD,GAHbn1C,KAAZkwB,SAAYA,EACAlwB,KAAZ6D,mBAAYA,EACiD7D,KAA7Di3F,QAA6DA,EACpCj3F,KAAzBm1C,MAAyBA,EApCzBn1C,KAAA++B,WAAsB,EACtB/+B,KAAAk3F,SAAoB,EACpBl3F,KAAAk/B,WAAsB,EACtBl/B,KAAAo4C,IAAgB,cAAcw/B,KAC9B53E,KAAAm3F,qBAAiC,GAuBjCn3F,KAAAu3C,kBAAyC,GAAI/6B,GAAAA,aAG7Cxc,KAAA6rB,cAA2B,GAAI1nB,GAAAA,QAH/B,MApBEG,QAAFC,eAAM88C,EAAN1gD,UAAA,gBAAE,WAAiB,MAAOX,MAAKi3F,SAAWj3F,KAAKi3F,QAAQ3+C,0CAGrDh0C,OAAFC,eAAM88C,EAAN1gD,UAAA,UAAE,WAAmB,MAAOX,MAAKo4C,qCAG/B9zC,OAAFC,eAAM88C,EAAN1gD,UAAA,gBAAE,WAA0B,MAAOX,MAAK++B,2CAOxCz6B,OAAAC,eAAM88C,EAAN1gD,UAAA,gBAAA,WAAmB,MAAQX,MAAKm1C,OAASn1C,KAAKm1C,MAAM/zC,UAAapB,KAAKk/B,eACpE,SAAaz6B,GAAczE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,oCAGlEH,OAAFC,eAAM88C,EAAN1gD,UAAA,qBAAE,WAAsB,MAAOX,MAAKi3F,SAAWj3F,KAAKi3F,QAAQrwF,+CAoB1DtC,OAAFC,eAAM88C,EAAN1gD,UAAA,cAAE,WACE,MAAOX,MAAKk3F,yCAOd5yF,OAAFC,eAAM88C,EAAN1gD,UAAA,iBAAE,WAEE,OAAQX,KAAKywB,kBAAkB7kB,aAAe,IAAIC,wCAIpDw1C,EAAF1gD,UAAAk7C,OAAE,WACE77C,KAAK++B,WAAY,EACjB/+B,KAAK6D,mBAAmBqB,eACxBlF,KAAKo3F,6BAIP/1C,EAAF1gD,UAAAo7C,SAAE,WACE/7C,KAAK++B,WAAY,EACjB/+B,KAAK6D,mBAAmBqB,eACxBlF,KAAKo3F,6BAIP/1C,EAAF1gD,UAAA2c,MAAE,WACE,GAAMtY,GAAUhF,KAAKywB,iBAEQ,mBAAlBzrB,GAAQsY,OACjBtY,EAAQsY,SASZ+jC,EAAF1gD,UAAA02F,gBAAE,WACOr3F,KAAKk3F,UACRl3F,KAAKk3F,SAAU,EACfl3F,KAAK6D,mBAAmBqB,iBAS5Bm8C,EAAF1gD,UAAA22F,kBAAE,WACMt3F,KAAKk3F,UACPl3F,KAAKk3F,SAAU,EACfl3F,KAAK6D,mBAAmBqB,iBAK5Bm8C,EAAF1gD,UAAA6iD,SAAE,WACE,MAAOxjD,MAAKu5C,WAId8H,EAAF1gD,UAAAme,eAAE,SAAe1W,GACTA,EAAM2W,UAAYS,EAAAA,OAASpX,EAAM2W,UAAYU,EAAAA,QAC/Czf,KAAKs6C,wBAGLlyC,EAAMC,mBAQVg5C,EAAF1gD,UAAA25C,sBAAE,WACOt6C,KAAKoB,WACRpB,KAAK++B,WAAY/+B,KAAKs4C,WAAYt4C,KAAK++B,UACvC/+B,KAAK6D,mBAAmBqB,eACxBlF,KAAKo3F,2BAA0B,KAKnC/1C,EAAF1gD,UAAAY,aAAE,WACE,MAAOvB,MAAKoB,SAAW,KAAO,KAIhCigD,EAAF1gD,UAAA8vB,gBAAE,WACE,MAAOzwB,MAAKkwB,SAAS7vB,eAGvBghD,EAAF1gD,UAAA42F,mBAAE,WAME,GAAIv3F,KAAK++B,UAAW,CAClB,GAAMwa,GAAYv5C,KAAKu5C,SAEnBA,KAAcv5C,KAAKm3F,uBACrBn3F,KAAKm3F,qBAAuB59C,EAC5Bv5C,KAAK6rB,cAAczlB,UAKzBi7C,EAAF1gD,UAAAwF,YAAE,WACEnG,KAAK6rB,cAAcxlB,YAIbg7C,EAAV1gD,UAAAy2F,0BAAA,SAAoCl8C;sDAApC,KAAAA,IAAoCA,GAApC,GACIl7C,KAAKu3C,kBAAkBx2C,KAAK,GAAI6hF,IAAyB5iF,KAAMk7C,oBA3LnE15C,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACVU,MACFsK,KAAA,SACMszC,kBAAN,iBACI2iC,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtBhtD,OAAJ,KACI8wB,uBAAJ,sBACIp+C,uBAAJ,sBACIu6E,8BAAJ,WACIn6E,UAAJ,0BACI4zB,YAAJ,yBACIl6B,MAAS,cAEbT,QAAA,m0CACAD,SAAA,qWACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAnEAZ,SAAEuH,GAAFR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAq/C,QAFAv/C,KAAE8/C,GAAF/4C,aAAA/G,KAAAwH,EAAAA,cAcAq4C,EAAA3+C,iEA4EA60C,oBAAA/1C,KAAA0B,EAAAA,UAWAm+C,iCClHA,sBAgBA7/C,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUI,GAAiBH,EAAAA,aAAc04C,IACzCr4C,SAAU03C,GAAWC,IACrBv3C,cAAes3C,GAAWC,QAnB5B3b,KCWas9C,GACX,GAAItqE,GAAAA,eAA6B,4BCD/B+Z,GAAe,6BAanB1yB,KAAAqsB,GAAwB,aAAaqG,KAxBrC,sBAeAlxB,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,YACVW,MACEC,MAAS,YACTqK,KAAQ,QACRg0B,YAAa,4BAIjBvU,KAAA7qB,KAAGsB,EAAAA,SAxBHogF,KCiBaC,IAIXC,mBAAoBroE,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAAS1a,EAAAA,OAAQikB,QAAS,EAAGtJ,UAAW,oBAC9CC,EAAAA,WAAW,iBACT5a,EAAAA,OAAQikB,QAAS,EAAGtJ,UAAW,sBAC/BE,EAAAA,QAAQ,+CCbd2lC,GAAA,yBAbA,MAAAA,MCWIpuB,GAAe,6BAgBnB1yB,KAAAi5E,MAAoC,QAGpCj5E,KAAAqsB,GAAwB,YAAYqG,KA9BpC,sBAeAlxB,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,WACVW,MACEC,MAAS,WACT8gF,oBAAqB,iBACrBziD,YAAa,KAEbsC,eAAgB,8BAKpB+1C,QAAAz3E,KAAGsB,EAAAA,QAGHupB,KAAA7qB,KAAGsB,EAAAA,SA9BHwgF,iCCAA,sBAYA9hF,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,gBAbZ4hF,iCCAA,sBAYA/hF,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,sBAbZ6hF,iCCAA,sBAYAhiF,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,kBAbZ8hF,iCCAA,sBAYAjiF,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,kBAbZ+hF,KCqDIhxD,GAAe,EAOnBixD,GAAA,WACE,QAAFA,GAAqBrgF,GAAAtD,KAArBsD,YAAqBA,EA7DrB,MAAAqgF,MAiEaC,GAAyBpgF,EAAWmgF,GAAkB,WAUtDE,GACT,GAAIlrE,GAAAA,eAA2C,iDA4IjD,QAAFuoC,GACa59C,EACCO,EACsCigF,EAC1BngF,EACwCmjC,EAGpDp8B,GARZ,GAAF3G,GASIC,EATJC,KAAAjE,KASUsD,IATVtD,WACa+D,GAAbT,YAAaA,EACCS,EAAdF,mBAAcA,EAEYE,EAA1BJ,KAA0BA,EACwCI,EAAlE+iC,gBAAkEA,EAGpD/iC,EAAd2G,UAAcA,EA5Ed3G,EAAAggF,oBAA+B,EAW/BhgF,EAAAigF,yBAAqC,GASrCjgF,EAAAkgF,WAAuB,GAGvBlgF,EAAAmgF,aAAyB,YAAYxxD,KAsBrC3uB,EAAAogF,iBAAqB,EAErBpgF,EAAAqgF,iBAAqB,EAErBrgF,EAAAsgF,uBAA0B,EA8BtBtgF,EAAKugF,cAAgBR,MACrB//E,EAAK43E,WAAa53E,EAAKugF,cAAcC,OAAS,SArBlD,MAlFkClgF,GAAlC68C,EAAAl9C,GAMAM,OAAAC,eAAM28C,EAANvgD,UAAA,6BACI,MAAOX,MAAKwkF,aAAexkF,KAAK8mC,iBAAmB9mC,KAAK8mC,gBAAgB29C,YAAc,cAExF,SAAehgF,GACbzE,KAAKwkF,YAAc//E,mCAMvBH,OAAAC,eAAM28C,EAANvgD,UAAA,0BAAA,WAAsC,MAAOX,MAAK0kF,yBAChD,SAAuBjgF,GACrBzE,KAAK0kF,oBAAsB7/E,EAAAA,sBAAsBJ,oCAQnDH,OAAFC,eAAM28C,EAANvgD,UAAA,0BAAE,WACE,MAA2B,WAApBX,KAAK27E,aAA4B37E,KAAK+jF,oDAI/Cz/E,OAAFC,eAAM28C,EAANvgD,UAAA,sBAAE,WAAgC,MAA2B,UAApBX,KAAK27E,4CAO9Cr3E,OAAAC,eAAM28C,EAANvgD,UAAA,iBAAA,WAA4B,MAAOX,MAAKikF,gBACtC,SAAcx/E,GACZzE,KAAKikF,WAAax/E,EAClBzE,KAAK2kF,iDAgBTrgF,OAAAC,eAAM28C,EAANvgD,UAAA,6BACI,MAA2B,WAApBX,KAAKykF,YAAgD,UAArBzkF,KAAKy7E,YAA0B,OAASz7E,KAAKy7E,iBAEtF,SAAeh3E,GACTA,IAAUzE,KAAKy7E,cACjBz7E,KAAKy7E,YAAch3E,GAASzE,KAAKskF,cAAcC,OAAS,OACxDvkF,KAAK6D,mBAAmBqB,iDA+C5Bg8C,EAAFvgD,UAAAytD,0BAAE,WACE,MAAOpuD,MAAK4kF,yBAA2B5kF,KAAKsD,aAG9C49C,EAAFvgD,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAK6kF,wBACD7kF,KAAKm9E,SAASjmC,aAChBl3C,KAAKsD,YAAYjD,cAAcqE,UAC1BE,IAAI,uBAAuB5E,KAAKm9E,SAASjmC,aAIhDl3C,KAAKm9E,SAASplC,aAAatyC,KAAKkW,EAAAA,UAAS,OAAShW,UAAU,WAC1D5B,EAAK+gF,wBACL/gF,EAAKghF,sBACLhhF,EAAKF,mBAAmBqB,gBAI1B,IAAM8/E,GAAehlF,KAAKm9E,SAASvnC,WAAa51C,KAAKm9E,SAASvnC,UAAUovC,cAAgBxpE,EAAAA,KACxFhW,GAAAA,MAAMw/E,EAAchlF,KAAKilF,gBAAgB/5E,QAASlL,KAAKklF,gBAAgBh6E,SAClEvF,UAAU,WAAM,MAAA5B,GAAKF,mBAAmBqB,iBAG7ClF,KAAKmlF,cAAcj6E,QAAQzF,KAAKkW,EAAAA,UAAU,OAAOhW,UAAU,WACzD5B,EAAK4gF,gBACL5gF,EAAKF,mBAAmBqB,iBAI1BlF,KAAKolF,eAAel6E,QAAQzF,KAAKkW,EAAAA,UAAU,OAAOhW,UAAU,WAC1D5B,EAAKghF,sBACLhhF,EAAKF,mBAAmBqB,kBAI5Bg8C,EAAFvgD,UAAAkF,sBAAE,WAAA,GAAF9B,GAAA/D,IACIA,MAAK6kF,wBACA7kF,KAAKqkF,uBACRlsE,QAAQC,UAAUC,KAAK,WAAM,MAAAtU,GAAKshF,sBAItCnkC,EAAFvgD,UAAAkK,gBAAE,WAEE7K,KAAKgkF,yBAA2B,QAChChkF,KAAK6D,mBAAmB0iB,iBAI1B26B,EAAFvgD,UAAA2kF,eAAE,SAAeC,GACb,GAAI3vC,GAAY51C,KAAKm9E,SAAWn9E,KAAKm9E,SAASvnC,UAAY,IAC1D,OAAOA,IAAa,EAAmB2vC,IAGzCrkC,EAAFvgD,UAAA6kF,gBAAE,WACE,SAAUxlF,KAAKm9E,UAAYn9E,KAAKm9E,SAASh/B,aAAen+C,KAAKylF,oBAG/DvkC,EAAFvgD,UAAA+kF,UAAE,WACE,QAAS1lF,KAAK2lF,aAGhBzkC,EAAFvgD,UAAAilF,kBAAE,WACE,MAAO5lF,MAAK6lF,iBAAmB7lF,KAAKm9E,SAAS2I,kBAAoB9lF,KAAK+lF,qBAGxE7kC,EAAFvgD,UAAAqlF,wBAAE,WAEE,MAA2B,WAApBhmF,KAAKykF,aAA4BzkF,KAAK0lF,aACzC1lF,KAAK0lF,cAAgB1lF,KAAK4lF,qBAGhC1kC,EAAFvgD,UAAAslF,kBAAE,WAEE,MAAOjmF,MAAK0lF,aAAmC,WAApB1lF,KAAKykF,YAA2BzkF,KAAKwlF,mBAIlEtkC,EAAFvgD,UAAAulF,sBAAE,WACE,MAAQlmF,MAAKolF,gBAAkBplF,KAAKolF,eAAej6E,OAAS,GACxDnL,KAAKm9E,SAASgJ,WAAc,QAAU,QAI5CjlC,EAAFvgD,UAAAi7E,qBAAE,WAAA,GAAF73E,GAAA/D,IACQA,MAAKimF,qBAAuBjmF,KAAK6lF,iBACnC7lF,KAAK+jF,oBAAqB,EAC1B/jF,KAAK27E,WAAa,SAElByK,EAAAA,UAAUpmF,KAAKqmF,OAAOhmF,cAAe,iBAAiBoF,KAAK0J,EAAAA,KAAK,IAAIxJ,UAAU,WAC5E5B,EAAKggF,oBAAqB,IAG5B/jF,KAAK6D,mBAAmBqB,iBAQpBg8C,EAAVvgD,UAAAmkF,iCACI,GAAI9kF,KAAKm9E,SAASh/B,aAAen+C,KAAKylF,kBACpC,KAAMa,MAKFplC,EAAVvgD,UAAAgkF,yBACI3kF,KAAKumF,iBACLvmF,KAAK+kF,uBAOC7jC,EAAVvgD,UAAA4lF,oCACI,IAAIvmF,KAAKmlF,cAAe,CACtB,GAAIqB,GACAC,CACJzmF,MAAKmlF,cAAcz+E,QAAQ,SAACggF,GAC1B,GAAmB,UAAfA,EAAKzN,MAAmB,CAC1B,GAAIuN,GAAaziF,EAAK4iF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAKzN,MAAiB,CAC/B,GAAIwN,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUVxlC,EAAVvgD,UAAAokF,+BACI,GAAI/kF,KAAKm9E,SAAU,CACjB,GAAIp9B,KAEJ,IAAqC,SAAjC//C,KAAKkmF,wBAAoC,CAC3C,GAAIW,GAAY7mF,KAAKmlF,cACjBnlF,KAAKmlF,cAAcn/E,KAAK,SAAA0gF,GAAQ,MAAe,UAAfA,EAAKzN,QAAqB,KAC1D6N,EAAU9mF,KAAKmlF,cACfnlF,KAAKmlF,cAAcn/E,KAAK,SAAA0gF,GAAQ,MAAe,QAAfA,EAAKzN,QAAmB,IAExD4N,GACF9mC,EAAI7wC,KAAK23E,EAAUx6D,IACVrsB,KAAKikF,YACdlkC,EAAI7wC,KAAKlP,KAAKkkF,cAGZ4C,GACF/mC,EAAI7wC,KAAK43E,EAAQz6D,QAEVrsB,MAAKolF,iBACdrlC,EAAM//C,KAAKolF,eAAer0E,IAAI,SAAA2qC,GAAS,MAAAA,GAAMrvB,KAG/CrsB,MAAKm9E,SAASr9B,kBAAkBC,KAK1BmB,EAAZvgD,UAAAkkF,sBAAE,WACE,IAAK7kF,KAAKm9E,SACR,KAAM4J,MAQV7lC,EAAFvgD,UAAA0kF,iBAAE,WACE,GAAwB,YAApBrlF,KAAKykF,YAA4BzkF,KAAKqmF,QAAUrmF,KAAKqmF,OAAOhmF,cAAc+O,SAASjE,OAAQ,CAC7F,GAAInL,KAAK0K,YAAc1K,KAAK0K,UAAUK,UAGpC,YADA/K,KAAKqkF,uBAAwB,EAG/B,KAAK15E,SAASa,SAASxL,KAAKsD,YAAYjD,eACtC,MAQF,KAAoB,GALd2mF,GAAiBhnF,KAAKinF,aACxBjnF,KAAK4kF,wBAAwBvkF,cAAci8B,yBACzC4qD,EAAalnF,KAAKinF,aACpBjnF,KAAKqmF,OAAOhmF,cAAc+O,SAAS,GAAGktB,yBACtC6qD,EAAa,EACvBjgC,EAAA,EAA0B3vC,EAAAvX,KAAKqmF,OAAOhmF,cAAc+O,SAA1B83C,EAA1B3vC,EAAApM,OAA0B+7C,IAA1B,CACQigC,GADR5vE,EAAA2vC,GAC4BhuC,YAEtBlZ,KAAKokF,iBAAmB8C,EAAaF,EA3XjB,EA4XpBhnF,KAAKmkF,iBA7XgB,IA6XGgD,EAAkCC,OAE1DpnF,MAAKokF,iBAAmB,EACxBpkF,KAAKmkF,iBAAmB,CAE1BnkF,MAAKqkF,uBAAwB,EAC7BrkF,KAAK6D,mBAAmBqB,gBAIlBg8C,EAAVvgD,UAAAsmF,aAAA,SAAuBI,GACnB,MAAOrnF,MAAK2D,MAA4B,QAApB3D,KAAK2D,KAAKc,MAAkB4iF,EAAKh9D,MAAQg9D,EAAKtuE,qBA9WtEvX,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,eACVC,SAAU,41XAMVS,MACEC,MAAJ,iBACI+kF,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,0CAAN,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACIv3B,qBAAJ,oBACIC,mBAAJ,kBACIu3B,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,6BAEAlmF,QAAA,SACAN,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA8+C,EAAAtvC,eAAA,WAAA,QACApQ,KAAA4L,EAAAA,aACA5L,KAAAsF,EAAAA,oBACAtF,SAAAuH,GAAAR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAuhF,QACAzhF,KAAAqQ,EAAAA,eAAAtJ,aAAA/G,KAAmCwH,EAAAA,aACnCxH,SAAAuH,GAAAR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAmiF,QACAriF,KAAAsH,EAAAA,0DAxGA0/E,qBAAAhnF,KAAAsB,EAAAA,QAJA6jF,YAAAnlF,KAAAsB,EAAAA,QA4MA64E,aAAAn6E,KAAAsB,EAAAA,QAnNA2lF,eAAAjnF,KAAAoB,EAAAA,UAAAlB,MAAA,eAqNAkjF,0BAAApjF,KAAAoB,EAAAA,UAAAlB,MAAA,yBA3KAgnF,qBAAAlnF,KAAAoB,EAAAA,UAAAlB,MAAA,0GAgFA+jF,oBAAAjkF,KAAA0wB,EAAAA,aAAAxwB,MAAA8hF,MAUAmC,cAAAnkF,KAAA0wB,EAAAA,aAAAxwB,MAAA6hF,MAsBA6B,iBAAA5jF,KAAQqM,EAAAA,gBAARnM,MAAAwhF,MAmBAiC,gBAAA3jF,KAAAqM,EAAAA,gBAAAnM,MAAA4hF,MAsBA2B,kBAAAzjF,KAAAqM,EAAAA,gBAAAnM,MAAA+hF,MAEAyB,kBAAA1jF,KAAAqM,EAAAA,gBAAYnM,MAAZgiF,OAEAxiC,GACA0iC,gCChNA,sBAmBApiF,KAAC4H,EAAAA,SAAD1H,OACEqI,cACEm5E,GACAhiC,GACAoiC,GACAC,GACAC,GACAC,GACAC,IAEFr6E,SAAUC,EAAAA,cACVK,SACEu5E,GACAhiC,GACAoiC,GACAC,GACAC,GACAC,GACAC,QArCJl+C,KCuCImjD,GAA+B,EAGnCC,GAAA,WACE,QAAFA,GAEW51D,EAEAskB,GAFAt3C,KAAXgzB,OAAWA,EAEAhzB,KAAXs3C,OAAWA,EA/CX,MAAAsxC,MAoDAC,GAAA,yBApDA,MAAAA,MAqDaC,GAA4B3hF,EAAmB0hF,IAS/CE,GACT,GAAIpwE,GAAAA,eAA8C,oCAChDC,WAAY,OACZC,QAAS,WAAM,OAAEilE,uBAAuB,qBAsF5C,QAAFO,GACYx6E,EACAP,EACkC0lF,GAH5C,GAAFjlF,GAIIC,EAJJC,KAAAjE,OAAAA,WACY+D,GAAZF,mBAAYA,EACAE,EAAZT,YAAYA,EA7DZS,EAAAklF,WAAuB,EAIvBllF,EAAA45E,SAAqB,EAerB55E,EAAA40B,YAA0D,KAgB1D50B,EAAAmlF,eAAM,GAAI1sE,GAAAA,aAGVzY,EAAAg+B,OAAkD,GAAIvlB,GAAAA,aAGtDzY,EAAAqf,OAAkD,GAAI5G,GAAAA,aAatDzY,EAAAogD,cAGApgD,EAAAsoB,GAAe,oBAAoBs8D,KAQ/B5kF,EAAKolF,yBAA2BH,EAASlL,wBAlB7C,MAtDqCz5E,GAArCg6E,EAAAr6E,GAUEM,OAAFC,eAAM85E,EAAN19E,UAAA,cAAE,WAAwB,MAAOX,MAAK29E,SAAW39E,KAAKipF,2CAuBtD3kF,OAAAC,eAAM85E,EAAN19E,UAAA,6BAAA,WAAyC,MAAOX,MAAKmpF,4BACnD,SAA0B1kF,GACxBzE,KAAKmpF,uBAAyBtkF,EAAAA,sBAAsBJ,oCAoBxDH,OAAAC,eAAM85E,EAAN19E,UAAA,iBAAA,SAAgB8D,aACRA,IAASA,EAAM0G,SACjB1G,EAAMg0B,MAAM,KAAK/xB,QAAQ,SAAAg+C,GAAa,MAAA3gD,GAAKogD,WAAWO,EAAU74C,SAAU,IAC1E7L,KAAKsD,YAAYjD,cAAcqkD,UAAY,qCAiB/C25B,EAAF19E,UAAAwE,mBAAE,WACEnF,KAAK64C,YAAc,GAAImD,GAAAA,2BAAsCh8C,KAAKq3C,SAASuN,WAE3E5kD,KAAK28E,kBAOP0B,EAAF19E,UAAAw7E,cAAE,SAAcrhC,GACR96C,KAAK66C,QACP76C,KAAK66C,MAAMx6C,cAAcy6C,UAAYA,IAKzCujC,EAAF19E,UAAAu7E,cAAE,WACE,MAAOl8E,MAAK66C,MAAQ76C,KAAK66C,MAAMx6C,cAAcy6C,UAAY,GAI3DujC,EAAF19E,UAAAg8E,eAAE,WACE38E,KAAKipF,YAAcjpF,KAAKq3C,QAAQlsC,OAChCnL,KAAKmkD,WAAW,4BAA8BnkD,KAAKipF,UACnDjpF,KAAKmkD,WAAW,4BAA8BnkD,KAAKipF,UACnDjpF,KAAK6D,mBAAmBqB,gBAI1Bm5E,EAAF19E,UAAA08E,iBAAE,SAAiB/lC,GACf,GAAMlvC,GAAQ,GAAIwgF,IAA6B5oF,KAAMs3C,EACrDt3C,MAAKkpF,eAAenoF,KAAKqH,mBA3H7B5G,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEE,SAAU,wJACVC,QAAF,6dACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACER,SAAF,kBACES,QAAF,iBACEC,MACFC,MAAA,oBAEA0K,YACAC,QAAA6zC,GAAA5zC,YAAAkxE,2FA/DA78E,SAAEuH,GAAFR,aAAA/G,KAAAyH,EAAAA,OAAAvH,MAAAqnF,SAyIA1K,EAAA37E,6GAvDA20C,UAAA71C,KAAAqM,EAAAA,gBAAAnM,MAAA2/C,IAAAvhB,aAAA,MAGAkd,eAAAx7C,KAAAqM,EAAAA,gBAAAnM,MAAA4/C,MAGA3oB,cAAAn3B,KAAAsB,EAAAA,QAGAg7E,wBAAAt8E,KAAAsB,EAAAA,QAGAomF,iBAAA1nF,KAAA0B,EAAAA,SAMA6+B,SAAAvgC,KAAA0B,EAAAA,SASAkgB,SAAA5hB,KAAA0B,EAAAA,SAIAwB,YAAAlD,KAAAsB,EAAAA,MAAApB,MAAA,YASA28E,O9I9EaF,GACT,GAAIxlE,GAAAA,eAAqC,oCACvCC,WAAY,OACZC,QAAS,WACP,GAAMotB,GAAUC,EAAAA,OAAOlb,EAAAA,QACvB,OAAO,YAAM,MAAAib,GAAQE,iBAAiBC,iBAQjC83C,IACXhxE,QAAS0lB,EAAAA,kBACTzlB,YAAakP,EAAAA,WAAW,WAAM,MAAAk/D,MAC9BzoD,OAAO,iBA+DP,QAAFyoD,GAAsBrrD,EAA8B9I,EAC9BrN,EACAuiE,EACAz4E,EAC0CgjC,EAC9BljC,EACQ0qD,EACUzjD,EAE9B9G,GATpB,GAAFC,GAAA/D,IAAsBA,MAAtBkwB,SAAsBA,EAA8BlwB,KAApDonB,SAAoDA,EAC9BpnB,KAAtB+Z,kBAAsBA,EACA/Z,KAAtBs8E,MAAsBA,EACAt8E,KAAtB6D,mBAAsBA,EAC0C7D,KAAhE6mC,gBAAgEA,EAC9B7mC,KAAlC2D,KAAkCA,EACQ3D,KAA1CquD,WAA0CA,EACUruD,KAApD4K,UAAoDA,EAE9B5K,KAAtB8D,eAAsBA,EAtCtB9D,KAAAopF,qBAAgC,EAShCppF,KAAA67E,wBAAmC,EAMnC77E,KAAAw9E,sBAAkCjiE,EAAAA,aAAaC,MAG/Cxb,KAAAqpF,qBAA0C,GAAIllF,GAAAA,QAG9CnE,KAAA02C,UAAoC,aAGpC12C,KAAA22C,WAAe,aA2Bf32C,KAAA49E,kBAAsC,EAwDtC59E,KAAAspF,iBAAoElyC,EAAAA,MAAM,WACtE,MAAIrzC,GAAKi4E,cAAgBj4E,EAAKi4E,aAAa3kC,QACnC7xC,EAAAA,MAAZsL,UAAA,GAAqB/M,EAAKi4E,aAAa3kC,QAAQtmC,IAAI,SAAAumC,GAAU,MAAAA,GAAOC,qBAKzDxzC,EAAKu4E,MAAM9kC,SACb/zB,eACAhe,KAAK0J,EAAAA,KAAK,GAAIsoC,EAAAA,UAAU,WAAM,MAAA1zC,GAAKulF,sBAnO5C,MAuJE/N,GAAF56E,UAAAwF,YAAE,WACEnG,KAAKw9E,sBAAsBrmE,cAC3BnX,KAAKopF,qBAAsB,EAC3BppF,KAAK88E,gBACL98E,KAAKqpF,qBAAqBhjF,YAI5B/B,OAAFC,eAAMg3E,EAAN56E,UAAA,iBAAE,WACE,MAAOX,MAAK49E,kBAAoB59E,KAAKg8E,aAAaiN,2CAKpD1N,EAAF56E,UAAA26E,UAAE,WACEt7E,KAAKw7E,iBACLx7E,KAAKy7E,eAIPF,EAAF56E,UAAAo8E,WAAE,WACE/8E,KAAK87E,cAEA97E,KAAK49E,mBAIN59E,KAAK04C,WAEP14C,KAAKg8E,aAAa54D,OAAOriB,OAG3Bf,KAAKg8E,aAAa2B,QAAU39E,KAAK49E,kBAAmB,EAEhD59E,KAAKijB,aAAejjB,KAAKijB,YAAYlH,gBACvC/b,KAAKijB,YAAY9G,SACjBnc,KAAKy9E,4BAA4BtmE,eAK9BnX,KAAKopF,qBAKRppF,KAAK6D,mBAAmB0iB,kBAQ5BjiB,OAAFC,eAAMg3E,EAAN56E,UAAA,2BAAE,WAAA,GAAFoD,GAAA/D,IACI,OAAOwF,GAAAA,MACLxF,KAAKspF,iBACLtpF,KAAKg8E,aAAanjC,YAAYsD,OAAO12C,KAAK6F,EAAAA,OAAO,WAAM,MAAAvH,GAAK65E,oBAC5D59E,KAAKqpF,qBACLrpF,KAAKupF,oBACLvpF,KAAKijB,YACDjjB,KAAKijB,YAAYuG,cAAc/jB,KAAK6F,EAAAA,OAAO,WAAM,MAAAvH,GAAK65E,oBACtDr4E,EAAAA,uCAkBRjB,OAAFC,eAAMg3E,EAAN56E,UAAA,oBAAE,WACE,MAAIX,MAAKg8E,cAAgBh8E,KAAKg8E,aAAanjC,YAClC74C,KAAKg8E,aAAanjC,YAAYqB,WAGhC,sCAIX51C,OAAAC,eAAcg3E,EAAd56E,UAAA,gDACI,OAAKX,MAAK4K,UAIHpF,EAAAA,MACL4gF,EAAAA,UAAUpmF,KAAK4K,UAAW,SAC1Bw7E,EAAAA,UAAUpmF,KAAK4K,UAAW,aAE3BnF,KAAK6F,EAAAA,OAAO,SAAClD,GACZ,GAAMohF,GAAcphF,EAA2B,OACzCqhF,EAAY1lF,EAAKsqD,WACnBtqD,EAAKsqD,WAAW/qD,YAAYjD,cAAgB,IAEhD,OAAO0D,GAAK65E,kBACJ4L,IAAgBzlF,EAAKmsB,SAAS7vB,iBAC5BopF,IAAcA,EAAUj+E,SAASg+E,OAChCzlF,EAAKkf,cAAgBlf,EAAKkf,YAAYyG,eAAele,SAASg+E,MAflEjkF,EAAAA,GAAa,uCAoBxBg2E,EAAF56E,UAAA4zB,WAAE,SAAW9vB,GAAX,GAAFV,GAAA/D,IACImY,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAtU,GAAKi5E,iBAAiBv4E,MAIzD82E,EAAF56E,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAK02C,UAAYjiB,GAInB8mD,EAAF56E,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAK22C,WAAaliB,GAIpB8mD,EAAF56E,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKkwB,SAAS7vB,cAAce,SAAWwzB,GAGzC2mD,EAAF56E,UAAAme,eAAE,SAAe1W,GACb,GAAM2W,GAAU3W,EAAM2W,OAYtB,IANIA,IAAYypB,EAAAA,QACdpgC,EAAMC,iBAKJrI,KAAK04C,YAAc35B,IAAYypB,EAAAA,QAAWzpB,IAAYqc,EAAAA,UAAYhzB,EAAMyxC,QAC1E75C,KAAK08E,mBACL18E,KAAKqpF,qBAAqBjjF,OAC1BgC,EAAM+rB,sBACD,IAAIn0B,KAAK0pF,cAAgB3qE,IAAYS,EAAAA,OAASxf,KAAK04C,UACxD14C,KAAK0pF,aAAapvC,wBAClBt6C,KAAK08E,mBACLt0E,EAAMC,qBACD,CACL,GAAMshF,GAAiB3pF,KAAKg8E,aAAanjC,YAAYqB,WAC/CN,EAAa76B,IAAYqc,EAAAA,UAAYrc,IAAYsc,EAAAA,UAEnDr7B,MAAK04C,WAAa35B,IAAY6qE,EAAAA,IAChC5pF,KAAKg8E,aAAanjC,YAAYiB,UAAU1xC,GAC/BwxC,GAAc55C,KAAKo7E,YAC5Bp7E,KAAKs7E,aAGH1hC,GAAc55C,KAAKg8E,aAAanjC,YAAYqB,aAAeyvC,IAC7D3pF,KAAK+7E,oBAKXR,EAAF56E,UAAAkpF,aAAE,SAAazhF,GACX,GAAI27D,GAAS37D,EAAgC,OACzC3D,EAAgCs/D,EAAOt/D,KAGvB,YAAhBs/D,EAAOviE,OACTiD,EAAiB,IAATA,EAAc,KAAOy0D,WAAWz0D;iDAQtCzE,KAAKo7E,YAAcp7E,KAAKq7E,iBAAmB52E,GAC7CkG,SAASk4D,gBAAkBz6D,EAAM27D,SACjC/jE,KAAKq7E,eAAiB52E,EACtBzE,KAAK02C,UAAUjyC,GACfzE,KAAKs7E,cAITC,EAAF56E,UAAA6kD,aAAE,WACMxlD,KAAKo7E,aACPp7E,KAAKq7E,eAAiBr7E,KAAKkwB,SAAS7vB,cAAcoE,MAClDzE,KAAKw7E,iBACLx7E,KAAKy7E,aAAY,KAUbF,EAAV56E,UAAA86E,YAAA,SAAsBC,OAAtB,KAAAA,IAAsBA,GAAtB,GACQ17E,KAAKquD,YAA6C,SAA/BruD,KAAKquD,WAAWstB,aACjCD,EACF17E,KAAKquD,WAAWutB,uBAEhB57E,KAAKquD,WAAWstB,WAAa,SAG/B37E,KAAK67E,wBAAyB,IAK1BN,EAAV56E,UAAAm7E,uBACQ97E,KAAK67E,yBACP77E,KAAKquD,WAAWstB,WAAa,OAC7B37E,KAAK67E,wBAAyB,IAa1BN,EAAV56E,UAAAo7E,2BACI,GAAMzsE,GAAQtP,KAAKg8E,aAAanjC,YAAYuB,iBAAmB,EACzD0C,EAAaC,EAA8BztC,EAC7CtP,KAAKg8E,aAAa3kC,QAASr3C,KAAKg8E,aAAah/B,cAE3Ci/B,EAAoBh/B,EACxB3tC,EAAQwtC,EA9U4B,GAgVpC98C,KAAKg8E,aAAaE,gBA7UiB,IAiVrCl8E,MAAKg8E,aAAaG,cAAcF,IAO1BV,EAAV56E,UAAAy7E,iDACUC,EAAcr8E,KAAKs8E,MAAM9kC,SAAS/zB,eAAehe,KAAK0J,EAAAA,KAAK,IAC3DotE,EAAgBv8E,KAAKg8E,aAAa3kC,QAAQnsC,QAAQzF,KACtD81D,EAAAA,IAAI,WAAM,MAAAx3D,GAAKy4E,kBAAkBC,wBAGjCv0C,EAAAA,MAAM,GAIR,OAAO1iC,GAAAA,MAAM62E,EAAaE,GACvB92E,KAGCgyC,EAAAA,UAAU,WAGR,MAFA1zC,GAAK24E,mBACL34E,EAAKi4E,aAAaW,iBACX54E,EAAK64E,sBAGdztE,EAAAA,KAAK,IAGNxJ,UAAU,SAAAyC,GAAS,MAAArE,GAAK84E,kBAAkBz0E,MAIvCmzE,EAAV56E,UAAAm8E,yBACQ98E,KAAKijB,cACPjjB,KAAK+8E,aACL/8E,KAAKijB,YAAYC,UACjBljB,KAAKijB,YAAc,OAIfs4D,EAAV56E,UAAAq8E,iBAAA,SAA2Bv4E,GACvB,GAAMw4E,GAAYj9E,KAAKg8E,cAAgBh8E,KAAKg8E,aAAarjD,YACvD34B,KAAKg8E,aAAarjD,YAAYl0B,GAC9BA,EAIIy4E,EAA0B,MAAbD,EAAoBA,EAAY,EAI/Cj9E,MAAKquD,WACPruD,KAAKquD,WAAW8uB,SAAS14E,MAAQy4E,EAEjCl9E,KAAKkwB,SAAS7vB,cAAcoE,MAAQy4E,GAShC3B,EAAV56E,UAAAk8E,kBAAA,SAA4Bz0E,GACpBA,GAASA,EAAM4qB,SACjBhzB,KAAKo9E,6BAA6Bh1E,EAAM4qB,QACxChzB,KAAKg9E,iBAAiB50E,EAAM4qB,OAAOvuB,OACnCzE,KAAK02C,UAAUtuC,EAAM4qB,OAAOvuB,OAC5BzE,KAAKkwB,SAAS7vB,cAAcid,QAC5Btd,KAAKg8E,aAAaqB,iBAAiBj1E,EAAM4qB,SAG3ChzB,KAAK+8E,cAMCxB,EAAV56E,UAAAy8E,6BAAA,SAAuCthC,GACnC97C,KAAKg8E,aAAa3kC,QAAQ3wC,QAAQ,SAAA4wC,GAC5BA,GAAUwE,GAAQxE,EAAO1mB,UAC3B0mB,EAAOyE,cAKLw/B,EAAV56E,UAAA66E,oCACI,KAAKx7E,KAAKg8E,aACR,KAAMsB,IAGHt9E,MAAKijB,YAaRjjB,KAAKijB,YAAYujD,YAAYvtD,MAAOjZ,KAAKu9E,mBAZzCv9E,KAAKooC,QAAU,GAAI1tB,GAAAA,eAAe1a,KAAKg8E,aAAan6E,SAAU7B,KAAK+Z,mBACnE/Z,KAAKijB,YAAcjjB,KAAKonB,SAASqD,OAAOzqB,KAAKszC,qBAEzCtzC,KAAK8D,iBACP9D,KAAKw9E,sBAAwBx9E,KAAK8D,eAAewB,SAASK,UAAU,WAC9D5B,EAAK20C,WAAa30C,EAAKkf,aACzBlf,EAAKkf,YAAYujD,YAAYvtD,MAAOlV,EAAKw5E,sBAS7Cv9E,KAAKijB,cAAgBjjB,KAAKijB,YAAYlH,gBACxC/b,KAAKijB,YAAYjH,OAAOhc,KAAKooC,SAC7BpoC,KAAKy9E,4BAA8Bz9E,KAAKo8E,6BAG1C,IAAMsB,GAAU19E,KAAK04C,SAErB14C,MAAKg8E,aAAaW,iBAClB38E,KAAKg8E,aAAa2B,QAAU39E,KAAK49E,kBAAmB,EAIhD59E,KAAK04C,WAAaglC,IAAY19E,KAAK04C,WACrC14C,KAAKg8E,aAAaj6C,OAAOhhC,QAIrBw6E,EAAV56E,UAAA2yC,6BACI,MAAO,IAAIvpB,GAAAA,eACTC,iBAAkBhqB,KAAK2oC,sBACvBgB,eAAgB3pC,KAAK6mC,kBACrB5tB,MAAOjZ,KAAKu9E,gBACZ7nE,UAAW1V,KAAK2D,KAAO3D,KAAK2D,KAAKc,MAAQ,SAIrC82E,EAAV56E,UAAAgoC,+BAUI,MATA3oC,MAAKw8E,kBAAoBx8E,KAAKonB,SAAShN,WACpCyuB,oBAAoB7oC,KAAK69E,wBACzB/0C,wBAAuB,GACvB66B,UAAS,GACT36B,gBACEe,QAAS,QAASC,QAAS,SAAUI,SAAU,QAASC,SAAU,QAClEN,QAAS,QAASC,QAAS,MAAOI,SAAU,QAASC,SAAU,YAG7DrqC,KAAKw8E,mBAGNjB,EAAV56E,UAAAk9E,gCACI,MAAO79E,MAAKquD,WAAaruD,KAAKquD,WAAWD,4BAA8BpuD,KAAKkwB,UAItEqrD,EAAV56E,UAAA48E,yBACI,MAAOv9E,MAAK69E,uBAAuBx9E,cAAci8B,wBAAwBrjB,OAOnEsiE,EAAV56E,UAAA+7E,4BACI18E,KAAKg8E,aAAanjC,YAAY4C,cAAcz7C,KAAKg8E,aAAa8B,sBAAwB,GAAK,IAIrFvC,EAAV56E,UAAAy6E,oBACI,GAAMp2E,GAA4BhF,KAAKkwB,SAAS7vB,aAChD,QAAQ2E,EAAQ+4E,WAAa/4E,EAAQ5D,yBA1dzCI,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,oDACVW,MACEsK,KAAQ,WACRovE,aAAgB,MAChBgC,oBAAqB,OACrBt9B,+BAAgC,mBAChC5zC,uBAAwB,uBACxByzC,mBAAoB,mBAGpB09B,YAAa,iBACbzhD,SAAU,eACVgzB,UAAW,uBACX/yB,YAAa,0BAEf76B,SAAU,yBACVqL,WAAYixE,4CAlFd18E,KAAE4L,EAAAA,aAbF5L,KAAEwpB,EAAAA,UAuBFxpB,KAAE6K,EAAAA,mBAHF7K,KAAEqF,EAAAA,SATFrF,KAAEsF,EAAAA,oBA0HFtF,SAAAuH,GAAAR,aAAA/G,KAAeyH,EAAAA,OAAfvH,MAAsBy8E,QAzItB38E,KAAQqQ,EAAAA,eAARtJ,aAAA/G,KA0IewH,EAAAA,aAtGfxH,KAAQ0/C,GAAR34C,aAAA/G,KAuGewH,EAAAA,WAvGfxH,KAuG2B48E,EAAAA,SAC3B58E,SAAAuH,GAAAR,aAAA/G,KAAewH,EAAAA,WAAfxH,KAA2ByH,EAAAA,OAA3BvH,MAAkCuK,EAAAA,cAnIlCzK,KAAEuF,EAAAA,mCA0HFi1E,eAAAx6E,KAAGsB,EAAAA,MAAHpB,MAAS,sBA1IT65E,iCwHAA,sBAiBA/5E,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUs8B,GAAiBta,EAAAA,cAAe9hB,GAAiBD,EAAAA,cAC3DK,SAAU00E,GAAiB14C,GAAiB41C,GAAwBhyE,IACpEQ,cAAes0E,GAAiB9C,QApBlC+C,KCeI38D,GAAS,gBAkFX,QAAF48D,GAC4C3zE,EAC9BhH,EACAN,EACAsjC,GAH8B5mC,KAA5C4K,UAA4CA,EAC9B5K,KAAd4D,QAAcA,EACA5D,KAAdsD,YAAcA,EACAtD,KAAd4mC,eAAcA,EAxDd5mC,KAAAw+E,OAAiC,UAQjCx+E,KAAAy+E,UAA8B,EAM9Bz+E,KAAAoa,SAA0D,cAuB1Dpa,KAAA07B,KAA8C,SAW9C17B,KAAAo4C,IAAgBz2B,KA7FhB,MAwCArd,QAAAC,eAAMg6E,EAAN59E,UAAA,aAAA,WAA8B,MAAOX,MAAKw+E,YACxC,SAAU/5E,GACRzE,KAAKsjE,UAAU7+D,GACfzE,KAAKw+E,OAAS/5E,mCAMlBH,OAAAC,eAAMg6E,EAAN59E,UAAA,eAAA,WAA2B,MAAOX,MAAKy+E,cACrC,SAAYC,GACV1+E,KAAKy+E,SAAW55E,EAAAA,sBAAsB65E,oCAY1Cp6E,OAAAC,eAAMg6E,EAAN59E,UAAA,eAAA,WAA0B,MAAOX,MAAKic,cACpC,SAAYyiE,GACV1+E,KAAKic,SAAWyiE,EAChB1+E,KAAK2+E,sDAMTr6E,OAAAC,eAAMg6E,EAAN59E,UAAA,mBAAA,WAA8B,MAAOX,MAAK4+E,kBACxC,SAAgBC,GACVA,IAAmB7+E,KAAK4+E,eAC1B5+E,KAAK8+E,2BAA2BD,EAAgB7+E,KAAK4+E,cACrD5+E,KAAK4+E,aAAeC,oCAU1Bv6E,OAAAC,eAAMg6E,EAAN59E,UAAA,cAAA,WAA0B,MAAOX,MAAK++E,aACpC,SAAWL,GACT1+E,KAAK++E,QAAUl6E,EAAAA,sBAAsB65E,oCAgBvCH,EAAF59E,UAAAyhE,QAAE,WACE,OAA2C,IAApCpiE,KAAKoa,SAAS3D,QAAQ,UAI/B8nE,EAAF59E,UAAAq+E,QAAE,WACE,OAA4C,IAArCh/E,KAAKoa,SAAS3D,QAAQ,WAG/B8nE,EAAF59E,UAAAwF,YAAE,WACMnG,KAAKi/E,aAAej/E,KAAKk/E,eAC3Bl/E,KAAK4mC,eAAec,kBAAkB1nC,KAAKk/E,cAAel/E,KAAKi/E,cAK3DV,EAAV59E,UAAAg+E,8BAMI,MALK3+E,MAAKk/E,cAGRl/E,KAAKk/E,cAActzE,YAAc5L,KAAK6oB,QAFtC7oB,KAAKk/E,cAAgBl/E,KAAKm/E,sBAIrBn/E,KAAKk/E,eAINX,EAAV59E,UAAAw+E,+BACI,GAAMC,GAAep/E,KAAK4K,UAAUilC,cAAc,OAwBlD,OArBAuvC,GAAah2B,aAAa,KAAM,qBAAqBppD,KAAKo4C,KAC1DgnC,EAAa16E,UAAUE,IAAI,qBAC3Bw6E,EAAaxzE,YAAc5L,KAAK6oB,QAE5B7oB,KAAKi/E,aACPG,EAAah2B,aAAa,aAAcppD,KAAKi/E,aAG/Cj/E,KAAKsD,YAAYjD,cAAc0vC,YAAYqvC,GAGN,kBAA1BhmE,uBACTpZ,KAAK4D,QAAQwB,kBAAkB,WAC7BgU,sBAAsB,WACpBgmE,EAAa16E,UAAUE,IAhBT,wBAoBlBw6E,EAAa16E,UAAUE,IApBL,oBAuBbw6E,GAIDb,EAAV59E,UAAAm+E,2BAAA,SAAqCD,EAAwBQ,GAEzD,GAAMx2D,GAAU7oB,KAAK2+E,oBAEjBU,IACFr/E,KAAK4mC,eAAec,kBAAkB7e,EAASw2D,GAG7CR,GACF7+E,KAAK4mC,eAAeiB,SAAShf,EAASg2D,IAKlCN,EAAV59E,UAAA2iE,UAAA,SAAoBgc,GACZA,IAAiBt/E,KAAKw+E,SACpBx+E,KAAKw+E,QACPx+E,KAAKsD,YAAYjD,cAAcqE,UAAUC,OAAO,aAAa3E,KAAKw+E,QAEhEc,GACFt/E,KAAKsD,YAAYjD,cAAcqE,UAAUE,IAAI,aAAa06E,oBA9JlE99E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,aACVW,MACEC,MAAS,YACTg9E,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,kDAiEhCv+E,SAAAuH,GAAAR,aAAA/G,KAAOwH,EAAAA,WAAPxH,KAAmByH,EAAAA,OAAnBvH,MAA0BuK,EAAAA,cAvF1BzK,KAA8CqF,EAAAA,SAA9CrF,KAAmB4L,EAAAA,aAHnB5L,KAAQipC,EAAAA,mCA+BRuQ,QAAAx5C,KAAGsB,EAAAA,MAAHpB,MAAS,mBASTs+E,UAAAx+E,KAAGsB,EAAAA,MAAHpB,MAAS,qBAWT0Y,WAAA5Y,KAAGsB,EAAAA,MAAHpB,MAAS,sBAGTmnB,UAAArnB,KAAGsB,EAAAA,MAAHpB,MAAS,cASTu9E,cAAAz9E,KAAGsB,EAAAA,MAAHpB,MAAS,yBAWTg6B,OAAAl6B,KAAGsB,EAAAA,MAAHpB,MAAS,kBAGTu+E,SAAAz+E,KAAGsB,EAAAA,MAAHpB,MAAS,qBArFT68E,iCCAA,sBAaA/8E,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,IACVI,SAAU40E,IACVx0E,cAAew0E,QAhBjB2B,KCYaC,GAAwB,GAAIxnE,GAAAA,eAAoB,sBAK7DynE,GAAA,wBAWApgF,KAAAwN,KAAoB,KAGpBxN,KAAAklC,aAA0B,EAM1BllC,KAAA6kC,cAA2B,EAG3B7kC,KAAA2zB,UAA8B,KAxC9B,MAAAysD,MCkBAC,GAAA,WAmBE,QAAFA,GAAc18D,EAAoDV,GAAhE,GAAFlf,GAAA/D,IAAkEA,MAAlEijB,YAAkEA,EARlEjjB,KAAAqjB,gBAAqC,GAAIlf,GAAAA,QAGzCnE,KAAA8iB,aAAkC,GAAI3e,GAAAA,QAMlCnE,KAAK2jB,kBAAoBA,EAGzBA,EAAkBmiD,uBAAuBrgE,KACvC6F,EAAAA,OAAO,SAAAlD,GAAS,MAAoB,SAApBA,EAAMirD,WAA0C,YAAlBjrD,EAAM2U,UACpD5N,EAAAA,KAAK,IAENxJ,UAAU,WACT5B,EAAK+e,aAAa1c,OAClBrC,EAAK+e,aAAazc,aAIpBsd,EAAkBmiD,uBAAuBrgE,KACvC6F,EAAAA,OAAO,SAAAlD,GAAS,MAAoB,SAApBA,EAAMirD,WAA0C,WAAlBjrD,EAAM2U,UACpD5N,EAAAA,KAAK,IAENxJ,UAAU,WACT5B,EAAKkf,YAAYC,UACjBnf,EAAKsf,gBAAgBjd,KAAKrC,EAAKgiE,SAC/BhiE,EAAKsf,gBAAgBhd,aAGlBsd,EAAkB28D,kBAAkBz7C,cACvCr/B,EAAAA,MACEyd,EAAYygB,gBACZzgB,EAAYs9D,eAAe96E,KAAK6F,EAAAA,OAAO,SAAAlD,GAAS,MAAAA,GAAM2W,UAAYypB,EAAAA,WAClE7iC,UAAU,WAAM,MAAA5B,GAAKukB,YAjE7B,MAyEE+3D,GAAF1/E,UAAA2nB,QAAE,SAAQ80B,GAAR,GAAFr5C,GAAA/D,IACSA,MAAKqjB,gBAAgBD,SAExBpjB,KAAK2jB,kBAAkBmiD,uBAAuBrgE,KAC5C6F,EAAAA,OAAO,SAAAlD,GAAS,MAAoB,UAApBA,EAAMirD,YACtBlkD,EAAAA,KAAK,IACLxJ,UAAU,WAAM,MAAA5B,GAAKkf,YAAYijD,mBAEnClmE,KAAK+lE,QAAU3oB,EACfp9C,KAAK2jB,kBAAkB6C,SAK3B65D,EAAF1/E,UAAA6iB,eAAE,WACE,MAAOxjB,MAAKqjB,gBAAgBI,gBAI9B48D,EAAF1/E,UAAA+iB,YAAE,WACE,MAAO1jB,MAAK8iB,aAAaW,gBAM3B48D,EAAF1/E,UAAA+iC,cAAE,WACE,MAAO1jC,MAAKijB,YAAYygB,iBAM1B28C,EAAF1/E,UAAA+iE,cAAE,WACE,MAAO1jE,MAAKijB,YAAYygD,iBA3G5B2c,KCkBaG,IAIXC,iBAAkB1lE,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgB1a,EAAAA,OAAO2a,UAAW,sBACxCD,EAAAA,MAAM,UAAW1a,EAAAA,OAAO2a,UAAW,oBACnCC,EAAAA,WAAW,qCACPC,EAAAA,QAAWqJ,GAAmBC,QADtC,IACiDC,GAAgBI,qBAC7D5J,EAAAA,WAAW,kBACPC,EAAAA,QAAWqJ,GAAmBK,QADtC,IACiDH,GAAgBM,uCC2D/D,QAAF07D,GACYp9E,EACAO,EACA49B,EACRk/C,EAC8Bh2E,GALhC,GAAF5G,GAMIC,EANJC,KAAAjE,OAAAA,WACY+D,GAAZT,YAAYA,EACAS,EAAZF,mBAAYA,EACAE,EAAZ09B,kBAAYA,EAvBZ19B,EAAA0hB,gBAAmD,OAGnD1hB,EAAA+hE,uBAA2B,GAAItpD,GAAAA,aAS/BzY,EAAA68E,4BAA4D,KAgBxD78E,EAAK6G,UAAYD,EACjB5G,EAAK88E,wBAA0BF,EAC5Bt3D,SAASC,EAAAA,YAAYw3D,OAAQx3D,EAAAA,YAAYy3D,MAAOz3D,EAAAA,YAAY03D,SAC5Dr7E,UAAU,WACT5B,EAAKk9E,aAAa,oCACdN,EAAmBO,UAAU53D,EAAAA,YAAYw3D,SAC7C/8E,EAAKk9E,aAAa,mCACdN,EAAmBO,UAAU53D,EAAAA,YAAYy3D,QAC7Ch9E,EAAKk9E,aAAa,oCACdN,EAAmBO,UAAU53D,EAAAA,YAAY03D,aAxCrD,MAJ6C38E,GAA7Cq8E,EAAA18E,GAiDE08E,EAAF//E,UAAA+kB,sBAAE,SAAyBC,GAIvB,MAHA3lB,MAAKmhF,0BACLnhF,KAAKohF,iBACLphF,KAAKi3E,gCACEj3E,KAAK8lB,cAAcJ,sBAAsBC,IAIlD+6D,EAAF//E,UAAAolB,qBAAE,SAAwBJ,GAItB,MAHA3lB,MAAKmhF,0BACLnhF,KAAKohF,iBACLphF,KAAKi3E,gCACEj3E,KAAK8lB,cAAcC,qBAAqBJ,IAIjD+6D,EAAF//E,UAAA0lB,MAAE,WACOrmB,KAAKulB,aACRvlB,KAAKylB,gBAAkB,UACvBzlB,KAAK6D,mBAAmB0iB,kBAK5Bm6D,EAAF//E,UAAA6lB,KAAE,WACOxmB,KAAKulB,aACRvlB,KAAKylB,gBAAkB,SACvBzlB,KAAK6D,mBAAmBqB,iBAI5Bw7E,EAAF//E,UAAAwF,YAAE,WACEnG,KAAK6gF,wBAAwB1pE,cAC7BnX,KAAKulB,YAAa,GAGpBm7D,EAAF//E,UAAAykD,iBAAE,SAAiBh9C,GACO,YAAlBA,EAAM2U,QACR/c,KAAKkiC,aACsB,WAAlB95B,EAAM2U,SACf/c,KAAKmiC,gBAGPniC,KAAK8lE,uBAAuB/kE,KAAKqH,IAGnCs4E,EAAF//E,UAAAy2E,kBAAE,SAAkBhvE,GAChBpI,KAAK8lE,uBAAuB/kE,KAAKqH,IAG3Bs4E,EAAV//E,UAAAsgF,aAAA,SAAuBn6D,EAAkBliB,GACrC,GAAMF,GAAY1E,KAAKsD,YAAYjD,cAAcqE,SACjDE,GAAMF,EAAUE,IAAIkiB,GAAYpiB,EAAUC,OAAOmiB,IAG3C45D,EAAV//E,UAAAwgF,mCACI,GAAInhF,KAAK8lB,cAAc/J,cACrB,KAAMgL,OAAM,gFAIR25D,EAAV//E,UAAAygF,0BACI,GAAMp8E,GAAuBhF,KAAKsD,YAAYjD,cACxCsmB,EAAa3mB,KAAKsgF,kBAAkB35D,UAEtCC,OAAMC,QAAQF,GAEhBA,EAAWjgB,QAAQ,SAAAogB,GAAY,MAAA9hB,GAAQN,UAAUE,IAAIkiB,KAC5CH,GACT3hB,EAAQN,UAAUE,IAAI+hB,IAMlB+5D,EAAV//E,UAAAuhC,sBACSliC,KAAKiiC,aACRjiC,KAAKiiC,WAAajiC,KAAKyhC,kBAAkBhX,OAAOzqB,KAAKsD,YAAYjD,gBAGnEL,KAAKiiC,WAAWi1C,gCAIVwJ,EAAV//E,UAAAwhC,yBACI,GAAMg1C,GAAUn3E,KAAK4gF,2BAGjBzJ,IAAoC,kBAAlBA,GAAQ75D,OAC5B65D,EAAQ75D,QAGNtd,KAAKiiC,YACPjiC,KAAKiiC,WAAWS,WAKZg+C,EAAV//E,UAAAs2E,mDACIj3E,MAAK4gF,4BAA8B5gF,KAAK4K,UAAsC,cAG1E5K,KAAKsD,YAAYjD,cAAcid,OACjCnF,QAAQC,UAAUC,KAAK,WAAM,MAAAtU,GAAKT,YAAYjD,cAAcid,0BA1KlE9b,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEE,SAAU,8CACVC,QAAF,okBACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEsP,YAAFivE,GAAAC,kBACEn+E,MACFC,MAAe,6BACTmkD,SAAN,KACI95C,KAAJ,SACIuzC,oBAAJ,+BACIn5B,WAAJ,kBACIq6D,iBAAJ,4BACIp6D,gBAAJ,mHAzCAzlB,KAAE8/E,EAAAA,mBAGF9/E,KAAE2pB,EAAAA,qBAiBF3pB,SAAmBuH,GAAnBR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAuK,EAAAA,eA0DAy0E,EAAAh+E,6EA5BAg+E,qCC1BE,QAAFa,GACcn6D,EACAE,EACwBk6D,GAFxBxhF,KAAdonB,SAAcA,EACApnB,KAAdsnB,UAAcA,EACwBtnB,KAAtCwhF,mBAAsCA,EAnBtCxhF,KAAAyhF,2BAAsE,KAtBtE,MAyBEn9E,QAAFC,eAAMg9E,EAAN5gF,UAAA,6BAAE,WACE,GAAMgnB,GAAS3nB,KAAKwhF,kBACpB,OAAO75D,GAASA,EAAO+5D,sBAAwB1hF,KAAKyhF,gCAGtD,SAA0Bh9E,GACpBzE,KAAKwhF,mBACPxhF,KAAKwhF,mBAAmBE,sBAAwBj9E,EAEhDzE,KAAKyhF,2BAA6Bh9E,mCActC88E,EAAF5gF,UAAAunB,KAAE,SAA0Bu/C,EACT1/C,GADjB,GAAFhkB,GAAA/D,KAGUooB,EAAUs/C,EAAqB3/C,GAC/BS,EAAaxoB,KAAK+oB,eAAeX,GACjCY,EAAYhpB,KAAK2hF,iBAAiBn5D,EAAYJ,GAC9Cw5D,EAAM,GAAIvB,IAAwBr3D,EAAWR,EAEnD,IAAIi/C,YAAkC9tD,GAAAA,YACpCqP,EAAUjD,qBAAqB,GAAIrL,GAAAA,eAAkB+sD,EAAsB,MACzEx+C,UAAWb,EAAQ5a,KACnBq0E,eAAgBD,SAEb,CACL,GAAMj8D,GAAS,GAAI+C,GAAAA,gBAAgB++C,MAAwB1+D,GACrD/I,KAAKmpB,gBAAgBf,EAASw5D,IAC9Bx4D,EAAaJ,EAAUtD,sBAAsBC,EACnDi8D,GAAIh5D,SAAWQ,EAAWR,SAuB5B,MAnBAg5D,GAAIp+D,iBAAiB7d,UAAU,WAEzB5B,EAAK29E,uBAAyBE,IAChC79E,EAAK29E,sBAAwB,QAI7B1hF,KAAK0hF,uBAGP1hF,KAAK0hF,sBAAsBl+D,iBAAiB7d,UAAU,WAAM,MAAAi8E,GAAIj+D,kBAAkB0C,UAClFrmB,KAAK0hF,sBAAsBp5D,WAG3Bs5D,EAAIj+D,kBAAkB0C,QAGxBrmB,KAAK0hF,sBAAwBE,EAEtBA,GAMTL,EAAF5gF,UAAA2nB,QAAE,WACMtoB,KAAK0hF,uBACP1hF,KAAK0hF,sBAAsBp5D,WAOvBi5D,EAAV5gF,UAAAghF,iBAAA,SAA2Bn5D,EACAT,GACvB,GAAMU,GAAkB,GAAIC,GAAAA,gBAAgBg4D,GAAyB34D,EAAOrO,kBACtEiP,EAAsDH,EAAWxM,OAAOyM,EAE9E,OADAE,GAAaC,SAAS03D,kBAAoBv4D,EACnCY,EAAaC,UAOd24D,EAAV5gF,UAAAooB,eAAA,SAAyBhB,GACrB,GAAM+B,GAAgB,GAAIC,GAAAA,eACxBrU,UAAWqS,EAAOrS,UAClBwvB,YAAand,EAAOmd,YACpBqjC,SAAU,OACV5+B,eAAgB3pC,KAAKonB,SAAS+e,iBAAiBygC,QAC/C58C,iBAAkBhqB,KAAKonB,SAAShN,WAC7B6P,SACAK,qBACAE,OAAO,MAOZ,OAJIzC,GAAO0rB,gBACT3pB,EAAc2pB,cAAgB1rB,EAAO0rB,eAGhCzzC,KAAKonB,SAASqD,OAAOX,IAQtBy3D,EAAV5gF,UAAAwoB,gBAAA,SAA6BpB,EACA85D,GAEzB,GAAMn3D,GAAe3C,GAAUA,EAAOrO,kBAAoBqO,EAAOrO,iBAAiBwP,SAC5EyB,EAAkB,GAAIC,QAY5B,OAVAD,GAAgBE,IAAIw1D,GAAmBwB,GACvCl3D,EAAgBE,IAAIs1D,GAAuBp4D,EAAOva,MAE7Ckd,GAAiBA,EAAa1iB,IAAI6J,EAAAA,eAAgB,OACrD8Y,EAAgBE,IAAIhZ,EAAAA,gBAClBpN,MAAOsjB,EAAOrS,UACdpQ,OAAQC,EAAAA,OAIL,GAAIulB,GAAAA,eAAeJ,GAAgB1qB,KAAKsnB,UAAWqD,mBAvI9DnpB,KAACupB,EAAAA,iDAZDvpB,KAAQwpB,EAAAA,UAERxpB,KAA+C0pB,EAAAA,WAW/C1pB,KAAa+/E,EAAbh5E,aAAA/G,KAoBOwH,EAAAA,WApBPxH,KAoBmB4pB,EAAAA,cAzCnBm2D,iCCAA,sBAiBA//E,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACA+hB,EAAAA,cACA9hB,GACAC,EAAAA,cAEFG,SAAU+2E,GAAyBn3E,IACnCQ,cAAe22E,IACfp1D,iBAAkBo1D,IAClBzzE,WAAYs0E,QA3BdO,Kf6BMC,GAA6B,SAG7BC,GAA4B,UAM5BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAKFC,GAAA,WACE,QAAFA,GAAqB5+E,GAAAtD,KAArBsD,YAAqBA,EAnDrB,MAAA4+E,MAqDaC,GAAsB3+E,EAAW4D,EAAcD,EAAmB+6E,qBAiC7E,QAAF5K,GAAc5zE,EAMQgH,EACAulB,GAPpB,GAAFlsB,GAQIC,EARJC,KAAAjE,KAQU0D,IARV1D,IAMsB+D,GAAtB2G,UAAsBA,EACA3G,EAAtBksB,cAAsBA,EAftBlsB,EAAAq+E,eAA4Br+E,EAAKs+E,mBAAmB,UAAW,gBAG/Dt+E,EAAAu+E,cAA2Bv+E,EAAKs+E,mBAAmB,kBAiB/C,KAAmB,GAAvBn7B,GAAA,EAAuBq7B,EAAvBN,GAAuB/6B,EAAvBq7B,EAAAp3E,OAAuB+7C,IAAvB,CAAS,GAAM4qB,GAAfyQ,EAAAr7B,EACUnjD,GAAKs+E,mBAAmBvQ,IACzBpuE,EAAuC,cAAEgB,UAAUE,IAAIktE,SAI5D/tE,GAAKksB,cAAcE,QAAQpsB,EAAKT,YAAYjD,eAAe,GAEvD0D,EAAKq+E,eACPr+E,EAAKi3C,MAAQ+mC,GACJh+E,EAAKs+E,mBAAmB,qBACjCt+E,EAAKi3C,MAAQgnC,MAzBnB,MAV+B39E,GAA/BizE,EAAAtzE,GAuCEszE,EAAF32E,UAAAwF,YAAE,WACEnG,KAAKiwB,cAAcI,eAAerwB,KAAKsD,YAAYjD,gBAIrDi3E,EAAF32E,UAAA2c,MAAE,WACEtd,KAAKywB,kBAAkBnT,SAGzBg6D,EAAF32E,UAAA8vB,gBAAE,WACE,MAAOzwB,MAAKsD,YAAYjD,eAG1Bi3E,EAAF32E,UAAA4/B,kBAAE,WACE,MAAOvgC,MAAK4G,eAAiB5G,KAAKoB,UAIpCk2E,EAAF32E,UAAA0hF,mBAAE,WAAF,IAAqB,GAArBt+E,GAAA/D,KAAAwiF,KAAAt7B,EAAA,EAAqBA,EAArBxyC,UAAAvJ,OAAqB+7C,IAAAs7B,EAArBt7B,GAAAxyC,UAAAwyC,EACI,OAAOs7B,GAAW72E,KAAK,SAAA82E,GAAa,MAAA1+E,GAAK0sB,kBAAkBs4C,aAAa0Z,qBAzE5EjhF,KAACC,EAAAA,UAADC,OAAAC,SAAA,iMACEC,SAAU,YACVU,MAGFitD,aAAA,oBAEA1tD,SAAA,sVACAC,QAAA,qrOACEO,QAAF,WAAA,gBAAA,SACEN,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAzDAZ,KAAE20B,EAAAA,gBALFmhD,EAAA50E,uDA4EA40E,wCAwEA,MAAAtzE,GAAAC,KAAAjE,KAAA0D,EAAAy6B,EAAAukD,IAAA1iF,KAnJA,0DAyJAA,KAAAoB,8BAEQgH,EAARu6E,6BAGAtL,EAAA9uE,aACA/G,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,gLA7BAW,MACA49C,kBAAA,oBACA6D,kBAAA,mBAEAt7C,uBAAA,sBACMI,UAAN,+BAEAxG,QAAA,WAAqB,gBAArB,SACAR,SAAA,sVACAC,QAAA;6rOACAC,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAIAi1E,EAAAzlE,eAAA,WAAA,QACApQ,KAAAsH,EAAAA,sDAlJAuuE,GADAC,gCCRA,sBAcA91E,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACAG,GACAF,IAEFI,SACE2tE,GACAD,GACA9tE,IAEFQ,cACEutE,GACAD,QA3BJjlE,KC2CAmlE,GAAA,yBA3CA,MAAAA,MA4CaC,GAAiCpwE,EAAcmwE,IAO/CE,IACXvqE,QAAS0lB,EAAAA,kBACTzlB,YAAakP,EAAAA,WAAW,WAAM,MAAAq7D,MAC9B5kD,OAAO,GAOT6kD,GAAA,yBA7DA,MAAAA,MA+DIC,GAAmB,EAGvBC,GAAA,WACE,QAAFA,GAEW7kD,EAGAvuB,GAHAzE,KAAXgzB,OAAWA,EAGAhzB,KAAXyE,MAAWA,EAxEX,MAAAozE,qBAgLE,QAAFH,GAAsB74C,GAApB,GAAF96B,GACIC,EADJC,KAAAjE,OAAAA,WAAsB+D,GAAtB86B,gBAAsBA,EAnFtB96B,EAAA+zB,WAAsB,EACtB/zB,EAAAoyC,WAAsB,EAetBpyC,EAAAq0B,8BAAwD,aAGxDr0B,EAAA4yC,WAA0B,aAe1B5yC,EAAA+6B,MAAkB,2BAA2B84C,KA8B7C7zE,EAAA6zC,YAAmC,GAAIp7B,GAAAA,aAiBvCzY,EAAAuB,OAAM,GAAIkX,GAAAA,eA9KV,MA0F0CnY,GAA1CqzE,EAAA1zE,GA6BAM,OAAAC,eAAMmzE,EAAN/2E,UAAA,YAAA,WAAuB,MAAOX,MAAK8+B,WACjC,SAASr6B,GAAT,GAAFV,GAAA/D,IACIA,MAAK8+B,MAAQr6B,EAETzE,KAAK83E,gBACP93E,KAAK83E,eAAepxE,QAAQ,SAAAouB,GAAU,MAAAA,GAAOrhB,KAAO1P,EAAK+6B,yCAO/Dx6B,OAAAC,eAAMmzE,EAAN/2E,UAAA,gBAAA,WAA4B,MAAOX,MAAK83B,eACtC,SAAarzB,GACXzE,KAAK83B,UAAYjzB,EAAAA,sBAAsBJ,oCAK3CH,OAAAC,eAAMmzE,EAAN/2E,UAAA,wBACI,GAAMiwB,GAAW5wB,KAAKg4C,gBAAkBh4C,KAAKg4C,gBAAgBpnB,WAE7D,OAAI5wB,MAAKs4C,SACA1nB,EAAS7f,IAAI,SAAA+jB,GAAU,MAAAA,GAAOrwB,QAGhCmsB,EAAS,GAAKA,EAAS,GAAGnsB,UAAQsE,QAE3C,SAAUs2B,GACRr/B,KAAKo5C,qBAAqB/Z,GAC1Br/B,KAAK43C,YAAY72C,KAAKf,KAAKyE,wCAW7BH,OAAFC,eAAMmzE,EAAN/2E,UAAA,gBAAE,WACE,GAAMiwB,GAAW5wB,KAAKg4C,gBAAgBpnB,QACtC,OAAO5wB,MAAKs4C,SAAW1nB,EAAYA,EAAS,IAAM,sCAKtDtsB,OAAAC,eAAMmzE,EAAN/2E,UAAA,gBAAA,WAA4B,MAAOX,MAAKm2C,eACtC,SAAa1xC,GACXzE,KAAKm2C,UAAYtxC,EAAAA,sBAAsBJ,oCAWzCizE,EAAF/2E,UAAA8Z,SAAE,WACEza,KAAKg4C,gBAAkB,GAAIK,GAAAA,eAAgCr4C,KAAKs4C,aAAUvvC,IAAW,IAGvF2uE,EAAF/2E,UAAAwE,mBAAE,YACEoS,EAAAvX,KAAKg4C,iBAAgB6D,OAAzB/qC,MAAAyG,EAAmCvX,KAAK83E,eAAexsE,OAAO,SAAAwpB,GAAU,MAAAA,GAAO7B,kBAO7EykD,EAAF/2E,UAAA4zB,WAAE,SAAW9vB,GACTzE,KAAKyE,MAAQA,EACbzE,KAAK6+B,gBAAgB35B,gBAIvBwyE,EAAF/2E,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAKo4B,8BAAgC3D,GAIvCijD,EAAF/2E,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAK22C,WAAaliB,GAIpBijD,EAAF/2E,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKoB,SAAWwzB,EAEZ50B,KAAK83E,gBACP93E,KAAK83E,eAAepxE,QAAQ,SAAAouB,GAAU,MAAAA,GAAO8K,mBAKjD83C,EAAF/2E,UAAA0zB,iBAAE,WACE,GAAMzD,GAAW5wB,KAAK4wB,SAChBoC,EAASpM,MAAMC,QAAQ+J,GAAYA,EAASA,EAASzlB,OAAS,GAAKylB,EACnExoB,EAAQ,GAAIyvE,IAAqB,EAAU73E,KAAKyE,MACtDzE,MAAKo4B,8BAA8BhwB,EAAM3D,OACzCzE,KAAKsF,OAAOvE,KAAKqH,IASnBsvE,EAAF/2E,UAAAo3E,kBAAE,SAAkBjjD,EAAyB+mB,EAAiBX,OAA9D,KAAAA,IAA8DA,GAA9D,GAGSl7C,KAAKs4C,WAAYt4C,KAAK4wB,UAAakE,EAAO7B,UAC5CjzB,KAAgC,SAAEizB,SAAU,GAG3C4oB,EACF77C,KAAKg4C,gBAAgB6D,OAAO/mB,GAE5B90B,KAAKg4C,gBAAgB+D,SAASjnB,GAI5BomB,GACFl7C,KAAKq0B,mBAKPr0B,KAAK43C,YAAY72C,KAAKf,KAAKyE,QAI7BizE,EAAF/2E,UAAAq3E,YAAE,SAAYljD,GACV,MAAO90B,MAAKg4C,gBAAgByE,WAAW3nB,IAIzC4iD,EAAF/2E,UAAAs3E,cAAE,SAAcnjD,GACZ,WAA8B,KAAnB90B,KAAKk4E,YAIZl4E,KAAKs4C,UAAY1xB,MAAMC,QAAQ7mB,KAAKk4E,aAC7Bl4E,KAAKk4E,UAAUlyE,KAAK,SAAAvB,GAAS,MAAgB,OAAhBqwB,EAAOrwB,OAAiBA,IAAUqwB,EAAOrwB,QAG1EqwB,EAAOrwB,QAAUzE,KAAKk4E,YAIvBR,EAAV/2E,UAAAy4C,qBAAA,SAA+B30C,aAG3B,IAFAzE,KAAKk4E,UAAYzzE,EAEZzE,KAAK83E,eAIV,GAAI93E,KAAKs4C,UAAY7zC,EAAO,CAC1B,IAAKmiB,MAAMC,QAAQpiB,GACjB,KAAMsiB,OAAM,qDAGd/mB,MAAKo7C,kBACL32C,EAAMiC,QAAQ,SAAC20C,GAAsB,MAAAt3C,GAAKu3C,aAAaD,SAEvDr7C,MAAKo7C,kBACLp7C,KAAKs7C,aAAa72C,IAKdizE,EAAV/2E,UAAAy6C,2BACIp7C,KAAKg4C,gBAAgB/P,QACrBjoC,KAAK83E,eAAepxE,QAAQ,SAAAouB,GAAU,MAAAA,GAAO7B,SAAU,KAIjDykD,EAAV/2E,UAAA26C,aAAA,SAAuB72C,GACnB,GAAM+2C,GAAsBx7C,KAAK83E,eAAe9xE,KAAK,SAAA8uB,GACnD,MAAuB,OAAhBA,EAAOrwB,OAAiBqwB,EAAOrwB,QAAUA,GAG9C+2C,KACFA,EAAoBvoB,SAAU,EAC9BjzB,KAAKg4C,gBAAgB6D,OAAOL,oBAvOlCh6C,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,0BACVsL,WACEwqE,IACCvqE,QAASyqE,GAA8BxqE,YAAauqE,IAEvDr1E,QAAS,YACTC,MACE0K,cAAe,oCACfzK,MAAS,0BACT41E,qCAAsC,YAExCv2E,SAAU,+DA3EZJ,KAAEsF,EAAAA,uCAsGFgxE,iBAAAt2E,KAAGqM,EAAAA,gBAAHnM,MAAmB2a,EAAAA,WAAW,WAAM,MAAA+7D,SAGpC3kE,OAAAjS,KAAGsB,EAAAA,QAYHm2B,WAAAz3B,KAAGsB,EAAAA,QAOH2B,QAAAjD,KAAGsB,EAAAA,QAoBH80C,cAAAp2C,KAAG0B,EAAAA,SASHo1C,WAAA92C,KAAGsB,EAAAA,QAOHwC,SAAA9D,KAAG0B,EAAAA,UA7KHw0E,GA0F0CF,IAgO1Ca,GAAA,yBA1TA,MAAAA,MA2TaC,GAA4BnxE,EAAmBkxE,mBAwF1D,QAAFD,GAA0BG,EACJ10E,EACAP,EACA2sB,GAHpB,GAAFlsB,GAIIC,EAJJC,KAAAjE,OAAAA,WACsB+D,GAAtBF,mBAAsBA,EACAE,EAAtBT,YAAsBA,EACAS,EAAtBksB,cAAsBA,EApEtBlsB,EAAAy0E,mBAA8B,EAC9Bz0E,EAAA0vB,UAAqB,EAWrB1vB,EAAA6vB,eAA4D,KA+C5D7vB,EAAAm7B,WAA+B,EAI/Bn7B,EAAAuB,OAAM,GAAIkX,GAAAA,aAQNzY,EAAK00E,kBAAoBF,IAT7B,MAjEqCl0E,GAArC+zE,EAAAp0E,GA0BEM,OAAFC,eAAM6zE,EAANz3E,UAAA,eAAE,WAAwB,MAAUX,MAAKqsB,GAAzC,0CAaA/nB,OAAAC,eAAM6zE,EAANz3E,UAAA,0BACI,MAAOX,MAAKy4E,kBAAoBz4E,KAAKy4E,kBAAkBT,YAAYh4E,MAAQA,KAAKyzB,cAElF,SAAYhvB,GACV,GAAM46B,GAAWx6B,EAAAA,sBAAsBJ,EAEnC46B,KAAar/B,KAAKyzB,WACpBzzB,KAAKyzB,SAAW4L,EAEZr/B,KAAKy4E,mBACPz4E,KAAKy4E,kBAAkBV,kBAAkB/3E,KAAMA,KAAKyzB,UAGtDzzB,KAAK6D,mBAAmBqB,iDAM9BZ,OAAAC,eAAM6zE,EAANz3E,UAAA,2BACI,MAAOX,MAAKk/B,WAAcl/B,KAAKy4E,mBAAqBz4E,KAAKy4E,kBAAkBr3E,cAE7E,SAAaqD,GAAkBzE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,oCAgBtE2zE,EAAFz3E,UAAA8Z,SAAE,WACEza,KAAKw4E,kBAAoBx4E,KAAKy4E,oBAAsBz4E,KAAKy4E,kBAAkBngC,SAC3Et4C,KAAK6qE,MAAQ7qE,KAAKw4E,kBAAoB,QAAU,WAChDx4E,KAAKqsB,GAAKrsB,KAAKqsB,IAAM,qBAAqBurD,KAEtC53E,KAAKw4E,oBACPx4E,KAAKyT,KAAOzT,KAAKy4E,kBAAkBhlE,MAGjCzT,KAAKy4E,mBAAqBz4E,KAAKy4E,kBAAkBR,cAAcj4E,QACjEA,KAAKizB,SAAU,GAGjBjzB,KAAKiwB,cAAcE,QAAQnwB,KAAKsD,YAAYjD,eAAe,IAG7D+3E,EAAFz3E,UAAAwF,YAAE,WACEnG,KAAKiwB,cAAcI,eAAerwB,KAAKsD,YAAYjD,gBAIrD+3E,EAAFz3E,UAAA2c,MAAE,WACEtd,KAAK+zB,cAAc1zB,cAAcid,SAInC86D,EAAFz3E,UAAA6/B,eAAE,SAAep4B,GACbA,EAAM+rB,kBAENn0B,KAAKyzB,WAAWzzB,KAAKw4E,oBAA4Bx4E,KAAKyzB,SAElDzzB,KAAKy4E,oBACPz4E,KAAKy4E,kBAAkBV,kBAAkB/3E,KAAMA,KAAKyzB,UAAU,GAC9DzzB,KAAKy4E,kBAAkB9hC,cAIzB32C,KAAKsF,OAAOvE,KAAK,GAAI82E,IAAsB73E,KAAMA,KAAKyE,SAGxD2zE,EAAFz3E,UAAA2zB,cAAE,SAAclsB,GAQZA,EAAM+rB,mBAQRikD,EAAFz3E,UAAAi/B,cAAE,WAGE5/B,KAAK6D,mBAAmBqB,+BAzJ5B1D,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEE,SAAU,qoBACVC,QAAF,mkCACEC,cAAFC,EAAAA,kBAAmCC,KACjCL,SAAF,kBACEM,gBAAFC,EAAAA,wBAAAC,OACEC,QAAF,iBACEC,MACFo2E,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCr2E,MAAJ,oBACIq+B,YAAJ,kHAhPAp/B,KAAa4L,EAAAA,aA7Eb5L,KAAE20B,EAAAA,gBALFiiD,EAAA11E,wHAiVAqxB,gBAAAvyB,KAAAoB,EAAAA,UAAAlB,MAAA,WAKA2qB,KAAA7qB,KAAAsB,EAAAA,QAKA2Q,OAAAjS,KAAAsB,EAAAA,QASA2B,QAAAjD,KAAAsB,EAAAA,QAGAmwB,UAAAzxB,KAAAsB,EAAAA,QAGA1B,WAAAI,KAAAsB,EAAAA,QAGAwC,SAAA9D,KAAA0B,EAAAA,UA2BAk1E,mCChZA,sBAaA52E,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,GAAiBE,IAC3BE,SAAUJ,GAAiBmuE,GAAsBU,IACjDruE,cAAe2tE,GAAsBU,QAhBvCS,iCCAA,sBAqBAr3E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,mBACVW,MAAOC,MAAS,wBAvBlBu2E,iCAAA,sBA+BAt3E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,mDACVW,MACEC,MAAS,sBAlCbw2E,iCAAA,sBA2CAv3E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,4DACVW,MACEC,MAAS,yBA9Cby2E,gCAiEAh5E,KAAAi5E,MAAoC,QAjEpC,sBAuDAz3E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,mBACVC,SAAU,iBACVU,MACEC,MAAS,mBACT22E,qCAAsC,yCAK1CD,QAAAz3E,KAAGsB,EAAAA,SAjEHq2E,iCAAA,sBAwEA33E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,kBACVW,MAAOC,MAAS,uBA1ElB62E,iCAAA,sBAkFA53E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,mCACVW,MAAOC,MAAS,sBApFlB82E,iCAAA,sBA4FA73E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,2CACVW,MAAOC,MAAS,yBA9FlB+2E,iCAAA,sBAsGA93E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,4CACVW,MAAOC,MAAS,yBAxGlBg3E,iCAAA,sBAgHA/3E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,2CACVW,MAAOC,MAAS,yBAlHlBi3E,iCAAA,sBA0HAh4E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,4CACVW,MAAOC,MAAS,yBA5HlBk3E,iCAAA,sBAoIAj4E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,qCACVW,MAAOC,MAAS,uBAtIlBm3E,iCA+JA,sBATAl4E,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,UACVC,SAAU,8EACVC,QAAF,48EACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEE,MAAFC,MAAA,gBAGAo3E,iCAcA,yWALA53E,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEE,MAAQC,MAAV,uBAGAq3E,iCAcA,0YAHAt3E,MAAAC,MAAA,4BAGAs3E,iCC3LA,sBA4BAr4E,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,IACVI,SACEgwE,GACAC,GACAC,GACAf,GACAC,GACAC,GACAG,GACAC,GACAE,GACAC,GACAC,GACAH,GACAI,GACAC,GACAnwE,IAEFQ,cACE4vE,GAASC,GAAeC,GAAmBf,GAAgBC,GAAcC,GACzEG,GAAgBC,GAAeE,GAAgBC,GAAgBC,GAAgBH,GAC/EI,GAAgBC,QAlDpBI,KCsBa1J,GACT,GAAIz3D,GAAAA,eAAuC,6BhBqB3C+Z,GAAe,EAONy9C,IACXjjE,QAAS0lB,EAAAA,kBACTzlB,YAAakP,EAAAA,WAAW,WAAM,MAAAg0D,MAC9Bv9C,OAAO,kKAmBT,IAAAinD,IAAA,yBAzEA,MAAAA,MAkFAC,GAAA,WACE,QAAFA,GAAqB12E,GAAAtD,KAArBsD,YAAqBA,EAnFrB,MAAA02E,MAqFaC,GACX/yE,EAAc1D,EAAW2D,EAAmBC,EAAc4yE,KAAmB,0BA+F7E,QAAF3J,GAAc3sE,EACQG,EACAosB,EACezoB,EAEX0yE,GALxB,GAAFn2E,GAMIC,EANJC,KAAAjE,KAMU0D,IANV1D,WACsB+D,GAAtBF,mBAAsBA,EACAE,EAAtBksB,cAAsBA,EAGIlsB,EAA1Bm2E,aAA0BA,EA/D1Bn2E,EAAA4vB,UAA2C,GAK3C5vB,EAAA6vB,eAA4D,KAE5D7vB,EAAAwvB,UAA8B,mBAAkBb,GAGhD3uB,EAAAsoB,GAAwBtoB,EAAKwvB,UAY7BxvB,EAAA2vB,cAA+C,QAG/C3vB,EAAA0P,KAAiC,KAIjC1P,EAAAuB,OAAM,GAAIkX,GAAAA,aAGVzY,EAAAusE,oBAAkE,GAAI9zD,GAAAA,aAetEzY,EAAA4yC,WAA0B,aAE1B5yC,EAAAo2E,uBAA2C,GAE3Cp2E,EAAAq2E,mBAAqDC,GAAqBC,KAE1Ev2E,EAAAq0B,8BAAgE,aAqChEr0B,EAAA0vB,UAA8B,EAwB9B1vB,EAAAw2E,gBAAoC,EAhDhCx2E,EAAKyD,SAAWC,SAASD,IAAa,IAgC1C,MAzGiCnD,GAAjCgsE,EAAArsE,GAoBEM,OAAFC,eAAM8rE,EAAN1vE,UAAA,eAAE,WAAwB,OAAUX,KAAKqsB,IAAMrsB,KAAKuzB,WAApD,0CAIAjvB,OAAAC,eAAM8rE,EAAN1vE,UAAA,gBAAA,WAA4B,MAAOX,MAAKwzB,eACtC,SAAa/uB,GAAkBzE,KAAKwzB,UAAY3uB,EAAAA,sBAAsBJ,oCAmDtE4rE,EAAF1vE,UAAAkK,gBAAE,WAAA,GAAF9G,GAAA/D,IACIA,MAAKiwB,cACFE,QAAQnwB,KAAK+zB,cAAc1zB,eAC3BsF,UAAU,SAAAquB,GAAe,MAAAjwB,GAAKkwB,oBAAoBD,MAGvDq8C,EAAF1vE,UAAAwF,YAAE,WACEnG,KAAKiwB,cAAcI,eAAerwB,KAAK+zB,cAAc1zB,gBAOzDiE,OAAAC,eAAM8rE,EAAN1vE,UAAA,eAAA,WAA2B,MAAOX,MAAKyzB,cACrC,SAAYhvB,GACNA,GAASzE,KAAKizB,UAChBjzB,KAAKyzB,SAAWhvB,EAChBzE,KAAK6D,mBAAmBqB,iDAY9BZ,OAAAC,eAAM8rE,EAAN1vE,UAAA,qBAAA,WAAiC,MAAOX,MAAKu6E,oBAC3C,SAAkB91E,GAChB,GAAM+1E,GAAU/1E,GAASzE,KAAKu6E,cAC9Bv6E,MAAKu6E,eAAiB91E,EAElB+1E,IACEx6E,KAAKu6E,eACPv6E,KAAKy6E,sBAAsBJ,GAAqBK,eAEhD16E,KAAKy6E,sBACHz6E,KAAKizB,QAAUonD,GAAqBM,QAAUN,GAAqBO,WAEvE56E,KAAKswE,oBAAoBvvE,KAAKf,KAAKu6E,kDAKvClK,EAAF1vE,UAAA4/B,kBAAE,WACE,MAAOvgC,MAAK4G,eAAiB5G,KAAKoB,UAIpCivE,EAAF1vE,UAAAm1B,mBAAE,WAIE91B,KAAK6D,mBAAmBqB,gBAI1BmrE,EAAF1vE,UAAA4zB,WAAE,SAAW9vB,GACTzE,KAAKizB,UAAYxuB,GAInB4rE,EAAF1vE,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAKo4B,8BAAgC3D,GAIvC47C,EAAF1vE,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAK22C,WAAaliB,GAIpB47C,EAAF1vE,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKoB,SAAWwzB,EAChB50B,KAAK6D,mBAAmBqB,gBAG1BmrE,EAAF1vE,UAAAk6E,gBAAE,WACE,MAAO76E,MAAKizB,QAAU,OAAUjzB,KAAKwwE,cAAgB,QAAU,SAGzDH,EAAV1vE,UAAA85E,sBAAA,SAAgCK,GAC5B,GAAIC,GAAW/6E,KAAKo6E,mBAChBp1E,EAAuBhF,KAAKsD,YAAYjD,aAExC06E,KAAaD,IAGb96E,KAAKm6E,uBAAuBhvE,OAAS,GACvCnG,EAAQN,UAAUC,OAAO3E,KAAKm6E,wBAGhCn6E,KAAKm6E,uBAAyBn6E,KAAKg7E,0CAC/BD,EAAUD,GACd96E,KAAKo6E,mBAAqBU,EAEtB96E,KAAKm6E,uBAAuBhvE,OAAS,GACvCnG,EAAQN,UAAUE,IAAI5E,KAAKm6E,0BAIvB9J,EAAV1vE,UAAA0zB,4BACI,GAAIjsB,GAAQ,GAAI2xE,GAChB3xE,GAAM4qB,OAAShzB,KACfoI,EAAM6qB,QAAUjzB,KAAKizB,QAErBjzB,KAAKo4B,8BAA8Bp4B,KAAKizB,SACxCjzB,KAAKsF,OAAOvE,KAAKqH,IAIXioE,EAAV1vE,UAAAszB,oBAAA,SAA8BD,GAErBh0B,KAAK+0B,cAAgC,aAAhBf,EAEdA,IACVh0B,KAAKi7E,qBACLj7E,KAAK22C,cAHL32C,KAAK+0B,aAAe/0B,KAAKuwE,OAAOr7C,OAAO,EAAG,GAAIC,YAAY,KAQ9Dk7C,EAAF1vE,UAAAm0B,OAAE,WACE90B,KAAKizB,SAAWjzB,KAAKizB,SAUvBo9C,EAAF1vE,UAAA2zB,cAAE,SAAclsB,GAAd,GAAFrE,GAAA/D,IAQIoI,GAAM+rB,kBAGDn0B,KAAKoB,UAAkC,SAAtBpB,KAAKk6E,aAkBfl6E,KAAKoB,UAAkC,SAAtBpB,KAAKk6E,eAGhCl6E,KAAK+zB,cAAc1zB,cAAc4yB,QAAUjzB,KAAKizB,QAChDjzB,KAAK+zB,cAAc1zB,cAAcmwE,cAAgBxwE,KAAKwwE,gBApBlDxwE,KAAKwwE,eAAuC,UAAtBxwE,KAAKk6E,cAE7B/hE,QAAQC,UAAUC,KAAK,WACrBtU,EAAKw2E,gBAAiB,EACtBx2E,EAAKusE,oBAAoBvvE,KAAKgD,EAAKw2E,kBAIvCv6E,KAAK80B,SACL90B,KAAKy6E,sBACDz6E,KAAKyzB,SAAW4mD,GAAqBM,QAAUN,GAAqBO,WAKxE56E,KAAKq0B,qBAUTg8C,EAAF1vE,UAAA2c,MAAE,WACEtd,KAAKiwB,cAAc4E,SAAS70B,KAAK+zB,cAAc1zB,cAAe,aAGhEgwE,EAAF1vE,UAAAu6E,oBAAE,SAAoB9yE,GAIlBA,EAAM+rB,mBAGAk8C,EAAV1vE,UAAAq6E,0CACA,SAAMD,EAAgCD,GAClC,GAAIK,GAAqB,EAEzB,QAAQJ,GACN,IAAKV,IAAqBC,KAGxB,GAAIQ,IAAaT,GAAqBM,QACpCQ,EAAa,wBACR,CAAA,GAAIL,GAAYT,GAAqBK,cAG1C,MAAO,EAFPS,GAAa,0BAIf,KACF,KAAKd,IAAqBO,UACxBO,EAAaL,IAAaT,GAAqBM,QAC3C,oBAAsB,yBAC1B,MACF,KAAKN,IAAqBM,QACxBQ,EAAaL,IAAaT,GAAqBO,UAC3C,oBAAsB,uBAC1B,MACF,KAAKP,IAAqBK,cACxBS,EAAaL,IAAaT,GAAqBM,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBQ,GAItB9K,EAAV1vE,UAAAs6E,8BACQj7E,KAAK+0B,eACP/0B,KAAK+0B,aAAaC,UAClBh1B,KAAK+0B,aAAe,sBA7T1BvzB,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEE,SAAU,g3CACVC,QAAF;u2KACEF,SAAF,cACEU,MACFC,MAAA,eACMwzB,OAAN,KACIg6C,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,6BAEAjjE,WAAAkjE,IACA9tE,QAAA,WAAA,gBAAA,QAAA,YACEN,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAhGAZ,KAAE20B,EAAAA,eAFF30B,SAAEuH,GAAFR,aAAA/G,KAAA2H,EAAAA,UAAAzH,MAAA,gBANAF,SAAQuH,GAARR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAA0uE,SAiLAC,EAAA3tE,wHA9DA2pB,KAAA7qB,KAAAsB,EAAAA,QAKAszB,WAAA50B,KAAAsB,EAAAA,QAKA4wB,gBAAQlyB,KAARsB,EAAAA,QAMA2Q,OAAAjS,KAAAsB,EAAAA,QAMAwC,SAAA9D,KAAA0B,EAAAA,SAGAotE,sBAAA9uE,KAAA0B,EAAAA,SAGAuB,QAAAjD,KAAAsB,EAAAA,QAIAixB,gBAAAvyB,KAAAoB,EAAAA,UAAAlB,MAAA,WAGA6uE,SAAA/uE,KAAAoB,EAAAA,UAAAlB,MAAA20B,MAGApD,UAAAzxB,KAAAsB,EAAAA,QAGA0tE,gBAAAhvE,KAAAsB,EAAAA,SAyDAutE,OC3MaI,IACXvjE,QAAS42D,EAAAA,cACT32D,YAAakP,EAAAA,WAAW,WAAM,MAAAq0D,MAC9B59C,OAAO,8EArBT,MAmCkDzuB,GAAlDqsE,EAAA1sE,kBANAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,8HAEVsL,WAAYwjE,IACZnuE,MAAOquE,kBAAmB,4BAjC5BD,GAmCkDE,EAAAA,uDCnClD,sBAgBApvE,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUC,EAAAA,aAAcG,GAAiBF,GAAiBG,EAAAA,iBAC1DC,SAAU0mE,GAAaK,GAA8BnnE,IACrDQ,cAAesmE,GAAaK,QAnB9BG,KCgDAC,GAAA,WACE,QAAFA,GAEW99C,EAEApC,EAEAsqB,sBAJAl7C,KAAXgzB,OAAWA,EAEAhzB,KAAX4wB,SAAWA,EAEA5wB,KAAXk7C,YAAWA,EAvDX,MAAA41B,MA6DAC,GAAA,WACE,QAAFA,GAAqBztE,GAAAtD,KAArBsD,YAAqBA,EA9DrB,MAAAytE,MAiEaC,GACTxtE,EAAW2D,EAAmBC,EAAc2pE,KAAe,WAEzDE,IAAwB,8CApE9B,sBA0EAzvE,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,mCACVW,MAAOC,MAAS,uBA5ElB2uE,iCAAA,sBAoFA1vE,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,gDACVW,MAAOC,MAAS,8BAtFlB4uE,oBAuNE,QAAFC,GAAqB9tE,EACPonE,EACAvsC,EAC+Cz2B,GAH3D,GAAF3D,GAIIC,EAJJC,KAAAjE,KAIUsD,IAJVtD,WAAqB+D,GAArBT,YAAqBA,EA/FrBS,EAAA4D,gBAcA5D,EAAAkiD,WAAuB,EAGvBliD,EAAAstE,oBAAgC,EAsBhCttE,EAAAg7B,WAAiC,EAuBjCh7B,EAAAutE,aAAmC,EAUnCvtE,EAAAwtE,YAAkC,EAGlCxtE,EAAA+2B,SAAsB,GAAI32B,GAAAA,QAG1BJ,EAAAg3B,QAAqB,GAAI52B,GAAAA,QAIzBJ,EAAA4zC,gBAAM,GAAIn7B,GAAAA,aAGVzY,EAAAytE,UAA6D,GAAIh1D,GAAAA,aAGjEzY,EAAAqjD,QAA2D,GAAI5qC,GAAAA,aAa3DzY,EAAK0tE,oBAEL1tE,EAAK2tE,YAAc,GAAIC,IAAe5tE,EAAM2mE,EAAQpnE,EAAa66B,GACjEp6B,EAAK2tE,YAAYnqE,mBAAmBjE,EAAYjD,eAE5CqH,IACF3D,EAAK4D,cACHE,YAAaH,EAAcI,gBAC3BC,UAAWL,EAAcK,UACzBH,qBAAsBF,EAAcE,yBAtO5C,MAkH6BvD,GAA7B+sE,EAAAptE,GAeEM,OAAFC,eAAM6sE,EAANzwE,UAAA,sBAAE,WACE,MAAOX,MAAKoB,UAAYpB,KAAK4G,+CAoBjCtC,OAAAC,eAAM6sE,EAANzwE,UAAA,gBAAA,WAA4B,MAAOX,MAAK++B,eACtC,SAAat6B,GACXzE,KAAK++B,UAAYl6B,EAAAA,sBAAsBJ,GACvCzE,KAAK23C,gBAAgB52C,MACnBiyB,OAAQhzB,KACRk7C,aAAa,EACbtqB,SAAUnsB,qCAOhBH,OAAAC,eAAM6sE,EAANzwE,UAAA,wBACI,WAAsBoI,IAAf/I,KAAK63B,OACR73B,KAAK63B,OACL73B,KAAKsD,YAAYjD,cAAcuL,iBAErC,SAAUnH,GAAczE,KAAK63B,OAASpzB,mCAUxCH,OAAAC,eAAM6sE,EAANzwE,UAAA,kBAAA,WAA8B,MAAOX,MAAKsxE,aAAetxE,KAAKqxE,wBAC5D,SAAe5sE,GACbzE,KAAKsxE,YAAczsE,EAAAA,sBAAsBJ,oCAQ7CH,OAAAC,eAAM6sE,EAANzwE,UAAA,iBAAA,WAA6B,MAAOX,MAAKuxE,gBACvC,SAAc9sE,GACZzE,KAAKuxE,WAAa1sE,EAAAA,sBAAsBJ,oCAqB1CH,OAAFC,eAAM6sE,EAANzwE,UAAA,oBAAE,WACE,MAAOX,MAAK4xE,WAAa5xE,KAAK4wB,SAAS4H,WAAa,sCAuBtD44C,EAAFzwE,UAAA8wE,kBAAE,WAEE,IAAmB,GAAvBvqB,GAAA,EAAuB2qB,EAAvBZ,GAAuB/pB,EAAvB2qB,EAAA1mE,OAAuB+7C,IAAvB,CAAS,GAAM4qB,GAAfD,EAAA3qB,EACM,IAAIlnD,KAAKsD,YAAYjD,cAAc0oE,aAAa+I,IAC9C9xE,KAAKsD,YAAYjD,cAAc0xE,QAAQx7D,gBAAkBu7D,EAEzD,WADC9xE,MAAKsD,YAAwC,cAAEoB,UAAUE,IAAIktE,GAIjE9xE,KAAKsD,YAAwC,cAAEoB,UAAUE,IAAI,sBAGhEwsE,EAAFzwE,UAAAwF,YAAE,WACEnG,KAAKwxE,UAAUzwE,MAAMixE,KAAMhyE,OAC3BA,KAAK0xE,YAAYO,wBAInBb,EAAFzwE,UAAAk7C,OAAE,WACE77C,KAAK++B,WAAY,EACjB/+B,KAAK23C,gBAAgB52C,MACnBiyB,OAAQhzB,KACRk7C,aAAa,EACbtqB,UAAU,KAKdwgD,EAAFzwE,UAAAo7C,SAAE,WACE/7C,KAAK++B,WAAY,EACjB/+B,KAAK23C,gBAAgB52C,MACnBiyB,OAAQhzB,KACRk7C,aAAa,EACbtqB,UAAU,KAKdwgD,EAAFzwE,UAAAuxE,qBAAE,WACElyE,KAAK++B,WAAY,EAEjB/+B,KAAK23C,gBAAgB52C,MACnBiyB,OAAQhzB,KACRk7C,aAAa,EACbtqB,UAAU,KAKdwgD,EAAFzwE,UAAAwxE,eAAE,SAAej3B,GASb,WATJ,KAAAA,IAAiBA,GAAjB,GACIl7C,KAAK++B,WAAa/+B,KAAK4wB,SAEvB5wB,KAAK23C,gBAAgB52C,MACnBiyB,OAAQhzB,KACRk7C,YAANA,EACMtqB,SAAU5wB,KAAK++B,YAGV/+B,KAAK4wB,UAIdwgD,EAAFzwE,UAAA2c,MAAE,WACOtd,KAAKimD,YACRjmD,KAAKsD,YAAYjD,cAAcid,QAC/Btd,KAAK86B,SAAS10B,MAAM4rE,KAAMhyE,QAE5BA,KAAKimD,WAAY,GASnBmrB,EAAFzwE,UAAAgE,OAAE,WACM3E,KAAKoyE,WACPpyE,KAAKonD,QAAQrmD,MAAMixE,KAAMhyE,QAK7BoxE,EAAFzwE,UAAAK,aAAE,SAAaoH,GAEPpI,KAAKoB,WAITgH,EAAMC,iBACND,EAAM+rB,oBAIRi9C,EAAFzwE,UAAAme,eAAE,SAAe1W,GACb,IAAIpI,KAAKoB,SAIT,OAAQgH,EAAM2W,SACZ,IAAKszD,GAAAA,OACL,IAAKC,GAAAA,UAEHtyE,KAAK2E,SAELyD,EAAMC,gBACN,MACF,KAAKoX,GAAAA,MAECzf,KAAK4xE,YACP5xE,KAAKmyE,gBAAe,GAItB/pE,EAAMC,mBAKZ+oE,EAAFzwE,UAAA4xE,MAAE,WACEvyE,KAAKimD,WAAY,EACjBjmD,KAAK+6B,QAAQ30B,MAAM4rE,KAAMhyE,uBAvQ7BwB,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,yDACVU,QAAS,QAAS,WAAY,iBAC9BT,SAAU,UACVU,MACEC,MAAS,WACT29C,kBAAmB,uBACnBtzC,KAAQ,SACR4lE,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7B5uB,kBAAmB,mBACnBt7C,uBAAwB,sBACxBo+C,uBAAwB,eACxBh+C,UAAW,uBACX4zB,YAAa,yBACbF,UAAW,UACXC,SAAU,mDAhGdh7B,KAAE4L,EAAAA,aAKF5L,KAAEqF,EAAAA,SATFrF,KAAQsH,EAAAA,WA+MRtH,SAAAuH,GAAAR,aAAA/G,KAAewH,EAAAA,WAAfxH,KAA2ByH,EAAAA,OAA3BvH,MAAkCwH,2BA9ElC0pE,SAAApxE,KAAG0wB,EAAAA,aAAHxwB,MAAgBwvE,MAGhB2B,eAAArxE,KAAG0wB,EAAAA,aAAHxwB,MAAgByvE,MAGhB2B,aAAAtxE,KAAG0wB,EAAAA,aAAHxwB,MAAgB2a,EAAAA,WAAW,WAAM,MAAA02D,SAGjCniD,WAAApvB,KAAGsB,EAAAA,QAaH2B,QAAAjD,KAAGsB,EAAAA,QAeH8uE,aAAApwE,KAAGsB,EAAAA,QAUHsvE,YAAA5wE,KAAGsB,EAAAA,QAcH60C,kBAAAn2C,KAAG0B,EAAAA,SAIHsuE,YAAAhwE,KAAG0B,EAAAA,SAGHkkD,UAAA5lD,KAAG0B,EAAAA,UAhNHkuE,GAkH6BJ,kBA4Q3B,QAAF+B,GAAwBC,GAAAhzE,KAAxBgzE,YAAwBA,EA9XxB,MAkYED,GAAFpyE,UAAAK,aAAE,WACMhB,KAAKgzE,YAAYZ,WACnBpyE,KAAKgzE,YAAYruE,yBAdvBnD,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,kBACVW,MACEC,MAAS,yCACTsG,UAAW,0DAxQfrH,KAAa4vE,MAlHb2B,KCiBaE,GACT,GAAIt6D,GAAAA,eAAuC,6BCwB/Cu6D,GAAA,WACE,QAAFA,GAAqBz9B,EACAC,EACAC,EAEAC,GAJA51C,KAArBy1C,0BAAqBA,EACAz1C,KAArB01C,YAAqBA,EACA11C,KAArB21C,iBAAqBA,EAEA31C,KAArB41C,UAAqBA,EA/CrB,MAAAs9B,MAiDaC,GAAwBr9B,EAAgBo9B,IAIjDxgD,GAAe,EAGnB0gD,GAAA,WACE,QAAFA,GAEWpgD,EAEAvuB,GAFAzE,KAAXgzB,OAAWA,EAEAhzB,KAAXyE,MAAWA,EA7DX,MAAA2uE,qBAoUE,QAAFC,GAAwB/vE,EACFO,EACYF,EACR+xC,EACAC,EACZF,EAE2BG,GAPvC,GAAF7xC,GAQIC,EARJC,KAAAjE,KAQUy1C,EAA2BC,EAAaC,EAAkBC,IARpE51C,WAAwB+D,GAAxBT,YAAwBA,EACFS,EAAtBF,mBAAsBA,EACYE,EAAlCJ,KAAkCA,EAKOI,EAAzC6xC,UAAyCA,EArOzC7xC,EAAAmzC,YAAiC,gBAGjCnzC,EAAAuvE,oBAA+C,KAG/CvvE,EAAAwvE,SAAkD,GAAI3oD,SAGtD7mB,EAAAyvE,oBAAgCj4D,EAAAA,aAAaC,MAqB7CzX,EAAAwyC,KAAiB,iBAAiB7jB,KAMlC3uB,EAAA0vE,UAAc,EAMd1vE,EAAA2vE,cAAiC,KAMjC3vE,EAAA4yC,WAAe,aAGf5yC,EAAA2yC,UAAoC,aAqBpC3yC,EAAAoyC,WAA+B,EAgB/BpyC,EAAAqyC,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgCtDvyC,EAAAyvB,WAAiC,EA2CjCzvB,EAAAm7B,WAAiC,EAGjCn7B,EAAA4vE,gBAA0E,aAc1E5vE,EAAAutE,aAAmC,EA8BnCvtE,EAAAuB,OAAM,GAAIkX,GAAAA,aAOVzY,EAAA6zC,YAAsD,GAAIp7B,GAAAA,aAclDzY,EAAK6xC,YACP7xC,EAAK6xC,UAAUiC,cAAgB9zC,KAZrC,MAlOiCM,GAAjCgvE,EAAArvE,GA8DEM,OAAFC,eAAM8uE,EAAN1yE,UAAA,gBAAE,WACE,MAAOX,MAAKs4C,SAAWt4C,KAAKg4C,gBAAgBpnB,SAAW5wB,KAAKg4C,gBAAgBpnB,SAAS,oCAIvFtsB,OAAFC,eAAM8uE,EAAN1yE,UAAA,YAAE,WAA4B,MAAOX,MAAKq5C,MAAQ,KAAO,2CAOzD/0C,OAAAC,eAAM8uE,EAAN1yE,UAAA,gBAAA,WAA4B,MAAOX,MAAKm2C,eACtC,SAAa1xC,GACXzE,KAAKm2C,UAAYtxC,EAAAA,sBAAsBJ,oCAU3CH,OAAAC,eAAM8uE,EAAN1yE,UAAA,mBAAA,WAAqD,MAAOX,MAAKo2C,kBAC/D,SAAgB3hB,GACdz0B,KAAKo2C,aAAe3hB,EAChBz0B,KAAKg4C,iBAEPh4C,KAAKm4C,wDAUX7zC,OAAAC,eAAM8uE,EAAN1yE,UAAA,aAAA,WAAqB,MAAOX,MAAK63B,YAC/B,SAAUpzB,GACRzE,KAAKu0B,WAAW9vB,GAChBzE,KAAK63B,OAASpzB,mCAQhBH,OAAFC,eAAM8uE,EAAN1yE,UAAA,UAAE,WACE,MAAOX,MAAK4zE,WAAa5zE,KAAK4zE,WAAWvnD,GAAKrsB,KAAKu2C,sCAQvDjyC,OAAAC,eAAM8uE,EAAN1yE,UAAA,gBAAA,WAA4B,MAAOX,MAAKwzB,eACtC,SAAa/uB,GACXzE,KAAKwzB,UAAY3uB,EAAAA,sBAAsBJ,GACvCzE,KAAK+3C,aAAa3xC,wCAStB9B,OAAAC,eAAM8uE,EAAN1yE,UAAA,8BACI,MAAOX,MAAK4zE,WAAa5zE,KAAK4zE,WAAWz1B,YAAcn+C,KAAK83C,kBAE9D,SAAgBrzC,GACdzE,KAAK83C,aAAerzC,EACpBzE,KAAK+3C,aAAa3xC,wCAKpB9B,OAAFC,eAAM8uE,EAAN1yE,UAAA,eAAE,WACE,MAAOX,MAAK6zE,MAAMloE,KAAK,SAAAqmE,GAAQ,MAAAA,GAAK/rB,aACjCjmD,KAAK4zE,YAAc5zE,KAAK4zE,WAAW38B,yCAOxC3yC,OAAFC,eAAM8uE,EAAN1yE,UAAA,aAAE,WACE,QAASX,KAAK4zE,YAAc5zE,KAAK4zE,WAAWv6B,QAAgC,IAAtBr5C,KAAK6zE,MAAM1oE,wCAOnE7G,OAAFC,eAAM8uE,EAAN1yE,UAAA,wBAAE,WAAkC,OAAQX,KAAKq5C,OAASr5C,KAAKi3C,yCAO/D3yC,OAAAC,eAAM8uE,EAAN1yE,UAAA,gBAAA,WAA4B,MAAOX,MAAK41C,YAAc51C,KAAK41C,UAAUx0C,SAAWpB,KAAKk/B,eACnF,SAAaz6B,GAAkBzE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,oCAWxEH,OAAAC,eAAM8uE,EAAN1yE,UAAA,kBAAA,WAA8B,MAAOX,MAAKsxE,iBACxC,SAAe7sE,GAAf,GAAFV,GAAA/D,IACIA,MAAKsxE,YAAczsE,EAAAA,sBAAsBJ,GACrCzE,KAAK6zE,OACP7zE,KAAK6zE,MAAMntE,QAAQ,SAAAsrE,GAAQ,MAAAA,GAAKX,mBAAqBttE,EAAKutE,+CAMhEhtE,OAAAC,eAAM8uE,EAAN1yE,UAAA,gBAAA,SAAe8D,GACXzE,KAAK0zE,cAAgBjvE,EACrBzE,KAAKyzE,UAAYhvE,mCAInBH,OAAFC,eAAM8uE,EAAN1yE,UAAA,4BAAE,WACE,MAAO6E,GAAAA,MAAXsL,UAAA,GAAoB9Q,KAAK6zE,MAAM9iE,IAAI,SAAAihE,GAAQ,MAAAA,GAAKr6B,oDAI9CrzC,OAAFC,eAAM8uE,EAAN1yE,UAAA,wBAAE,WACE,MAAO6E,GAAAA,MAAXsL,UAAA,GAAoB9Q,KAAK6zE,MAAM9iE,IAAI,SAAAihE,GAAQ,MAAAA,GAAKl3C,6CAI9Cx2B,OAAFC,eAAM8uE,EAAN1yE,UAAA,uBAAE,WACE,MAAO6E,GAAAA,MAAXsL,UAAA,GAAoB9Q,KAAK6zE,MAAM9iE,IAAI,SAAAihE,GAAQ,MAAAA,GAAKj3C,4CAI9Cz2B,OAAFC,eAAM8uE,EAAN1yE,UAAA,yBAAE,WACE,MAAO6E,GAAAA,MAAXsL,UAAA,GAAoB9Q,KAAK6zE,MAAM9iE,IAAI,SAAAihE,GAAQ,MAAAA,GAAKR,8CA+B9C6B,EAAF1yE,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAK64C,YAAc,GAAI8L,GAAAA,gBAAyB3kD,KAAK6zE,OAClDjvB,WACA1I,0BACApD,0BAA0B94C,KAAK2D,KAAO3D,KAAK2D,KAAKc,MAAQ,OAI3DzE,KAAKwzE,oBAAsBxzE,KAAK64C,YAAYsD,OAAOx2C,UAAU,WAC3D5B,EAAK0vE,WAAa,EAClB79C,WAAW,WAAM,MAAA7xB,GAAK0vE,UAAY1vE,EAAK2vE,eAAiB,MAI1D1zE,KAAK8zE,oBAAsB9zE,KAAK6zE,MAAM3oE,QAAQzF,KAAKkW,EAAAA,UAAU,OAAOhW,UAAU,WAC5E5B,EAAKgwE,cAGLhwE,EAAKo0C,uBAGLp0C,EAAKiwE,kBAGLjwE,EAAKkwE,gCAELlwE,EAAKg0C,aAAa3xC,UAItBitE,EAAF1yE,UAAA8Z,SAAE,WACEza,KAAKg4C,gBAAkB,GAAIK,GAAAA,eAAwBr4C,KAAKs4C,aAAUvvC,IAAW,GAC7E/I,KAAK+3C,aAAa3xC,QAGpBitE,EAAF1yE,UAAA4jC,UAAE,WACMvkC,KAAK41C,WAIP51C,KAAKy4C,oBAIT46B,EAAF1yE,UAAAwF,YAAE,WACEnG,KAAKwzE,oBAAoBr8D,cAErBnX,KAAK8zE,qBACP9zE,KAAK8zE,oBAAoB38D,cAGvBnX,KAAKk0E,yBACPl0E,KAAKk0E,wBAAwB/8D,cAG/BnX,KAAKm0E,qBACLn0E,KAAK+3C,aAAa1xC,YAKpBgtE,EAAF1yE,UAAAyzE,cAAE,SAAcC,GACZr0E,KAAK4zE,WAAaS,GAOpBhB,EAAF1yE,UAAAm/C,kBAAE,SAAkBC,GAAiB//C,KAAKggD,iBAAmBD,EAAItG,KAAK,MAGpE45B,EAAF1yE,UAAA4zB,WAAE,SAAW9vB,GACLzE,KAAK6zE,OACP7zE,KAAKo5C,qBAAqB30C,GAAO,IAKrC4uE,EAAF1yE,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAK02C,UAAYjiB,GAInB4+C,EAAF1yE,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAK22C,WAAaliB,GAIpB4+C,EAAF1yE,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKoB,SAAWwzB,EAChB50B,KAAKsD,YAAYjD,cAAce,SAAWwzB,EAC1C50B,KAAK+3C,aAAa3xC,QAOpBitE,EAAF1yE,UAAAs/C,iBAAE,WAAqBjgD,KAAKsd,SAM1B+1D,EAAF1yE,UAAA2c,MAAE,WAGMtd,KAAK4zE,YAAc5zE,KAAK4zE,WAAW38B,UAE5Bj3C,KAAK6zE,MAAM1oE,OAAS,GAC7BnL,KAAK64C,YAAYmB,qBACjBh6C,KAAK+3C,aAAa3xC,SAElBpG,KAAKs0E,cACLt0E,KAAK+3C,aAAa3xC,UAKtBitE,EAAF1yE,UAAA2zE,YAAE,WACMt0E,KAAK4zE,YACP5zE,KAAK4zE,WAAWt2D,SAOpB+1D,EAAF1yE,UAAAqzD,SAAE,SAAS5rD,GACP,GAAM27D,GAAS37D,EAA2B,MAGtCA,GAAM2W,UAAYuzD,EAAAA,WAAatyE,KAAKu0E,cAAcxQ,IACpD/jE,KAAK64C,YAAYoB,oBACjB7xC,EAAMC,kBACG07D,GAAUA,EAAOr/D,UAAU8G,SAAS,cAC7CxL,KAAK64C,YAAYiB,UAAU1xC,GAC3BpI,KAAK+3C,aAAa3xC,SAQZitE,EAAZ1yE,UAAAqzE,gBAAE,WAEEh0E,KAAKyzE,UAAYzzE,KAAK0zE,gBAAwC,IAAtB1zE,KAAK6zE,MAAM1oE,QAAgB,EAAI,IAS/DkoE,EAAZ1yE,UAAA6zE,kBAAE,SAA4BxC,GAC1B,GAAIyC,GAAoBz0E,KAAK6zE,MAAM7zD,UAAUvJ,QAAQu7D,EACjDhyE,MAAK8f,cAAc20D,KACjBzC,EAAK/rB,YAEHwuB,EAAYz0E,KAAK6zE,MAAM1oE,OAAS,EAClCnL,KAAK64C,YAAY4C,cAAcg5B,GACtBA,EAAY,GAAK,GAC1Bz0E,KAAK64C,YAAY4C,cAAcg5B,EAAY,IAG3Cz0E,KAAK64C,YAAYuB,kBAAoBq6B,IACvCz0E,KAAKszE,oBAAsBmB,KASvBpB,EAAZ1yE,UAAAszE,8BAAE,WACE,GAAIS,GAAa10E,KAAK6zE,KAEtB,IAAgC,MAA5B7zE,KAAKszE,qBAA+BoB,EAAWvpE,OAAS,GAAKnL,KAAKi3C,QAAS,CAE7E,GAAM09B,GAAgBp8D,KAAKE,IAAIzY,KAAKszE,oBAAqBoB,EAAWvpE,OAAS,EAC7EnL,MAAK64C,YAAY4C,cAAck5B,EAC/B,IAAIC,GAAY50E,KAAK64C,YAAYqB,UAE7B06B,IACFA,EAAUt3D,QAKdtd,KAAKszE,oBAAsB,MASrBD,EAAV1yE,UAAAmf,cAAA,SAAwBxQ,GACpB,MAAOA,IAAS,GAAKA,EAAQtP,KAAK6zE,MAAM1oE,QAGlCkoE,EAAV1yE,UAAA4zE,cAAA,SAAwBvvE,GACpB,GAAIA,GAA8C,UAAnCA,EAAQkiC,SAAS3wB,cAA2B,CAEzD,OADS,EACK9R,MAGhB,OAAO,GAGT4uE,EAAF1yE,UAAAy4C,qBAAE,SAAqB30C,EAAYy2C,GAAjC,GAAFn3C,GAAA/D,IAII,QAJJ,KAAAk7C,IAAmCA,GAAnC,GACIl7C,KAAKo7C,kBACLp7C,KAAK6zE,MAAMntE,QAAQ,SAAAsrE,GAAQ,MAAAA,GAAKj2B,aAE5Bn1B,MAAMC,QAAQpiB,GAChBA,EAAMiC,QAAQ,SAAA20C,GAAgB,MAAAt3C,GAAKu3C,aAAaD,EAAcH,KAC9Dl7C,KAAKu7C,kBACA,CACL,GAAMs5B,GAAoB70E,KAAKs7C,aAAa72C,EAAOy2C,EAI/C25B,IACE35B,GACFl7C,KAAK64C,YAAY4C,cAAco5B,KAU/BxB,EAAV1yE,UAAA26C,aAAA,SAAuB72C,EAAYy2C,kBAAnC,KAAAA,IAAmCA,GAAnC,EAEI,IAAM25B,GAAoB70E,KAAK6zE,MAAM7tE,KAAK,SAAAgsE,GACxC,MAAqB,OAAdA,EAAKvtE,OAAiBV,EAAKqyC,aAAa47B,EAAKvtE,MAAQA,IAQ9D,OALIowE,KACF35B,EAAc25B,EAAkB3C,uBAAyB2C,EAAkBh5B,SAC3E77C,KAAKg4C,gBAAgB6D,OAAOg5B,IAGvBA,GAGDxB,EAAV1yE,UAAAw3C,0CAGIhgC,SAAQC,UAAUC,KAAK,YACjBtU,EAAK6xC,WAAa7xC,EAAK8zB,UACzB9zB,EAAKq1C,qBAAqBr1C,EAAK6xC,UAAY7xC,EAAK6xC,UAAUnxC,MAAQV,EAAK8zB,QAAQ,GAC/E9zB,EAAKg0C,aAAa3xC,WAShBitE,EAAV1yE,UAAAy6C,gBAAA,SAA0BU,GACtB97C,KAAKg4C,gBAAgB/P,QACrBjoC,KAAK6zE,MAAMntE,QAAQ,SAAAsrE,GACbA,IAASl2B,GACXk2B,EAAKj2B,aAGT/7C,KAAK+3C,aAAa3xC,QAOZitE,EAAV1yE,UAAA46C,iCACQv7C,MAAKm2C,YACPn2C,KAAKg4C,gBAAgB/P,QAErBjoC,KAAK6zE,MAAMntE,QAAQ,SAAAsrE,GACbA,EAAKphD,UACP7sB,EAAKi0C,gBAAgB6D,OAAOm2B,KAGhChyE,KAAK+3C,aAAa3xC,SAKditE,EAAV1yE,UAAA+7C,kBAAA,SAA4BC,GACxB,GAAIC,GAAmB,IAGrBA,GADEh2B,MAAMC,QAAQ7mB,KAAK4wB,UACP5wB,KAAK4wB,SAAS7f,IAAI,SAAAihE,GAAQ,MAAAA,GAAKvtE,QAE/BzE,KAAK4wB,SAAW5wB,KAAK4wB,SAASnsB,MAAQk4C,EAEtD38C,KAAK63B,OAAS+kB,EACd58C,KAAKsF,OAAOvE,KAAK,GAAIqyE,IAAkBpzE,KAAM48C,IAC7C58C,KAAK43C,YAAY72C,KAAK67C,GACtB58C,KAAK02C,UAAUkG,GACf58C,KAAK6D,mBAAmBqB,gBAI1BmuE,EAAF1yE,UAAA4xE,MAAE,WAAA,GAAFxuE,GAAA/D,IACIA,MAAK64C,YAAY4C,eAAe,GAC3Bz7C,KAAKoB,WACJpB,KAAK4zE,WAKPh+C,WAAW,WACJ7xB,EAAKkzC,SACRlzC,EAAK+wE,mBAKT90E,KAAK80E,mBAMXzB,EAAF1yE,UAAAm0E,eAAE,WACE90E,KAAK22C,aACL32C,KAAK6D,mBAAmBqB,eACxBlF,KAAK+3C,aAAa3xC,QAGZitE,EAAV1yE,UAAAozE,uBACI/zE,KAAKm0E,qBACLn0E,KAAK+0E,sBACL/0E,KAAKg1E,0BACLh1E,KAAKi1E,yBAIC5B,EAAV1yE,UAAAwzE,8BACQn0E,KAAKk1E,yBACPl1E,KAAKk1E,uBAAuB/9D,cAC5BnX,KAAKk1E,uBAAyB,MAG5Bl1E,KAAKm1E,wBACPn1E,KAAKm1E,sBAAsBh+D,cAC3BnX,KAAKm1E,sBAAwB,MAG3Bn1E,KAAKo1E,6BACPp1E,KAAKo1E,2BAA2Bj+D,cAChCnX,KAAKo1E,2BAA6B,OAK9B/B,EAAV1yE,UAAAq0E,6CACIh1E,MAAKo1E,2BAA6Bp1E,KAAKq1E,qBAAqB1vE,UAAU,SAAAyC,GACpEA,EAAM4qB,OAAOpC,SACT7sB,EAAKi0C,gBAAgB6D,OAAOzzC,EAAM4qB,QAClCjvB,EAAKi0C,gBAAgB+D,SAAS3zC,EAAM4qB,QAGnCjvB,EAAKu0C,UACRv0C,EAAK8vE,MAAMntE,QAAQ,SAAAsrE,IACZjuE,EAAKi0C,gBAAgByE,WAAWu1B,IAASA,EAAKphD,UACjDohD,EAAKj2B,aAKP3zC,EAAM8yC,aACRn3C,EAAK24C,uBAMH22B,EAAV1yE,UAAAo0E,yCACI/0E,MAAKk1E,uBAAyBl1E,KAAKs1E,iBAAiB3vE,UAAU,SAAAyC,GAC5D,GAAIqsE,GAAoB1wE,EAAK8vE,MAAM7zD,UAAUvJ,QAAQrO,EAAM4pE,KAEvDjuE,GAAK+b,cAAc20D,IACrB1wE,EAAK80C,YAAY08B,sBAAsBd,GAEzC1wE,EAAKg0C,aAAa3xC,SAGpBpG,KAAKm1E,sBAAwBn1E,KAAKw1E,gBAAgB7vE,UAAU,WAC1D5B,EAAKwuE,QACLxuE,EAAKg0C,aAAa3xC,UAIditE,EAAV1yE,UAAAs0E,2CACIj1E,MAAKk0E,wBAA0Bl0E,KAAKy1E,kBAAkB9vE,UAAU,SAAAyC,GAC9DrE,EAAKywE,kBAAkBpsE,EAAM4pE,wBAnqBnCxwE,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEE,SAAU,qEACVD,SAAU,cACVU,MACF49C,kBAAyB,YACnBO,0BAAN,2BACIJ,uBAAJ,sBACI53C,uBAAJ,sBACI63C,sBAAJ,aACIE,8BAAJ,WACIxzC,cAAJ,OACI0oE,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClC14C,0BAAJ,kBACI36B,MAAJ,gBACIg6B,UAAJ,UACIC,SAAJ,UACIC,YAAJ,mBACI1G,OAAQ,QAEZ9oB,YAAAC,QAAA4zC,GAAA3zC,YAAAkmE,IACAvxE,QAAA,6tEACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAxEAZ,KAAEqQ,EAAAA,eAAFtJ,aAAA/G,KAAAwH,EAAAA,aAJAxH,KAAEw/C,EAAAA,OAAFz4C,aAAA/G,KAAAwH,EAAAA,aAPAxH,KAAQy/C,EAAAA,mBAAR14C,aAAA/G,KAAAwH,EAAAA,aAsBAxH,KAA6DqR,KAA7DrR,KAA8B2/C,EAAAA,UAA9B54C,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAqzC,EAAAA,UAAAw+B,EAAkD3wE,6EAuIlD++C,cAAAjgD,KAAAsB,EAAAA,QAGA2B,QAAAjD,KAAAsB,EAAAA,QAYAszB,WAAA50B,KAAAsB,EAAAA,QAeAq7C,cAAG38C,KAAHsB,EAAAA,QAoBA1B,WAAAI,KAAGsB,EAAAA,QAYH6wE,kBAAAnyE,KAAAsB,EAAAA,MAAApB,MAAA,sBAkCAkwE,aAAApwE,KAAAsB,EAAAA,QAMA0E,WAAAhG,KAAAsB,EAAAA,QAMAwC,SAAA9D,KAAA0B,EAAAA,SAUA00C,cAAAp2C,KAAA0B,EAAAA,SA2BA2wE,QAAAryE,KAAAqM,EAAAA,gBAAAnM,MAAA0vE,OAWAiC,OC1SI3gD,GAAe,gBAiEjB,QAAFmjD,GACcvyE,EACiCwjC,GADjC9mC,KAAdsD,YAAcA,EACiCtD,KAA/C8mC,gBAA+CA,EA/C/C9mC,KAAAi3C,SAAqB,EAkBrBj3C,KAAA81E,YAAwB,EASxB91E,KAAA+1E,kBAAgC/1E,KAAK8mC,gBAAgBivC,kBAIrD/1E,KAAAg2E,QAA6C,GAAIx5D,GAAAA,aAGjDxc,KAAAm+C,YAAiC,GAGjCn+C,KAAAqsB,GAAwB,uBAAuBqG,KAW3C1yB,KAAK+zB,cAAgB/zB,KAAKsD,YAA6C,cA5F3E,MAiDAgB,QAAAC,eAAMsxE,EAANl1E,UAAA,gBAAA,SAAe8D,GACPA,IACFzE,KAAKi2E,UAAYxxE,EACjBzE,KAAKi2E,UAAU7B,cAAcp0E,wCAQnCsE,OAAAC,eAAMsxE,EAANl1E,UAAA,iBAAA,WAA6B,MAAOX,MAAK81E,gBACvC,SAAcrxE,GAAkBzE,KAAK81E,WAAajxE,EAAAA,sBAAsBJ,oCAuBxEH,OAAFC,eAAMsxE,EAANl1E,UAAA,aAAE,WAAuB,OAAQX,KAAK+zB,cAActvB,uCAYlDoxE,EAAFl1E,UAAAqzD,SAAE,SAAS5rD,GACPpI,KAAKk2E,aAAa9tE,IAIpBytE,EAAFl1E,UAAA4xE,MAAE,WACMvyE,KAAKm2E,WACPn2E,KAAKk2E,eAEPl2E,KAAKi3C,SAAU,EAEVj3C,KAAKi2E,UAAUh/B,SAClBj3C,KAAKi2E,UAAU1D,QAEjBvyE,KAAKi2E,UAAUl+B,aAAa3xC,QAG9ByvE,EAAFl1E,UAAAy1E,OAAE,WACEp2E,KAAKi3C,SAAU,EACfj3C,KAAKi2E,UAAUl+B,aAAa3xC,QAI9ByvE,EAAFl1E,UAAAu1E,aAAE,SAAa9tE,IACNpI,KAAK+zB,cAActvB,OAAW2D,GACjCpI,KAAKi2E,UAAUjiB,SAAS5rD,KAErBA,GAASpI,KAAK+1E,kBAAkBt/D,QAAQrO,EAAM2W,UAAY,KAC7D/e,KAAKg2E,QAAQj1E,MAAOg3B,MAAO/3B,KAAK+zB,cAAetvB,MAAOzE,KAAK+zB,cAActvB,QAErE2D,GACFA,EAAMC,mBAKZwtE,EAAFl1E,UAAA2tD,SAAE,WAEEtuD,KAAKi2E,UAAUl+B,aAAa3xC,QAI9ByvE,EAAFl1E,UAAA2c,MAAE,WAAgBtd,KAAK+zB,cAAczW,wBA5GrC9b,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,yBACVC,SAAU,gCACVU,MACEC,MAAS,mCACTk6B,YAAa,mBACbD,SAAU,UACVD,UAAW,WACXizB,UAAW,aACXz5B,OAAQ,8CA9BZv0B,KAAmB4L,EAAAA,aAkFnB5L,SAAAuH,GAAAR,aAAA/G,KAAKyH,EAAAA,OAALvH,MAAYuxE,2BA3CZoD,WAAA70E,KAAGsB,EAAAA,MAAHpB,MAAS,qBAWTy0E,YAAA30E,KAAGsB,EAAAA,MAAHpB,MAAS,2BAWTq0E,oBAAAv0E,KAAGsB,EAAAA,MAAHpB,MAAS,mCAITs0E,UAAAx0E,KAAG0B,EAAAA,OAAHxB,MAAU,0BAIVy8C,cAAA38C,KAAGsB,EAAAA,QAGHupB,KAAA7qB,KAAGsB,EAAAA,SAjFH+yE,KCgBMS,IACJjD,GACAjC,GACAyE,GACA9C,GACA7B,GACAC,IAUFoF,IACQR,mBAAoBv2D,EAAAA,oCAjC5B,sBAyBAhe,KAAC4H,EAAAA,SAAD1H,OACEiI,QAAS2sE,GACTvsE,aAAcusE,GACdrpE,WACE4F,IAEE3F,QAAS+lE,GACTuD,SAAQ,SAhCdC,KCiCA9O,GAAA,wBAcA3nE,KAAA4M,KAAsB,SAGtB5M,KAAA2mB,WAAmC,GAGnC3mB,KAAAklC,aAA0B,EAG1BllC,KAAAyzC,cAA2B,GAG3BzzC,KAAA6kC,cAA2B,EAG3B7kC,KAAAiZ,MAAmB,GAGnBjZ,KAAAO,OAAoB,GASpBP,KAAAuoE,SAA+B,OAS/BvoE,KAAAwN,KAAoB,KAMpBxN,KAAA02E,gBAAoC,KAGpC12E,KAAA2zB,UAA8B,KAG9B3zB,KAAA22E,WAAwB,EAMxB32E,KAAAgmE,mBAAgC,EArGhC,MAAA2B,MCiBaiP,IAIXC,YAAa97D,EAAAA,QAAQ,eAKnBC,EAAAA,MAAM,QAAS1a,EAAAA,OAAQ2a,UAAW,OAAQsJ,QAAS,KACnDvJ,EAAAA,MAAM,OAAQ1a,EAAAA,OAAQ2a,UAAW,oCAAqCsJ,QAAS,KAC/EvJ,EAAAA,MAAM,OAAQ1a,EAAAA,OAAQ2a,UAAW,yBAA0BsJ,QAAS,KACpErJ,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,6DrBmE/B,QAAFmqD,GACYhiE,EACAm+B,EACA59B,EAC8B+G,GAJxC,GAAF7G,GAMIC,EANJC,KAAAjE,OAAAA,WACY+D,GAAZT,YAAYA,EACAS,EAAZ09B,kBAAYA,EACA19B,EAAZF,mBAAYA,EAC8BE,EAA1C6G,UAA0CA,EArB1C7G,EAAA+yE,qCAAqE,KAMrE/yE,EAAAgzE,OAAsC,QAGtChzE,EAAA+hE,uBAA2B,GAAItpD,GAAAA,aAG/BzY,EAAA2lE,gBAAmC,OAlBnC,MAFwCrlE,GAAxCihE,EAAAthE,GAsCEshE,EAAF3kE,UAAA+kB,sBAAE,SAAyBC,GAMvB,MALI3lB,MAAK8lB,cAAc/J,eACrBi7D,IAGFh3E,KAAKi3E,gCACEj3E,KAAK8lB,cAAcJ,sBAAsBC,IAOlD2/C,EAAF3kE,UAAAolB,qBAAE,SAAwBJ,GAMtB,MALI3lB,MAAK8lB,cAAc/J,eACrBi7D,IAGFh3E,KAAKi3E,gCACEj3E,KAAK8lB,cAAcC,qBAAqBJ,IAIzC2/C,EAAV3kE,UAAAuhC,sBACSliC,KAAKiiC,aACRjiC,KAAKiiC,WAAajiC,KAAKyhC,kBAAkBhX,OAAOzqB,KAAKsD,YAAYjD,gBAM/DL,KAAKooB,QAAQuuD,WACf32E,KAAKiiC,WAAWi1C,gCAKZ5R,EAAV3kE,UAAAwhC,yBACI,GAAMg1C,GAAUn3E,KAAK82E,oCAGjBK,IAAoC,kBAAlBA,GAAQ75D,OAC5B65D,EAAQ75D,QAGNtd,KAAKiiC,YACPjiC,KAAKiiC,WAAWS,WAKZ4iC,EAAV3kE,UAAAs2E,mDACQj3E,MAAK4K,YACP5K,KAAK82E,qCAAuC92E,KAAK4K,UAAsC,cAGnF5K,KAAKsD,YAAYjD,cAAcid,OAIjCnF,QAAQC,UAAUC,KAAK,WAAM,MAAAtU,GAAKT,YAAYjD,cAAcid,YAMlEgoD,EAAF3kE,UAAAykD,iBAAE,SAAiBh9C,GACO,UAAlBA,EAAM2U,QACR/c,KAAKkiC,aACsB,SAAlB95B,EAAM2U,SACf/c,KAAKmiC,gBAGPniC,KAAK8lE,uBAAuB/kE,KAAKqH,IAInCk9D,EAAF3kE,UAAAy2E,kBAAE,SAAkBhvE,GAChBpI,KAAK8lE,uBAAuB/kE,KAAKqH,IAInCk9D,EAAF3kE,UAAAwlE,oBAAE,WACEnmE,KAAK+2E,OAAS,OAId/2E,KAAK6D,mBAAmBqB,+BApJ5B1D,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEE,SAAU,8CACVC,QAAF;srCACEC,cAAFC,EAAAA,kBAAAC,mFAKEK,MACFC,MAAe,uBACTmkD,SAAN,KACI9lB,YAAJ,MACI5zB,cAAJ,gBACIozC,yBAAJ,8CACID,oBAAJ,qBACIM,0BAAJ,mCACI0kB,iBAAJ,SACIC,uBAAJ,4BACIC,sBAAJ,kHAvDA7jE,KAAEsF,EAAAA,oBAmBFtF,SAAmBuH,GAAnBR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAuK,EAAAA,eAsEAq5D,EAAA5iE,6EA3BA4iE,uBCrDI7S,GAAW,EAKf8S,GAAA,WAsBE,QAAFA,GACYtiD,EACDuiD,EACPC,EACSp5C,OAAb,KAAAA,IAAAA,EAAA,cAAwComC,KAJtC,IAAF1uD,GAAA/D,IACYA,MAAZijB,YAAYA,EACDjjB,KAAXwlE,mBAAWA,EAEExlE,KAAbqsB,GAAaA,EArBbrsB,KAAA6kC,aAAsC7kC,KAAKwlE,mBAAmBp9C,QAAQyc,aAGtE7kC,KAAA0lE,WAAgC,GAAIvhE,GAAAA,QAGpCnE,KAAA2lE,aAAkC,GAAIxhE,GAAAA,QAGtCnE,KAAA4lE,aAAkC,GAAIzhE,GAAAA,QAMtCnE,KAAA6lE,iBAA+CtqD,EAAAA,aAAaC,MASxDgqD,EAAmBptB,IAAM/rB,EAGzBm5C,EAAmBM,uBAAuBrgE,KACxC6F,EAAAA,OAAO,SAAAlD,GAAS,MAAoB,SAApBA,EAAMirD,WAA0C,UAAlBjrD,EAAM2U,UACpD5N,EAAAA,KAAK,IAENxJ,UAAU,WACT5B,EAAK2hE,WAAWt/D,OAChBrC,EAAK2hE,WAAWr/D,aAIlBm/D,EAAmBM,uBAAuBrgE,KACxC6F,EAAAA,OAAO,SAAAlD,GAAS,MAAoB,SAApBA,EAAMirD,WAA0C,SAAlBjrD,EAAM2U,UACpD5N,EAAAA,KAAK,IAENxJ,UAAU,WACT5B,EAAKkf,YAAYC,UACjBnf,EAAK8hE,iBAAiB1uD,cACtBpT,EAAK4hE,aAAav/D,KAAKrC,EAAKgiE,SAC5BhiE,EAAK4hE,aAAat/D,WAClBtC,EAAKs/D,kBAAiB,OAGxBpgD,EAAYygD,gBACTj+D,KAAK6F,EAAAA,OAAO,SAAAlD,GAAS,MAAAA,GAAM2W,UAAYypB,EAAAA,SAAWzkC,EAAK8gC,gBACvDl/B,UAAU,WAAM,MAAA5B,GAAKq+B,UAEpBqjC,IAIFzlE,KAAK6lE,iBAAmBJ,EAAS9/D,UAAU,WACrC5B,EAAKyhE,mBAAmBp9C,QAAQ49C,mBAClCjiE,EAAKq+B,WAzFf,MAmGEmjC,GAAF5kE,UAAAyhC,MAAE,SAAM6jC,GAAN,GAAFliE,GAAA/D,IACIA,MAAK+lE,QAAUE,EAGfjmE,KAAKwlE,mBAAmBM,uBAAuBrgE,KAC7C6F,EAAAA,OAAO,SAAAlD,GAAS,MAAoB,UAApBA,EAAMirD,YACtBlkD,EAAAA,KAAK,IAENxJ,UAAU,WACT5B,EAAK6hE,aAAax/D,KAAK6/D,GACvBliE,EAAK6hE,aAAav/D,WAClBtC,EAAKkf,YAAYijD,mBAGnBlmE,KAAKwlE,mBAAmBW,uBAM1BZ,EAAF5kE,UAAAylE,UAAE,WACE,MAAOpmE,MAAK0lE,WAAWjiD,gBAMzB8hD,EAAF5kE,UAAAyiE,YAAE,WACE,MAAOpjE,MAAK2lE,aAAaliD,gBAM3B8hD,EAAF5kE,UAAA0lE,YAAE,WACE,MAAOrmE,MAAK4lE,aAAaniD,gBAM3B8hD,EAAF5kE,UAAA+iC,cAAE,WACE,MAAO1jC,MAAKijB,YAAYygB,iBAM1B6hC,EAAF5kE,UAAA+iE,cAAE,WACE,MAAO1jE,MAAKijB,YAAYygD,iBAO1B6B,EAAF5kE,UAAA8mC,eAAE,SAAertB,GACb,GAAIwuB,GAAW5oC,KAAKsmE,sBAgBpB,OAdIlsD,KAAaA,EAASrB,MAAQqB,EAASiQ,OACzCjQ,EAASrB,KAAO6vB,EAAS7vB,KAAKqB,EAASrB,MAAQ6vB,EAASve,MAAMjQ,EAASiQ,OAEvEue,EAASte,qBAGPlQ,IAAaA,EAASmQ,KAAOnQ,EAASoQ,QACxCpQ,EAASmQ,IAAMqe,EAASre,IAAInQ,EAASmQ,KAAOqe,EAASpe,OAAOpQ,EAASoQ,QAErEoe,EAAS29B,mBAGXvmE,KAAKijB,YAAYwkB,iBAEVznC,MAQTulE,EAAF5kE,UAAA6lE,WAAE,SAAWvtD,EAAwB1Y,GAGjC,WAHJ,KAAA0Y,IAAaA,EAAb,YAAA,KAAA1Y,IAAqCA,EAArC,QACIP,KAAKsmE,uBAAuBrtD,MAAMA,GAAO1Y,OAAOA,GAChDP,KAAKijB,YAAYwkB,iBACVznC,MAIDulE,EAAV5kE,UAAA2lE,gCACI,MAAOtmE,MAAKijB,YAAY2mB,YAAsD,kBA5LlF27B,KCqCakB,GAAkB,GAAI9tD,GAAAA,eAAoB,iBAG1C+tD,GACT,GAAI/tD,GAAAA,eAAgC,8BAG3BguD,GACT,GAAIhuD,GAAAA,eAAqC,8BACvCC,WAAY,OACZC,QAAS,WACP,GAAMotB,GAAUC,EAAAA,OAAOlb,EAAAA,QACvB,OAAO,YAAM,MAAAib,GAAQE,iBAAiBygC,YAWjCC,IACX35D,QAASy5D,GACT34C,MAAOhD,EAAAA,SACPiD,WAAY64C,iBAqCZ,QAAFlD,GACcx8C,EACAE,EACYy/C,EACoCjgC,EACZD,EACZmgC,EACxBC,GAPZ,GAAFljE,GAAA/D,IACcA,MAAdonB,SAAcA,EACApnB,KAAdsnB,UAAcA,EACYtnB,KAA1B+mE,UAA0BA,EACoC/mE,KAA9D8mC,gBAA8DA,EACZ9mC,KAAlD6mC,gBAAkDA,EACZ7mC,KAAtCgnE,cAAsCA,EACxBhnE,KAAdinE,kBAAcA,EAnCdjnE,KAAAknE,2BACAlnE,KAAAmnE,2BAAgD,GAAIhjE,GAAAA,QACpDnE,KAAAonE,sBAA2C,GAAIjjE,GAAAA,QAC/CnE,KAAAqnE,oBAAgC,GAAIz7C,KAqBpC5rB,KAAAsnE,eAA8ClwB,EAAAA,MAAY,WAAM,MAAArzC,GAAKwjE,YAAYp8D,OAC3EpH,EAAKyjE,gBACLzjE,EAAKyjE,gBAAgB/hE,KAAKkW,EAAAA,cAAU5S,OAlG1C,MA8EEzE,QAAFC,eAAMq/D,EAANjjE,UAAA,mBAAE,WACE,MAAOX,MAAKgnE,cAAgBhnE,KAAKgnE,cAAcO,YAAcvnE,KAAKknE,yDAIpE5iE,OAAFC,eAAMq/D,EAANjjE,UAAA,iBAAE,WACE,MAAOX,MAAKgnE,cAAgBhnE,KAAKgnE,cAAcZ,UAAYpmE,KAAKonE,uDAGlE9iE,OAAFC,eAAMq/D,EAANjjE,UAAA,uBAAE,WACE,GAAMgnB,GAAS3nB,KAAKgnE,aACpB,OAAOr/C,GAASA,EAAO6/C,gBAAkBxnE,KAAKmnE,4DA2BhDvD,EAAFjjE,UAAAunB,KAAE,SAAiBu/C,EACT1/C,GADR,GAAFhkB,GAAA/D,IAKI,IAFA+nB,EAAS2/C,EAAqB3/C,EAAQ/nB,KAAK8mC,iBAAmB,GAAI6gC,KAE9D5/C,EAAOsE,IAAMrsB,KAAK4nE,cAAc7/C,EAAOsE,IACzC,KAAMtF,OAAM,mBAAmBgB,EAAOsE,GAA5C,kDAGI,IAAM7D,GAAaxoB,KAAK+oB,eAAehB,GACjC8/C,EAAkB7nE,KAAK8nE,uBAAuBt/C,EAAYT,GAC1DggD,EACF/nE,KAAKgoE,qBAAwBP,EAAwBI,EAAiBr/C,EAAYT,EAWtF,OARK/nB,MAAKunE,YAAYp8D,QACpBnL,KAAKioE,+CAGPjoE,KAAKunE,YAAYr4D,KAAK64D,GACtBA,EAAU3E,cAAcz9D,UAAU,WAAM,MAAA5B,GAAKmkE,kBAAkBH,KAC/D/nE,KAAKomE,UAAUhgE,KAAK2hE,GAEbA,GAMTnE,EAAFjjE,UAAAwnE,SAAE,WAGE,IAFA,GAAIn4D,GAAIhQ,KAAKunE,YAAYp8D,OAElB6E,KAKLhQ,KAAKunE,YAAYv3D,GAAGoyB,SAQxBwhC,EAAFjjE,UAAAinE,cAAE,SAAcv7C,GACZ,MAAOrsB,MAAKunE,YAAYvhE,KAAK,SAAAoiE,GAAU,MAAAA,GAAO/7C,KAAOA,KAQ/Cu3C,EAAVjjE,UAAAooB,eAAA,SAAyBhB,GACrB,GAAM+B,GAAgB9pB,KAAKszC,kBAAkBvrB,EAC7C,OAAO/nB,MAAKonB,SAASqD,OAAOX,IAQtB85C,EAAVjjE,UAAA2yC,kBAAA,SAA4B+0B,GACxB,GAAMrtD,GAAQ,GAAI+O,GAAAA,eAChBC,iBAAkBhqB,KAAKonB,SAAShN,WAAW6P,SAC3C0f,eAAgB0+B,EAAa1+B,gBAAkB3pC,KAAK6mC,kBACpDlgB,WAAY0hD,EAAa1hD,WACzBue,YAAamjC,EAAanjC,YAC1BxvB,UAAW2yD,EAAa3yD,UACxBw/B,SAAUmzB,EAAanzB,SACvBozB,UAAWD,EAAaC,UACxBC,SAAUF,EAAaE,SACvBC,UAAWH,EAAaG,WAO1B,OAJIH,GAAa50B,gBACfz4B,EAAMy4B,cAAgB40B,EAAa50B,eAG9Bz4B,GASD4oD,EAAVjjE,UAAAmnE,uBAAA,SAAiC7hC,EAAqBle,GAClD,GAAIU,GAAkB,GAAIC,GAAAA,gBAAgB48C,GAAoBv9C,EAAOrO,kBACjEiP,EAAiDsd,EAAQjqB,OAAOyM,EAGpE,OAFAE,GAAaC,SAASR,QAAUL,EAEzBY,EAAaC,UAYdg7C,EAAVjjE,UAAAqnE,qBACA,SAAMP,EACAI,EACAr/C,EACAT,GAIF,GAAMggD,GAAY,GAAIxC,IAAgB/8C,EAAYq/C,EAAiB7nE,KAAK+mE,UAAWh/C,EAAOsE,GAW1F,IARItE,EAAOmd,aACT1c,EAAWkb,gBAAgB/9B,UAAU,WAC9BoiE,EAAUljC,cACbkjC,EAAU3lC,UAKZqlC,YAAkC9tD,GAAAA,YACpCkuD,EAAgB9hD,qBACd,GAAIrL,GAAAA,eAAkB+sD,EAAsB,MACnCx+C,UAAWlB,EAAOva,KAAMu6D,UAFzCA,SAGW,CACL,GAAM7+C,GAAWlpB,KAAKmpB,gBAAmBpB,EAAQggD,EAAWF,GACtDz+C,EAAay+C,EAAgBniD,sBAC/B,GAAIgD,GAAAA,gBAAgB++C,MAAwB1+D,GAAWmgB,GAC3D6+C,GAAU1E,kBAAoBj6C,EAAWR,SAO3C,MAJAm/C,GACGvB,WAAWz+C,EAAO9O,MAAO8O,EAAOxnB,QAChCknC,eAAe1f,EAAO3N,UAElB2tD,GAWDnE,EAAVjjE,UAAAwoB,gBACA,SAAMpB,EACAggD,EACAF,GAEF,GAAMn9C,GAAe3C,GAAUA,EAAOrO,kBAAoBqO,EAAOrO,iBAAiBwP,SAC5EyB,EAAkB,GAAIC,QAkB5B,OAZAD,GACGE,IAAIy6C,GAAoBuC,GACxBh9C,IAAI47C,GAAiB1+C,EAAOva,MAC5Bqd,IAAI06C,GAAcwC,GAEhBr9C,GAAiBA,EAAa1iB,IAAI6J,EAAAA,eAAgB,OACrD8Y,EAAgBE,IAAIhZ,EAAAA,gBAClBpN,MAAOsjB,EAAOrS,UACdpQ,OAAQC,EAAAA,OAIL,GAAIulB,GAAAA,eAAeJ,GAAgB1qB,KAAKsnB,UAAWqD,IAOpDi5C,EAAVjjE,UAAAunE,kBAAA,SAA4BH,GACxB,GAAMz4D,GAAQtP,KAAKunE,YAAY9wD,QAAQsxD,EAEnCz4D,IAAS,IACXtP,KAAKunE,YAAYtvD,OAAO3I,EAAO,GAI1BtP,KAAKunE,YAAYp8D,SACpBnL,KAAKqnE,oBAAoB3gE,QAAQ,SAAC+hE,EAAezjE,GAC3CyjE,EACFzjE,EAAQokD,aAAa,cAAeqf,GAEpCzjE,EAAQ8jD,gBAAgB,iBAI5B9oD,KAAKqnE,oBAAoBp/B,QACzBjoC,KAAKwnE,gBAAgBphE,UAQnBw9D,EAAVjjE,UAAAsnE,wDACI,GAAMS,GAAmB1oE,KAAKinE,kBAAkB0B,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAAcx5D,SAEvCY,EAAI64D,EAAS19D,OAAS,EAAG6E,GAAK,EAAGA,IAAK,CAC7C,GAAI84D,GAAUD,EAAS74D,EAEnB84D,KAAYJ,GACO,WAArBI,EAAQ5hC,UACa,UAArB4hC,EAAQ5hC,UACP4hC,EAAQC,aAAa,eAEtB/oE,KAAKqnE,oBAAoBx8C,IAAIi+C,EAASA,EAAQE,aAAa,gBAC3DF,EAAQ1f,aAAa,cAAe,0BA/Q9C5nD,KAACupB,EAAAA,iDA5DDvpB,KAAEwpB,EAAAA,UAcFxpB,KAAE0pB,EAAAA,WAPF1pB,KAAQynE,EAAAA,SAAR1gE,aAAA/G,KAsFOwH,EAAAA,aACPxH,SAAAuH,GAAAR,aAAA/G,KAAOwH,EAAAA,WAAPxH,KAAmByH,EAAAA,OAAnBvH,MAA0BglE,QAC1BllE,SAAAuH,GAAAR,aAAA/G,KAAOyH,EAAAA,OAAPvH,MAAcilE,QAlCdnlE,KAAaoiE,EAAbr7D,aAAA/G,KAmCOwH,EAAAA,WAnCPxH,KAmCmB4pB,EAAAA,aA9FnB5pB,KAAE0nE,EAAAA,oBAZFtF,KCqBIuF,GAAmB,gBAuBrB,QAAFC,GACuBrB,EACXzkE,EACA+lE,GAFWrpE,KAAvB+nE,UAAuBA,EACX/nE,KAAZsD,YAAYA,EACAtD,KAAZqpE,QAAYA,EAVZrpE,KAAA2zB,UAA2C,eArC3C,MAiDEy1C,GAAFzoE,UAAA8Z,SAAE,WACOza,KAAK+nE,YAMR/nE,KAAK+nE,UAAYuB,EAAiBtpE,KAAKsD,YAAatD,KAAKqpE,QAAQ9B,eAIrE6B,EAAFzoE,UAAA4Z,YAAE,SAAYrP,GACV,GAAMq+D,GAAgBr+D,EAA1B,iBAAqDA,EAArD,qBAEQq+D,KACFvpE,KAAKimE,aAAesD,EAAcluB,8BAtCxC75C,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,mDACVC,SAAU,iBACVU,MACEuG,UAAW,gCACXs3C,oBAAqB,YACrB3+C,KAAQ,kDAdZA,KAAQ+jE,GAARh9D,aAAA/G,KA2BKwH,EAAAA,aA9BLxH,KAAE4L,EAAAA,aAEF5L,KAAQoiE,wBAoBRjwC,YAAAnyB,KAAGsB,EAAAA,MAAHpB,MAAS,gBAGTukE,eAAAzkE,KAAGsB,EAAAA,MAAHpB,MAAS,sBAET8nE,kBAAAhoE,KAAGsB,EAAAA,MAAHpB,MAAS,qBA1CT0nE,mBAmFE,QAAFK,GACwBxG,EACZ3/D,EACA+lE,GAFYrpE,KAAxBijE,WAAwBA,EACZjjE,KAAZsD,YAAYA,EACAtD,KAAZqpE,QAAYA,EALZrpE,KAAAqsB,GAAgB,oBAAoB88C,KAjFpC,MAwFEM,GAAF9oE,UAAA8Z,SAAE,WAAA,GAAF1W,GAAA/D,IACSA,MAAKijE,aACRjjE,KAAKijE,WAAaqG,EAAiBtpE,KAAKsD,YAAatD,KAAKqpE,QAAQ9B,cAGhEvnE,KAAKijE,YACP9qD,QAAQC,UAAUC,KAAK,WACrB,GAAM2Q,GAAYjlB,EAAKk/D,WAAWuC,kBAE9Bx8C,KAAcA,EAAU0gD,kBAC1B1gD,EAAU0gD,gBAAkB3lE,EAAKsoB,sBA1B3C7qB,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,uCACVC,SAAU,iBACVU,MACEC,MAAS,mBACTwzB,OAAQ,8CA3DZv0B,KAAQ+jE,GAARh9D,aAAA/G,KAkEKwH,EAAAA,aArELxH,KAAE4L,EAAAA,aAEF5L,KAAQoiE,wBAgERv3C,KAAA7qB,KAAGsB,EAAAA,SAjFH2mE,iCAAA,sBA6GAjoE,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,+DACVW,MAAOC,MAAS,0BA/GlBonE,iCAAA,sBAwHAnoE,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,+DACVW,MAAOC,MAAS,0BA1HlBqnE,iCCAA,sBAuBApoE,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACA+hB,EAAAA,cACA7hB,EAAAA,aACAD,IAEFI,SACE27D,GACA8D,GACAK,GACAE,GACAC,GACArgE,IAEFQ,cACEu7D,GACA8D,GACAK,GACAG,GACAD,IAEF18D,WACE22D,GACAiD,IAEFv7C,iBAAkBg6C,QAjDpB1U,gFCAA,MA4ByCvsD,GAAzCwlE,EAAA7lE,GAEAM,OAAAC,eAAMslE,EAANlpE,UAAA,0BAAA,WAAqC,MAAOX,MAAK8pE,aAC/C,SAAuBrlE,GAAiBzE,KAAK8pE,QAAUrlE,mCAGzDH,OAAAC,eAAMslE,EAANlpE,UAAA,0BAAA,WAAqC,MAAOX,MAAK+pE,aAC/C,SAAuBtlE,GAAiBzE,KAAK+pE,QAAUtlE,kDAnBzDjD,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,wDACVC,SAAU,sBACVS,QAAS,qBAAsB,sBAC/BC,MACEC,MAAS,qCAGTynE,KAAQ,IACRxa,UAAW,6CAIfya,qBAAAzoE,KAAGsB,EAAAA,QAIHonE,qBAAA1oE,KAAGsB,EAAAA,SAjCH+mE,GA4ByCM,EAAAA,qBCX5Bhb,GACT,GAAIx2C,GAAAA,eAA6B,4BCe/ByxD,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGE13C,GAAe,EAInB23C,GAAA,WACE,QAAFA,GAAqB50B,EACAC,EACAC,EAEAC,GAJA51C,KAArBy1C,0BAAqBA,EACAz1C,KAArB01C,YAAqBA,EACA11C,KAArB21C,iBAAqBA,EAEA31C,KAArB41C,UAAqBA,EAtDrB,MAAAy0B,MAwDaC,GAAqBx0B,EAAgBu0B,mBA6JhD,QAAFE,GAAwBjnE,EACAoH,EAEiBkrC,EACfF,EACAC,EACZF,EACsD+0B,EAC9CC,EACRC,GATZ,GAAF3mE,GAUIC,EAVJC,KAAAjE,KAUUy1C,EAA2BC,EAAaC,EAAkBC,IAVpE51C,WAAwB+D,GAAxBT,YAAwBA,EACAS,EAAxB2G,UAAwBA,EAEiB3G,EAAzC6xC,UAAyCA,EAKnB7xC,EAAtB0mE,iBAAsBA,EAvItB1mE,EAAAwyC,KAAmB,aAAa7jB,KAOhC3uB,EAAA4mE,WAAc,EAMd5mE,EAAAkzC,SAAqB,EAMrBlzC,EAAAg0C,aAAyC,GAAI5zC,GAAAA,QAM7CJ,EAAAmzC,YAAwB,YAMxBnzC,EAAA6mE,YAAe,EAuBf7mE,EAAAm7B,WAAwB,EAwBxBn7B,EAAAyvB,WAAwB,EAgBxBzvB,EAAA8mE,MAAoB,OAsBpB9mE,EAAA+mE,WAAsB,EAEtB/mE,EAAAgnE,uBACI,OACA,WACA,iBACA,QACA,OACA,QACAz/D,OAAO,SAAA0/D,GAAK,MAAAC,GAAAA,yBAAyB1+C,IAAIy+C,KAezCjnE,EAAKmnE,oBAAsBV,GAAsBzmE,EAAKT,YAAYjD,cAElE0D,EAAKonE,qBAAuBpnE,EAAKU,MAGjCV,EAAKsoB,GAAKtoB,EAAKsoB,GAKX3hB,EAAUu8B,KACZyjC,EAAOtlE,kBAAkB,WACvB9B,EAAYjD,cAAcinC,iBAAiB,QAAS,SAACl/B,GACnD,GAAIgjE,GAAKhjE,EAAgC,MACpCgjE,GAAG3mE,OAAU2mE,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhCxnE,EAAK4mE,WAAa5mE,EAAK2G,UAAUK,YA5PrC,MAoF8B1G,GAA9BkmE,EAAAvmE,GAwCAM,OAAAC,eAAMgmE,EAAN5pE,UAAA,2BACI,MAAIX,MAAK41C,WAAyC,OAA5B51C,KAAK41C,UAAUx0C,SAC5BpB,KAAK41C,UAAUx0C,SAEjBpB,KAAKk/B,eAEd,SAAaz6B,GACXzE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,GAInCzE,KAAKi3C,UACPj3C,KAAKi3C,SAAU,EACfj3C,KAAK+3C,aAAa3xC,yCAUxB9B,OAAAC,eAAMgmE,EAAN5pE,UAAA,UAAA,WAAqB,MAAOX,MAAKo4C,SAC/B,SAAO3zC,GAAiBzE,KAAKo4C,IAAM3zC,GAASzE,KAAKu2C,sCAcnDjyC,OAAAC,eAAMgmE,EAAN5pE,UAAA,gBAAA,WAA4B,MAAOX,MAAKwzB,eACtC,SAAa/uB,GAAkBzE,KAAKwzB,UAAY3uB,EAAAA,sBAAsBJ,oCAKxEH,OAAAC,eAAMgmE,EAAN5pE,UAAA,YAAA,WAAuB,MAAOX,MAAK6qE,WACjC,SAASpmE,GACPzE,KAAK6qE,MAAQpmE,GAAS,OACtBzE,KAAKwrE,iBAKAxrE,KAAKyrE,eAAiBR,EAAAA,yBAAyB1+C,IAAIvsB,KAAK6qE,SAC3D7qE,KAAKsD,YAAYjD,cAAcmB,KAAOxB,KAAK6qE,wCAajDvmE,OAAAC,eAAMgmE,EAAN5pE,UAAA,aAAA,WAAwB,MAAOX,MAAKkrE,oBAAoBzmE,WACtD,SAAUA,GACJA,IAAUzE,KAAKyE,QACjBzE,KAAKkrE,oBAAoBzmE,MAAQA,EACjCzE,KAAK+3C,aAAa3xC,yCAMxB9B,OAAAC,eAAMgmE,EAAN5pE,UAAA,gBAAA,WAA4B,MAAOX,MAAK8qE,eACtC,SAAarmE,GAAkBzE,KAAK8qE,UAAYjmE,EAAAA,sBAAsBJ,oCAsDtE8lE,EAAF5pE,UAAA8Z,SAAE,WAAA,GAAF1W,GAAA/D,IACIA,MAAKyqE,iBAAiBt6C,QAAQnwB,KAAKsD,YAAYjD,eAAesF,UAAU,SAAAyC,GACtErE,EAAK6mE,WAAaxiE,EAAMsjE,aACxB3nE,EAAKg0C,aAAa3xC,UAItBmkE,EAAF5pE,UAAA4Z,YAAE,WACEva,KAAK+3C,aAAa3xC,QAGpBmkE,EAAF5pE,UAAAwF,YAAE,WACEnG,KAAK+3C,aAAa1xC,WAClBrG,KAAKyqE,iBAAiBp6C,eAAerwB,KAAKsD,YAAYjD,gBAGxDkqE,EAAF5pE,UAAA4jC,UAAE,WACMvkC,KAAK41C,WAIP51C,KAAKy4C,mBAMPz4C,KAAK2rE,0BAIPpB,EAAF5pE,UAAA2c,MAAE,WAAgBtd,KAAKsD,YAAYjD,cAAcid,SAG/CitD,EAAF5pE,UAAA8hB,cAAE,SAAcmpD,GACRA,IAAc5rE,KAAKi3C,SAAYj3C,KAAK6rE,WACtC7rE,KAAKi3C,QAAU20B,EACf5rE,KAAK+3C,aAAa3xC,SAItBmkE,EAAF5pE,UAAA2tD,SAAE,aAWUic,EAAZ5pE,UAAAgrE,uBAAE,WACE,GAAMtsC,GAAWr/B,KAAKyE,KAElBzE,MAAKmrE,uBAAyB9rC,IAChCr/B,KAAKmrE,qBAAuB9rC,EAC5Br/B,KAAK+3C,aAAa3xC,SAKZmkE,EAAZ5pE,UAAA6qE,cAAE,WACE,GAAIpB,GAAwB3zD,QAAQzW,KAAK6qE,QAAU,EACjD,KAAMiB,GAAgC9rE,KAAK6qE,QAKrCN,EAAZ5pE,UAAAorE,cAAE,WACE,MAAO/rE,MAAK+qE,sBAAsBt0D,QAAQzW,KAAK6qE,QAAU,GAIjDN,EAAZ5pE,UAAAqrE,YAAE,WAEE,GAAIC,GAAYjsE,KAAKsD,YAA6C,cAAE2oE,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZ5pE,UAAA8qE,YAAE,WACE,MAAiE,aAA1DzrE,KAAKsD,YAAYjD,cAAc6mC,SAAS3wB,eAOjDjS,OAAFC,eAAMgmE,EAAN5pE,UAAA,aAAE,WACE,QAAQX,KAAK+rE,iBAAoB/rE,KAAKsD,YAAYjD,cAAcoE,OAAUzE,KAAKgsE,eAC1EhsE,KAAK4qE,6CAOZtmE,OAAFC,eAAMgmE,EAAN5pE,UAAA,wBAAE,WAAkC,MAAOX,MAAKi3C,UAAYj3C,KAAKq5C,uCAM/DkxB,EAAF5pE,UAAAm/C,kBAAE,SAAkBC,GAAiB//C,KAAKggD,iBAAmBD,EAAItG,KAAK,MAMpE8wB,EAAF5pE,UAAAs/C,iBAAE,WAAqBjgD,KAAKsd,wBAlT5B9b,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,sCACVC,SAAU,WACVU,MAIEC,MAAS,oDACT4pE,2BAA4B,YAG5BvrC,YAAa,KACbwrC,qBAAsB,cACtB7c,aAAc,WACd8c,aAAc,WACdC,aAAc,WACd7rB,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxB7jB,SAAU,uBACVD,UAAW,sBACXizB,UAAW,cAEbviD,YAAaC,QAAS4zC,GAAqB3zC,YAAao9D,4CArE1D/oE,KAAE4L,EAAAA,aAJF5L,KAAgCsH,EAAAA,WAchCtH,KAA4B2/C,EAAAA,UAA5B54C,aAAA/G,KAiMewH,EAAAA,WAjMfxH,KAiM2BqzC,EAAAA,SAjM3BrzC,KAAuCw/C,EAAAA,OAAvCz4C,aAAA/G,KAkMewH,EAAAA,aAlMfxH,KAAQy/C,EAAAA,mBAAR14C,aAAA/G,KAmMewH,EAAAA,aAlMfxH,KAA6BqR,KAoM7BrR,SAAAuH,GAAAR,aAAA/G,KAAewH,EAAAA,WAAfxH,KAA2BqzC,EAAAA,OAA3BrzC,KAAmCyH,EAAAA,OAAnCvH,MAA0CytD,QAjM1C3tD,KAAQ+qE,EAAAA,kBANR/qE,KAAEqF,EAAAA,4BAsGFzF,WAAAI,KAAGsB,EAAAA,QAuBHupB,KAAA7qB,KAAGsB,EAAAA,QASHq7C,cAAA38C,KAAGsB,EAAAA,QAMHszB,WAAA50B,KAAGsB,EAAAA,QAMHtB,OAAAA,KAAGsB,EAAAA,QAgBH4+C,oBAAAlgD,KAAGsB,EAAAA,QAMH2B,QAAAjD,KAAGsB,EAAAA,QAUH+oE,WAAArqE,KAAGsB,EAAAA,SAvMHynE,GAoF8BD,gCCpF9B,sBAiBA9oE,KAAC4H,EAAAA,SAAD1H,OACEqI,cAAewgE,GAAUV,IACzBxgE,SACEC,EAAAA,aACAkjE,EAAAA,gBACAhnC,IAEF77B,SACE6iE,EAAAA,gBAGAhnC,GACA+kC,GACAV,IAEF58D,WAAY4F,QAhCd45D,gCCmBAzsE,KAAAkL,QAAoC,GAAI/G,GAAAA,QAGxCnE,KAAA0sE,cAA0B,WAG1B1sE,KAAA2sE,kBAA8B,gBAG9B3sE,KAAAogE,eAA2B,iBAG3BpgE,KAAAwgE,eAA2B,aAG3BxgE,KAAAqgE,cAA0B,gBAG1BrgE,KAAAygE,cAA0B,YAG1BzgE,KAAAugE,mBAA+B,oBAG/BvgE,KAAA0gE,mBAA+B,gBAG/B1gE,KAAAmgE,uBAAmC,cAGnCngE,KAAAkgE,2BAAuC,wBAjDvC,sBAaA1+D,KAACupB,EAAAA,WAADrpB,OAAakX,WAAY,8GAbzB04C,KCwBAoL,GAAA,WACE,QAAFA,GAAqBj4D,EACAmoE,EACAj5C,EACA8O,GAHAziC,KAArByE,MAAqBA,EACAzE,KAArB4sE,aAAqBA,EACA5sE,KAArB2zB,UAAqBA,EACA3zB,KAArByiC,QAAqBA,EA5BrB,MAAAi6B,oBAoFE,QAAF3L,GAAsBztD,EAAiCM,GAAjC5D,KAAtBsD,YAAsBA,EAAiCtD,KAAvD4D,QAAuDA,EAjBvD5D,KAAA6sE,QAAqB,EAGrB7sE,KAAA8sE,wBAAoC,EAGpC9sE,KAAA+sE,WAAwB,EAMxB/sE,KAAAgtE,gBAA6B,EAG7BhtE,KAAAitE,oBAAiE,GAAIzwD,GAAAA,aAArE,MAIEu0C,GAAFpwD,UAAAusE,aAAE,SAAaC,IACNntE,KAAK8sE,wBAA2BK,EAAK1qC,UAG1CziC,KAAKitE,oBAAoBlsE,KAAKosE,EAAK1oE,QAIrCH,OAAFC,eAAMwsD,EAANpwD,UAAA,uBAAE,WACE,MAAOX,MAAKgqE,MAAQhqE,KAAKgqE,KAAK7+D,QAAUnL,KAAKgqE,KAAK,GAAG7+D,OACjDnL,KAAK6sE,QAAU7sE,KAAKgqE,KAAK,GAAG7+D,OAAS,mCAG3C4lD,EAAFpwD,UAAAysE,cAAE,SAAc/X,EAAkBoC,GAC9B,GAAI4V,GAAahY,EAAWr1D,KAAK6sE,QAAUpV,CAO3C,OAJIpC,KACFgY,GAAcrtE,KAAKstE,iBAGdD,GAAcrtE,KAAK+sE,YAI5Bhc,EAAFpwD,UAAAs9D,iBAAE,WAAA,GAAFl6D,GAAA/D,IACIA,MAAK4D,QAAQwB,kBAAkB,WAC7BrB,EAAKH,QAAQ4zC,SAAS/zB,eAAehe,KAAK0J,EAAAA,KAAK,IAAIxJ,UAAU,WAC3D5B,EAAKT,YAAYjD,cAAck2B,cAAc,6BAA6BjZ,4BA9ElF9b,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,q1CACVC,QAAF,g0BACEQ,MACFC,MAAA,oBACMqK,KAAN,OACI2gE,qBAAJ,QAEA3rE,SAAA,kBACAG,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFA9BA2uD,EAAAruD,6DAoCA8qE,aAAAhsE,KAAQsB,EAAAA,QAGR2qE,gBAAAjsE,KAAAsB,EAAAA,QAGA4qE,wBAAQlsE,KAARsB,EAAAA,QAGA+pE,UAAArrE,KAAAsB,EAAAA,QAGAgqE,yBAAAtrE,KAAAsB,EAAAA,QAGAiqE,aAAAvrE,KAAAsB,EAAAA,QAGAkqE,kBAAAxrE,KAAAsB,EAAAA,QAGAmqE,sBAAAzrE,KAAA0B,EAAAA,UASA6tD,mBCiDE,QAAFG,GAAsBrtD,EACsC4qD,EAC3BvB,EACCvpD,GAC9B,GAJkB3D,KAAtB6D,mBAAsBA,EACsC7D,KAA5DyuD,aAA4DA,EAC3BzuD,KAAjCktD,aAAiCA,EACCltD,KAAlC2D,KAAkCA,EAnClC3D,KAAAk9D,eAA8D,GAAI1gD,GAAAA,aAGlExc,KAAA2hE,eAA0D,GAAInlD,GAAAA,aAG9Dxc,KAAA2tE,iBAAyD,GAAInxD,GAAAA,cA8BpDxc,KAAKktD,aACR,KAAMoQ,GAA2B,cAEnC,KAAKt9D,KAAKyuD,aACR,KAAM6O,GAA2B,mBAGnC,IAAMsQ,GAAiB5tE,KAAKktD,aAAa2gB,oBACnCC,EAAiB9tE,KAAKktD,aAAa6gB,kBAAkB,UACrDC,EAAehuE,KAAKktD,aAAa6gB,kBAAkB,QAGrDE,EAAWD,EAAaj9D,IAAI,SAACm9D,EAAMl+D,GACrC,OAAQk+D,KAAdA,EAAoBC,OAAQL,EAAe99D,KAEvChQ,MAAKouE,UAAYH,EAAS7iE,MAAMwiE,GAAgBlrD,OAAOurD,EAAS7iE,MAAM,EAAGwiE,IAEzE5tE,KAAKu9D,YAAcv9D,KAAKktD,aAAasQ,QA5CzC,MAlDAl5D,QAAAC,eAAM2sD,EAANvwD,UAAA,kBAAA,WAAwB,MAAOX,MAAKu9D,iBAClC,SAAe94D,GACb,GAAMg5D,GAAgBz9D,KAAKu9D,YACrBG,EACF19D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,KAAWzE,KAAKktD,aAAasQ,OACxFx9D,MAAKu9D,YAAcv9D,KAAKktD,aAAayQ,UAAUD,EAAW19D,KAAK88D,QAAS98D,KAAK48D,SACxE58D,KAAKquE,qBAAqB5Q,EAAez9D,KAAKu9D,cACjDv9D,KAAK49D,yCAOXt5D,OAAAC,eAAM2sD,EAANvwD,UAAA,gBAAA,WAA6B,MAAOX,MAAK++B,eACvC,SAAat6B,GACXzE,KAAK++B,UAAY/+B,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,IACxEzE,KAAKsuE,cAAgBtuE,KAAKuuE,uBAAuBvuE,KAAK++B,4CAM1Dz6B,OAAAC,eAAM2sD,EAANvwD,UAAA,eAAA,WAA4B,MAAOX,MAAK+9D,cACtC,SAAYt5D,GACVzE,KAAK+9D,SAAW/9D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,qCAM3EH,OAAAC,eAAM2sD,EAANvwD,UAAA,eAAA,WAA4B,MAAOX,MAAKg+D,cACtC,SAAYv5D,GACVzE,KAAKg+D,SAAWh+D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,qCAgEzEysD,EAAFvwD,UAAAwE,mBAAE,WACEnF,KAAK49D,QACL59D,KAAKi+D,oBAIP/M,EAAFvwD,UAAA6tE,cAAE,SAAcjgB,GACZ,GAAIvuD,KAAKsuE,eAAiB/f,EAAM,CAC9B,GAAMkgB,GAAezuE,KAAKktD,aAAa2P,QAAQ78D,KAAKq+D,YAC9CqQ,EAAgB1uE,KAAKktD,aAAayR,SAAS3+D,KAAKq+D,YAChDsQ,EAAe3uE,KAAKktD,aAAauP,WAAWgS,EAAcC,EAAengB,EAE/EvuD,MAAKk9D,eAAen8D,KAAK4tE,GAG3B3uE,KAAK2hE,eAAe5gE,QAItBmwD,EAAFvwD,UAAA89D,2BAAE,SAA2Br2D,GAKzB,GAAMq1D,GAAgBz9D,KAAKu9D,YAErBrzC,EAAQlqB,KAAKm5C,QACnB,QAAQ/wC,EAAM2W,SACZ,IAAKG,GAAAA,WACHlf,KAAKq+D,WAAar+D,KAAKktD,aAAa+P,gBAAgBj9D,KAAKu9D,YAAarzC,EAAQ,GAAK,EACnF,MACF,KAAKlL,GAAAA,YACHhf,KAAKq+D,WAAar+D,KAAKktD,aAAa+P,gBAAgBj9D,KAAKu9D,YAAarzC,GAAS,EAAI,EACnF,MACF,KAAKkR,GAAAA,SACHp7B,KAAKq+D,WAAar+D,KAAKktD,aAAa+P,gBAAgBj9D,KAAKu9D,aAAc,EACvE,MACF,KAAKliC,GAAAA,WACHr7B,KAAKq+D,WAAar+D,KAAKktD,aAAa+P,gBAAgBj9D,KAAKu9D,YAAa,EACtE,MACF,KAAKn+C,GAAAA,KACHpf,KAAKq+D,WAAar+D,KAAKktD,aAAa+P,gBAAgBj9D,KAAKu9D,YACrD,EAAIv9D,KAAKktD,aAAasR,QAAQx+D,KAAKu9D,aACvC,MACF,KAAKj+C,GAAAA,IACHtf,KAAKq+D,WAAar+D,KAAKktD,aAAa+P,gBAAgBj9D,KAAKu9D,YACpDv9D,KAAKktD,aAAaqR,kBAAkBv+D,KAAKu9D,aACxCv9D,KAAKktD,aAAasR,QAAQx+D,KAAKu9D,aACrC,MACF,KAAKtiC,GAAAA,QACHj7B,KAAKq+D,WAAaj2D,EAAMyxC,OACpB75C,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,aAAc,GACtDv9D,KAAKktD,aAAawR,kBAAkB1+D,KAAKu9D,aAAc,EAC3D,MACF,KAAKpiC,GAAAA,UACHn7B,KAAKq+D,WAAaj2D,EAAMyxC,OACpB75C,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,YAAa,GACrDv9D,KAAKktD,aAAawR,kBAAkB1+D,KAAKu9D,YAAa,EAC1D,MACF,KAAK/9C,GAAAA,MAOH,YANKxf,KAAK+8D,aAAc/8D,KAAK+8D,WAAW/8D,KAAKu9D,eAC3Cv9D,KAAKwuE,cAAcxuE,KAAKktD,aAAasR,QAAQx+D,KAAKu9D,cAClDv9D,KAAK2hE,eAAe5gE,OAEpBqH,EAAMC,kBAGV,SAEE,OAGArI,KAAKktD,aAAaoX,YAAY7G,EAAez9D,KAAKq+D,aACpDr+D,KAAK2tE,iBAAiB5sE,KAAKf,KAAKq+D,YAGlCr+D,KAAKi+D,mBAEL71D,EAAMC,kBAIR6oD,EAAFvwD,UAAAi9D,MAAE,WACE59D,KAAKsuE,cAAgBtuE,KAAKuuE,uBAAuBvuE,KAAK4wB,UACtD5wB,KAAK4uE,WAAa5uE,KAAKuuE,uBAAuBvuE,KAAKktD,aAAasQ,SAChEx9D,KAAK6uE,YACD7uE,KAAKktD,aAAa8R,cAAc,SAASh/D,KAAKktD,aAAayR,SAAS3+D,KAAKq+D,aACpEgB,mBAET,IAAIK,GAAe1/D,KAAKktD,aAAauP,WAAWz8D,KAAKktD,aAAa2P,QAAQ78D,KAAKq+D,YAC3Er+D,KAAKktD,aAAayR,SAAS3+D,KAAKq+D,YAAa,EACjDr+D,MAAK8uE,kBAhNa,EAiNG9uE,KAAKktD,aAAa6hB,aAAarP,GAC/C1/D,KAAKktD,aAAa2gB,qBAlNL,EAoNlB7tE,KAAKgvE,mBACLhvE,KAAK6D,mBAAmBqB,gBAIlBgsD,EAAVvwD,UAAAs9D,4BACIj+D,KAAKo9D,iBAAiBa,oBAIhB/M,EAAVvwD,UAAAquE,4BACI,GAAM1Q,GAAct+D,KAAKktD,aAAaqR,kBAAkBv+D,KAAKq+D,YACvD4Q,EAAYjvE,KAAKktD,aAAagiB,cACpClvE,MAAKmvE,WACL,KAAK,GAAIn/D,GAAI,EAAGm9D,EAAOntE,KAAK8uE,iBAAkB9+D,EAAIsuD,EAAatuD,IAAKm9D,IAAQ,CAlO1D,GAmOZA,IACFntE,KAAKmvE,OAAOjgE,SACZi+D,EAAO,EAET,IAAM5e,GAAOvuD,KAAKktD,aAAauP,WACzBz8D,KAAKktD,aAAa2P,QAAQ78D,KAAKq+D,YAC/Br+D,KAAKktD,aAAayR,SAAS3+D,KAAKq+D,YAAaruD,EAAI,GACjDyyB,EAAUziC,KAAKovE,kBAAkB7gB,GACjC56B,EAAY3zB,KAAKktD,aAAa4B,OAAOP,EAAMvuD,KAAKyuD,aAAaM,QAAQsgB,cAC3ErvE,MAAKmvE,OAAOnvE,KAAKmvE,OAAOhkE,OAAS,GAC5B+D,KAAK,GAAIwtD,IAAgB1sD,EAAI,EAAGi/D,EAAUj/D,GAAI2jB,EAAW8O,MAK1DyuB,EAAVvwD,UAAAyuE,kBAAA,SAA4B7gB,GACxB,QAASA,KACHvuD,KAAK+8D,YAAc/8D,KAAK+8D,WAAWxO,OACnCvuD,KAAK88D,SAAW98D,KAAKktD,aAAaoX,YAAY/V,EAAMvuD,KAAK88D,UAAY,MACrE98D,KAAK48D,SAAW58D,KAAKktD,aAAaoX,YAAY/V,EAAMvuD,KAAK48D,UAAY,IAOrE1L,EAAVvwD,UAAA4tE,uBAAA,SAAiChgB,GAC7B,MAAOA,IAAQvuD,KAAKquE,qBAAqB9f,EAAMvuD,KAAKq+D,YAChDr+D,KAAKktD,aAAasR,QAAQjQ,GAAQ,MAIhC2C,EAAVvwD,UAAA0tE,qBAAA,SAA+BiB,EAAcC,GACzC,SAAUD,IAAMC,GAAMvvE,KAAKktD,aAAayR,SAAS2Q,IAAOtvE,KAAKktD,aAAayR,SAAS4Q,IACzEvvE,KAAKktD,aAAa2P,QAAQyS,IAAOtvE,KAAKktD,aAAa2P,QAAQ0S,KAO/Dre,EAAVvwD,UAAAssD,oBAAA,SAA8Br1C,GAC1B,MAAQ5X,MAAKktD,aAAa8B,eAAep3C,IAAQ5X,KAAKktD,aAAayB,QAAQ/2C,GAAQA,EAAM,MAInFs5C,EAAVvwD,UAAAw4C,kBACI,MAAOn5C,MAAK2D,MAA4B,QAApB3D,KAAK2D,KAAKc,sBA3QlCjD,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEE,SAAU,kkBACVD,SAAU,eACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJA3BAZ,KAAEkuD,GAAFnnD,aAAA/G,KAAAwH,EAAAA,aA8GAxH,KAAAqQ,EAAAA,eAAAtJ,aAAA/G,KAAAwH,EAAAA,cAnGAkoD,EAAAxuD,sEAwBAo6D,UAAAt7D,KAAAsB,EAAAA,QAcA85D,UAAAp7D,KAAAsB,EAAAA,QASAi6D,aAAAv7D,KAAAsB,EAAAA,QAQAo6D,iBAAA17D,KAAA0B,EAAAA,SAQAy+D,iBAAAngE,KAAA0B,EAAAA,SAGAyqE,mBAAAnsE,KAAA0B,EAAAA,SAGAk6D,mBAAA57D,KAAAoB,EAAAA,UAAAlB,MAAAqvD,OAMAG,mBhBOE,QAAFE,GAAsBvtD,EACWqpD,EACCvpD,GAC9B,GAHkB3D,KAAtB6D,mBAAsBA,EACW7D,KAAjCktD,aAAiCA,EACCltD,KAAlC2D,KAAkCA,EAnBlC3D,KAAAk9D,eAAuD,GAAI1gD,GAAAA,aAG3Dxc,KAAAm9D,aAAqD,GAAI3gD,GAAAA,cAiBhDxc,KAAKktD,aACR,KAAMoQ,GAA2B,cAGnCt9D,MAAKu9D,YAAcv9D,KAAKktD,aAAasQ,QAlBzC,MAhDAl5D,QAAAC,eAAM6sD,EAANzwD,UAAA,kBAAA,WAAwB,MAAOX,MAAKu9D,iBAClC,SAAe94D,GACb,GAAIg5D,GAAgBz9D,KAAKu9D,YACnBG,EACF19D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,KAAWzE,KAAKktD,aAAasQ,OACxFx9D,MAAKu9D,YAAcv9D,KAAKktD,aAAayQ,UAAUD,EAAW19D,KAAK88D,QAAS98D,KAAK48D,SACzErkD,KAAKg1B,MAAMvtC,KAAKktD,aAAa2P,QAAQY,GA1BjB,KA2BpBllD,KAAKg1B,MAAMvtC,KAAKktD,aAAa2P,QAAQ78D,KAAKu9D,aA3BtB,KA4BtBv9D,KAAK49D,yCAOXt5D,OAAAC,eAAM6sD,EAANzwD,UAAA,gBAAA,WAA6B,MAAOX,MAAK++B,eACvC,SAAat6B,GACXzE,KAAK++B,UAAY/+B,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,IACxEzE,KAAKwvE,cAAgBxvE,KAAK++B,WAAa/+B,KAAKktD,aAAa2P,QAAQ78D,KAAK++B,4CAM1Ez6B,OAAAC,eAAM6sD,EAANzwD,UAAA,eAAA,WAA4B,MAAOX,MAAK+9D,cACtC,SAAYt5D,GACVzE,KAAK+9D,SAAW/9D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,qCAM3EH,OAAAC,eAAM6sD,EAANzwD,UAAA,eAAA,WAA4B,MAAOX,MAAKg+D,cACtC,SAAYv5D,GACVzE,KAAKg+D,SAAWh+D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,qCAmCzE2sD,EAAFzwD,UAAAwE,mBAAE,WACEnF,KAAK49D,QACL59D,KAAKi+D,oBAIP7M,EAAFzwD,UAAAi9D,MAAE,WAAA,GAAF75D,GAAA/D,IACIA,MAAKyvE,WAAazvE,KAAKktD,aAAa2P,QAAQ78D,KAAKktD,aAAasQ,QAC9D,IAAI+B,GAAav/D,KAAKktD,aAAa2P,QAAQ78D,KAAKu9D,aAC5CmS,EAAenQ,EAlGK,EAmGxBv/D,MAAK2vE,SACL,KAAK,GAAI3/D,GAAI,EAAGsmD,KAAoBtmD,EApGZ,GAoG8BA,IACpDsmD,EAAIpnD,KAAKqwD,EAAamQ,EAAe1/D,GAnGhB,GAoGjBsmD,EAAInrD,SACNnL,KAAK2vE,OAAOzgE,KAAKonD,EAAIvlD,IAAI,SAAAurD,GAAQ,MAAAv4D,GAAKs4D,mBAAmBC,MACzDhG,KAGJt2D,MAAK6D,mBAAmBqB,gBAI1BksD,EAAFzwD,UAAAivE,cAAE,SAActT,GACZt8D,KAAKm9D,aAAap8D,KAAKf,KAAKktD,aAAauP,WAAWH,EAAM,EAAG,GAC7D,IAAI6B,GAAQn+D,KAAKktD,aAAayR,SAAS3+D,KAAKq+D,YACxCC,EACAt+D,KAAKktD,aAAaqR,kBAAkBv+D,KAAKktD,aAAauP,WAAWH,EAAM6B,EAAO,GAClFn+D,MAAKk9D,eAAen8D,KAAKf,KAAKktD,aAAauP,WAAWH,EAAM6B,EACxD5lD,KAAKE,IAAIzY,KAAKktD,aAAasR,QAAQx+D,KAAKq+D,YAAaC,MAI3DlN,EAAFzwD,UAAA89D,2BAAE,SAA2Br2D,GAKzB,GAAM8hB,GAAQlqB,KAAKm5C,QAEnB,QAAQ/wC,EAAM2W,SACZ,IAAKG,GAAAA,WACHlf,KAAKq+D,WAAar+D,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,YAAarzC,EAAQ,GAAK,EACpF,MACF,KAAKlL,GAAAA,YACHhf,KAAKq+D,WAAar+D,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,YAAarzC,GAAS,EAAI,EACpF,MACF,KAAKkR,GAAAA,SACHp7B,KAAKq+D,WAAar+D,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,aAtIvC,EAuInB,MACF,KAAKliC,GAAAA,WACHr7B,KAAKq+D,WAAar+D,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,YAzIvC,EA0InB,MACF,KAAKn+C,GAAAA,KACHpf,KAAKq+D,WAAar+D,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,aACrDv9D,KAAKktD,aAAa2P,QAAQ78D,KAAKu9D,aA/IhB,GAgJpB,MACF,KAAKj+C,GAAAA,IACHtf,KAAKq+D,WAAar+D,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,YAlJtC,GAmJDv9D,KAAKktD,aAAa2P,QAAQ78D,KAAKu9D,aAnJ9B,GAmJ4D,EAChF,MACF,KAAKtiC,GAAAA,QACHj7B,KAAKq+D,WACDr+D,KAAKktD,aAAa0R,iBACd5+D,KAAKu9D,YAAan1D,EAAMyxC,QAAS,KAxJrB,GAyJpB,MACF,KAAK1e,GAAAA,UACHn7B,KAAKq+D,WACDr+D,KAAKktD,aAAa0R,iBACd5+D,KAAKu9D,YAAan1D,EAAMyxC,OAASg2B,IA7JrB,GA8JpB,MACF,KAAKrwD,GAAAA,MACHxf,KAAK4vE,cAAc5vE,KAAKktD,aAAa2P,QAAQ78D,KAAKu9D,aAClD,MACF,SAEE,OAGJv9D,KAAKi+D,mBAEL71D,EAAMC,kBAGR+oD,EAAFzwD,UAAAmvE,eAAE,WACE,MAAO9vE,MAAKktD,aAAa2P,QAAQ78D,KAAKq+D,YA7Kd,IAiLlBjN,EAAVzwD,UAAAs9D,4BACIj+D,KAAKo9D,iBAAiBa;0CAIhB7M,EAAVzwD,UAAA07D,mBAAA,SAA6BC,GACzB,GAAIC,GAAWv8D,KAAKktD,aAAasP,YAAYx8D,KAAKktD,aAAauP,WAAWH,EAAM,EAAG,GACnF,OAAO,IAAII,IAAgBJ,EAAMC,EAAUA,EAAUv8D,KAAK28D,kBAAkBL,KAItElL,EAAVzwD,UAAAg8D,kBAAA,SAA4BL,GAExB,OAAavzD,KAATuzD,GAA+B,OAATA,GACrBt8D,KAAK48D,SAAWN,EAAOt8D,KAAKktD,aAAa2P,QAAQ78D,KAAK48D,UACtD58D,KAAK88D,SAAWR,EAAOt8D,KAAKktD,aAAa2P,QAAQ78D,KAAK88D,SACzD,OAAO,CAIT,KAAK98D,KAAK+8D,WACR,OAAO,CAMT,KAAK,GAHCC,GAAch9D,KAAKktD,aAAauP,WAAWH,EAAM,EAAG,GAGjD/N,EAAOyO,EAAah9D,KAAKktD,aAAa2P,QAAQtO,IAAS+N,EAC9D/N,EAAOvuD,KAAKktD,aAAa+P,gBAAgB1O,EAAM,GAC/C,GAAIvuD,KAAK+8D,WAAWxO,GAClB,OAAO,CAIX,QAAO,GAOD6C,EAAVzwD,UAAAssD,oBAAA,SAA8Br1C,GAC1B,MAAQ5X,MAAKktD,aAAa8B,eAAep3C,IAAQ5X,KAAKktD,aAAayB,QAAQ/2C,GAAQA,EAAM,MAInFw5C,EAAVzwD,UAAAw4C,kBACI,MAAOn5C,MAAK2D,MAA4B,QAApB3D,KAAK2D,KAAKc,sBAvNlCjD,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,odACVD,SAAU,mBACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,mHA3BAZ,KAAEqQ,EAAAA,eAAFtJ,aAAA/G,KAAAwH,EAAAA,cAUAooD,EAAA1uD,sEAuBAo6D,UAAAt7D,KAAAsB,EAAAA,QAeA85D,UAAAp7D,KAAAsB,EAAAA,QASAi6D,aAAAv7D,KAAAsB,EAAAA,QAQAo6D,iBAAA17D,KAAA0B,EAAAA,SAQAi6D,eAAA37D,KAAA0B,EAAAA,SAGAk6D,mBAAA57D,KAAAoB,EAAAA,UAAAlB,MAAAqvD,OAMAK,mBCYE,QAAFD,GAAsBttD,EACsC4qD,EAC3BvB,EACCvpD,GAC9B,GAJkB3D,KAAtB6D,mBAAsBA,EACsC7D,KAA5DyuD,aAA4DA,EAC3BzuD,KAAjCktD,aAAiCA,EACCltD,KAAlC2D,KAAkCA,EA1BlC3D,KAAAk9D,eAAuD,GAAI1gD,GAAAA,aAG3Dxc,KAAAq9D,cAAsD,GAAI7gD,GAAAA,cAwBjDxc,KAAKktD,aACR,KAAMoQ,GAA2B,cAEnC,KAAKt9D,KAAKyuD,aACR,KAAM6O,GAA2B,mBAGnCt9D,MAAKu9D,YAAcv9D,KAAKktD,aAAasQ,QA5BzC,MA/CAl5D,QAAAC,eAAM4sD,EAANxwD,UAAA,kBAAA,WAAwB,MAAOX,MAAKu9D,iBAClC,SAAe94D,GACb,GAAIg5D,GAAgBz9D,KAAKu9D,YACnBG,EACF19D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,KAAWzE,KAAKktD,aAAasQ,OACxFx9D,MAAKu9D,YAAcv9D,KAAKktD,aAAayQ,UAAUD,EAAW19D,KAAK88D,QAAS98D,KAAK48D,SACzE58D,KAAKktD,aAAa2P,QAAQY,KAAmBz9D,KAAKktD,aAAa2P,QAAQ78D,KAAKu9D,cAC9Ev9D,KAAK49D,yCAOXt5D,OAAAC,eAAM4sD,EAANxwD,UAAA,gBAAA,WAA6B,MAAOX,MAAK++B,eACvC,SAAat6B,GACXzE,KAAK++B,UAAY/+B,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,IACxEzE,KAAK69D,eAAiB79D,KAAK89D,uBAAuB99D,KAAK++B,4CAM3Dz6B,OAAAC,eAAM4sD,EAANxwD,UAAA,eAAA,WAA4B,MAAOX,MAAK+9D,cACtC,SAAYt5D,GACVzE,KAAK+9D,SAAW/9D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,qCAM3EH,OAAAC,eAAM4sD,EAANxwD,UAAA,eAAA,WAA4B,MAAOX,MAAKg+D,cACtC,SAAYv5D,GACVzE,KAAKg+D,SAAWh+D,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,qCA6CzE0sD,EAAFxwD,UAAAwE,mBAAE,WACEnF,KAAK49D,QACL59D,KAAKi+D,oBAIP9M,EAAFxwD,UAAAu9D,eAAE,SAAeC,GACb,GAAMC,GACAp+D,KAAKktD,aAAauP,WAAWz8D,KAAKktD,aAAa2P,QAAQ78D,KAAKq+D,YAAaF,EAAO,EAEtFn+D,MAAKq9D,cAAct8D,KAAKq9D,EAExB,IAAME,GAAct+D,KAAKktD,aAAaqR,kBAAkBH,EAExDp+D,MAAKk9D,eAAen8D,KAAKf,KAAKktD,aAAauP,WACvCz8D,KAAKktD,aAAa2P,QAAQ78D,KAAKq+D,YAAaF,EAC5C5lD,KAAKE,IAAIzY,KAAKktD,aAAasR,QAAQx+D,KAAKq+D,YAAaC,MAI3DnN,EAAFxwD,UAAA89D,2BAAE,SAA2Br2D,GAKzB,GAAM8hB,GAAQlqB,KAAKm5C,QAEnB,QAAQ/wC,EAAM2W,SACZ,IAAKG,GAAAA,WACHlf,KAAKq+D,WAAar+D,KAAKktD,aAAawR,kBAAkB1+D,KAAKu9D,YAAarzC,EAAQ,GAAK,EACrF,MACF,KAAKlL,GAAAA,YACHhf,KAAKq+D,WAAar+D,KAAKktD,aAAawR,kBAAkB1+D,KAAKu9D,YAAarzC,GAAS,EAAI,EACrF,MACF,KAAKkR,GAAAA,SACHp7B,KAAKq+D,WAAar+D,KAAKktD,aAAawR,kBAAkB1+D,KAAKu9D,aAAc,EACzE,MACF,KAAKliC,GAAAA,WACHr7B,KAAKq+D,WAAar+D,KAAKktD,aAAawR,kBAAkB1+D,KAAKu9D,YAAa,EACxE,MACF,KAAKn+C,GAAAA,KACHpf,KAAKq+D,WAAar+D,KAAKktD,aAAawR,kBAAkB1+D,KAAKu9D,aACtDv9D,KAAKktD,aAAayR,SAAS3+D,KAAKu9D,aACrC,MACF,KAAKj+C,GAAAA,IACHtf,KAAKq+D,WAAar+D,KAAKktD,aAAawR,kBAAkB1+D,KAAKu9D,YACvD,GAAKv9D,KAAKktD,aAAayR,SAAS3+D,KAAKu9D,aACzC,MACF,KAAKtiC,GAAAA,QACHj7B,KAAKq+D,WACDr+D,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,YAAan1D,EAAMyxC,QAAU,IAAM,EAC/E,MACF,KAAK1e,GAAAA,UACHn7B,KAAKq+D,WACDr+D,KAAKktD,aAAa0R,iBAAiB5+D,KAAKu9D,YAAan1D,EAAMyxC,OAAS,GAAK,EAC7E,MACF,KAAKr6B,GAAAA,MACHxf,KAAKk+D,eAAel+D,KAAKktD,aAAayR,SAAS3+D,KAAKu9D,aACpD,MACF,SAEE,OAGJv9D,KAAKi+D,mBAEL71D,EAAMC,kBAIR8oD,EAAFxwD,UAAAi9D,MAAE,WAAA,GAAF75D,GAAA/D,IACIA,MAAK69D,eAAiB79D,KAAK89D,uBAAuB99D,KAAK4wB,UACvD5wB,KAAK6+D,YAAc7+D,KAAK89D,uBAAuB99D,KAAKktD,aAAasQ,SACjEx9D,KAAK8+D,WAAa9+D,KAAKktD,aAAasP,YAAYx8D,KAAKq+D,WAErD,IAAIU,GAAa/+D,KAAKktD,aAAa8R,cAAc,QAEjDh/D,MAAKi/D,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKluD,IAAI,SAAAulD,GAAO,MAAAA,GAAIvlD,IACvE,SAAAotD,GAAS,MAAAp6D,GAAKm7D,oBAAoBf,EAAOY,EAAWZ,QACxDn+D,KAAK6D,mBAAmBqB,gBAIlBisD,EAAVxwD,UAAAs9D,4BACIj+D,KAAKo9D,iBAAiBa,oBAOhB9M,EAAVxwD,UAAAm9D,uBAAA,SAAiCvP,GAC7B,MAAOA,IAAQvuD,KAAKktD,aAAa2P,QAAQtO,IAASvuD,KAAKktD,aAAa2P,QAAQ78D,KAAKq+D,YAC7Er+D,KAAKktD,aAAayR,SAASpQ,GAAQ,MAIjC4C,EAAVxwD,UAAAu+D,oBAAA,SAA8Bf,EAAegB,GACzC,GAAIxrC,GAAY3zB,KAAKktD,aAAa4B,OAC9B9uD,KAAKktD,aAAauP,WAAWz8D,KAAKktD,aAAa2P,QAAQ78D,KAAKq+D,YAAaF,EAAO,GAChFn+D,KAAKyuD,aAAaM,QAAQqQ,mBAC9B,OAAO,IAAI1C,IACPyB,EAAOgB,EAAUE,oBAAqB1rC,EAAW3zB,KAAKs/D,mBAAmBnB,KAIvEhN,EAAVxwD,UAAA2+D,mBAAA,SAA6BnB,GAEzB,GAAMoB,GAAav/D,KAAKktD,aAAa2P,QAAQ78D,KAAKq+D,WAElD,QAAct1D,KAAVo1D,GAAiC,OAAVA,GACvBn+D,KAAKw/D,4BAA4BD,EAAYpB,IAC7Cn+D,KAAKy/D,6BAA6BF,EAAYpB,GAChD,OAAO,CAGT,KAAKn+D,KAAK+8D,WACR,OAAO,CAMT,KAAK,GAHC2C,GAAe1/D,KAAKktD,aAAauP,WAAW8C,EAAYpB,EAAO,GAG5D5P,EAAOmR,EAAc1/D,KAAKktD,aAAayR,SAASpQ,IAAS4P,EAC7D5P,EAAOvuD,KAAKktD,aAAa+P,gBAAgB1O,EAAM,GAClD,GAAIvuD,KAAK+8D,WAAWxO,GAClB,OAAO,CAIX,QAAO,GAOD4C,EAAVxwD,UAAA6+D,4BAAA,SAAsClD,EAAc6B,GAChD,GAAIn+D,KAAK48D,QAAS,CAChB,GAAM+C,GAAU3/D,KAAKktD,aAAa2P,QAAQ78D,KAAK48D,SACzCgD,EAAW5/D,KAAKktD,aAAayR,SAAS3+D,KAAK48D,QAEjD,OAAON,GAAOqD,GAAYrD,IAASqD,GAAWxB,EAAQyB,EAGxD,OAAO,GAODzO,EAAVxwD,UAAA8+D,6BAAA,SAAuCnD,EAAc6B,GACjD,GAAIn+D,KAAK88D,QAAS,CAChB,GAAM+C,GAAU7/D,KAAKktD,aAAa2P,QAAQ78D,KAAK88D,SACzCgD,EAAW9/D,KAAKktD,aAAayR,SAAS3+D,KAAK88D,QAEjD,OAAOR,GAAOuD,GAAYvD,IAASuD,GAAW1B,EAAQ2B,EAGxD,OAAO,GAOD3O,EAAVxwD,UAAAssD,oBAAA,SAA8Br1C,GAC1B,MAAQ5X,MAAKktD,aAAa8B,eAAep3C,IAAQ5X,KAAKktD,aAAayB,QAAQ/2C,GAAQA,EAAM,MAInFu5C,EAAVxwD,UAAAw4C,kBACI,MAAOn5C,MAAK2D,MAA4B,QAApB3D,KAAK2D,KAAKc,sBAtQlCjD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEE,SAAU,0hBACVD,SAAU,cACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJAvBAZ,KAAEkuD,GAAFnnD,aAAA/G,KAAAwH,EAAAA,aA+FAxH,KAAAqQ,EAAAA,eAAAtJ,aAAA/G,KAAAwH,EAAAA,cApFAmoD,EAAQzuD,sEAkBRo6D,UAAAt7D,KAAAsB,EAAAA,QAcA85D,UAAAp7D,KAAAsB,EAAAA,QASAi6D,aAAAv7D,KAAAsB,EAAAA,QAQAo6D,iBAAA17D,KAAA0B,EAAAA,SAQAm6D,gBAAA77D,KAAA0B,EAAAA,SAGAk6D,mBAAA57D,KAAAoB,EAAAA,UAAAlB,MAAAqvD,OAMAI,mBCnDE,QAAFE,GAAsB/iC,EACsCyxC,EAC1B7S,EAC0BuB,EAC9ClgC,GAJQvuB,KAAtBsuB,MAAsBA,EACsCtuB,KAA5D+/D,SAA4DA,EAC1B//D,KAAlCktD,aAAkCA,EAC0BltD,KAA5DyuD,aAA4DA,EAL5DzuD,KAAAulB,WAAuB,GAAIphB,GAAAA,QAOvBnE,KAAK+/D,SAAShoB,aAAatyC,KAAKC,EAAAA,UAAU1F,KAAKulB,aAC1C5f,UAAU,WAAM,MAAA4oB,GAAkBrpB,iBA1C3C,MA8CEZ,QAAFC,eAAM8sD,EAAN1wD,UAAA,wBAAE,WACE,GAAiC,SAA7BX,KAAK+/D,SAASC,YAChB,MAAOhgE,MAAKktD,aACP4B,OAAO9uD,KAAK+/D,SAAS1B,WAAYr+D,KAAKyuD,aAAaM,QAAQkR,gBACvDZ,mBAEX,IAAiC,QAA7Br/D,KAAK+/D,SAASC,YAChB,MAAOhgE,MAAKktD,aAAasP,YAAYx8D,KAAK+/D,SAAS1B,WAErD,IAAMkB,GAAav/D,KAAKktD,aAAa2P,QAAQ78D,KAAK+/D,SAAS1B,WAK3D,OAJwBr+D,MAAKktD,aAAasP,YACtCx8D,KAAKktD,aAAauP,WAAW8C,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2Bv/D,KAAKktD,aAAasP,YACrCx8D,KAAKktD,aAAauP,WAAW8C,EFnCT,GEmCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvFj7D,OAAFC,eAAM8sD,EAAN1wD,UAAA,yBAAE,WACE,MAAoC,SAA7BX,KAAK+/D,SAASC,YACjBhgE,KAAKsuB,MAAM4xC,2BAA6BlgE,KAAKsuB,MAAM6xC,wDAIzD77D,OAAFC,eAAM8sD,EAAN1wD,UAAA,uBAAE,WACE,OACEw9D,MAASn+D,KAAKsuB,MAAM8xC,eACpB9D,KAAQt8D,KAAKsuB,MAAM+xC,cACnBC,aAActgE,KAAKsuB,MAAMiyC,oBACzBvgE,KAAK+/D,SAASC,8CAIlB17D,OAAFC,eAAM8sD,EAAN1wD,UAAA,uBAAE,WACE,OACEw9D,MAASn+D,KAAKsuB,MAAMkyC,eACpBlE,KAAQt8D,KAAKsuB,MAAMmyC,cACnBH,aAActgE,KAAKsuB,MAAMoyC,oBACzB1gE,KAAK+/D,SAASC,8CAIlB3O,EAAF1wD,UAAAggE,qBAAE,WACE3gE,KAAK+/D,SAASC,YAA2C,SAA7BhgE,KAAK+/D,SAASC,YAAyB,aAAe,SAIpF3O,EAAF1wD,UAAAigE,gBAAE,WACE5gE,KAAK+/D,SAAS1B,WAA0C,SAA7Br+D,KAAK+/D,SAASC,YACrChgE,KAAKktD,aAAawR,kBAAkB1+D,KAAK+/D,SAAS1B,YAAa,GAC3Dr+D,KAAKktD,aAAa0R,iBACd5+D,KAAK+/D,SAAS1B,WAAyC,QAA7Br+D,KAAK+/D,SAASC,aAAyB,GFxErD,KE6E1B3O,EAAF1wD,UAAAkgE,YAAE,WACE7gE,KAAK+/D,SAAS1B,WAA0C,SAA7Br+D,KAAK+/D,SAASC,YACrChgE,KAAKktD,aAAawR,kBAAkB1+D,KAAK+/D,SAAS1B,WAAY,GAC1Dr+D,KAAKktD,aAAa0R,iBACd5+D,KAAK+/D,SAAS1B,WACmB,QAA7Br+D,KAAK+/D,SAASC,YAAwB,EFlF9B,KEuF1B3O,EAAF1wD,UAAAmgE,gBAAE,WACE,OAAK9gE,KAAK+/D,SAASjD,WAGX98D,KAAK+/D,SAASjD,UACjB98D,KAAK+gE,YAAY/gE,KAAK+/D,SAAS1B,WAAYr+D,KAAK+/D,SAASjD,WAIhEzL,EAAF1wD,UAAAqgE,YAAE,WACE,OAAQhhE,KAAK+/D,SAASnD,UACjB58D,KAAK+gE,YAAY/gE,KAAK+/D,SAAS1B,WAAYr+D,KAAK+/D,SAASnD,UAIxDvL,EAAV1wD,UAAAogE,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7BlhE,KAAK+/D,SAASC,YACThgE,KAAKktD,aAAa2P,QAAQoE,IAAUjhE,KAAKktD,aAAa2P,QAAQqE,IACjElhE,KAAKktD,aAAayR,SAASsC,IAAUjhE,KAAKktD,aAAayR,SAASuC,GAErC,QAA7BlhE,KAAK+/D,SAASC,YACThgE,KAAKktD,aAAa2P,QAAQoE,IAAUjhE,KAAKktD,aAAa2P,QAAQqE,GAGhE3oD,KAAKg1B,MAAMvtC,KAAKktD,aAAa2P,QAAQoE,GF/GpB,KEgHpB1oD,KAAKg1B,MAAMvtC,KAAKktD,aAAa2P,QAAQqE,GFhHjB,KEmH1B7P,EAAF1wD,UAAAwF,YAAE,WACEnG,KAAKulB,WAAWnf,OAChBpG,KAAKulB,WAAWlf,2BArHpB7E,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,quBACVD,SAAU,oBACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAVAZ,KAAQkuD,GAARnnD,aAAA/G,KAAAwH,EAAAA,aA+IAxH,SAAauH,GAAWR,aAAxB/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OA5HiCvH,MA4HjCiuD,QAnJAnuD,KAAQsF,EAAAA,qBAdRuqD,iDAgOA,IAkCArxD,KAAAktD,aAAAA,EAAEltD,KAAFyuD,aAAAA,oNAlCAzuD,KAAAktD,aAgCA,KAAAoQ,GAAA,cAQA,KAAAt9D,KAAYyuD,aACZ,KAAA6O,GAAA,mBAGAt9D,MAAAwsC,aAAAle,EAAApjB,QAAAvF,UAAA,WACA4oB,EAAArpB,eAEQnB,EAAR8nB,cAAAzlB,SA5CA,MA+CA9B,QAAOC,eAAPusD,EAAAnwD,UAAA,WACAqH,+HArGAE,YAAA,EACAC,cAAA,mLAUAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,oMAsCAnI,KAAA6rB,cAAAzlB,QAEA8B,YAAA,EACAC,cAAA,+GAWAD,YAAA,EACAC,cAAA,yHAsBAnI,KAAAq+D,WAAAr+D,KAAAmhE,SAAAnhE,KAAAktD,aAAAsQ,QACIx9D,KAAKggE,YAAThgE,KAAAohE,2JAUA,IAAA97D,IAAAA,EAAA+7D,YAAA,CACA,GAAAC,GAAAthE,KAA0BuhE,WAA1BvhE,KAAAwhE,UAAAxhE,KAAAyhE,aAEAH,IACAA,EAAA1D,QAIA59D,KAAO6rB,cAAPzlB,2FAOApG,KAAAk9D,eAAAn8D,KAAAwtD,8RAqBAvuD,KAAAggE,YAAAsB,gIAUAxQ,EAAYvoD,yiCAzLZzG,QAAA,67CACEQ,MACFC,MAAA,gBAEEX,SAAF,cACEG,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA0uD,EAAAl/C,eAAA,WAAA,QACApQ,KAAA8vD,iJAlJAR,EAAQpuD,gBAsPRg/D,kBAAAlgE,KAAAsB,EAAAA,QApQAq+D,UAAA3/D,KAAAsB,EAAAA,6DAmKAg6D,UAAAt7D,KAAAsB,EAAAA,QAQA85D,UAAAp7D,KAAGsB,EAAAA,QAQHi6D,aAAAv7D,KAAAsB,EAAAA,QAGAo6D,iBAAG17D,KAAH0B,EAAAA,SAQAi6D,eAAA37D,KAAQ0B,EAAAA,SAQRm6D,gBAAG77D,KAAH0B,EAAAA,SAQAy+D,iBAAAngE,KAAA0B,EAAAA,SAGAq+D,YAAA//D,KAAAoB,EAAAA,UAASlB,MAATwvD,MAMAsQ,WAAAhgE,KAAAoB,EAAAA,UAAAlB,MAAAyvD,MAMAsQ,gBAAAjgE,KAAGoB,EAAAA,UAAHlB,MAAA0vD,OAMAN,KC3Na8Q,IAKX3sB,eAAgBl6B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ1a,EAAAA,OAAOikB,QAAS,EAAGtJ,UAAW,iBAC5CD,EAAAA,MAAM,QAAS1a,EAAAA,OAAOikB,QAAS,EAAGtJ,UAAW,iBAC7CC,EAAAA,WAAW,gBAAiBi6B,EAAAA,OAC1BznB,EAAAA,MAAM,kBAAmBC,EAAAA,gBACzBxS,EAAAA,QAAQ,6CAEVD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgB7a,EAAAA,OAAOikB,QAAS,QAIlEs9C,eAAgB9mD,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ1a,EAAAA,OAAOikB,QAAS,KAC9BvJ,EAAAA,MAAM,QAAS1a,EAAAA,OAAOikB,QAAS,KAC/BrJ,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDCahC2mD,GAAgB,EAGPC,GACT,GAAIppD,GAAAA,eAAqC,kCACvCC,WAAY,OACZC,QAAS,WACP,GAAMotB,GAAUC,EAAAA,OAAOlb,EAAAA,QACvB,OAAO,YAAM,MAAAib,GAAQE,iBAAiBC,iBAM9C47B,GAAA,WACE,QAAFA,GAAqB1+D,GAAAtD,KAArBsD,YAAqBA,EAnErB,MAAA0+D,MAqEaC,GAAiCz+D,EAAWw+D,mBA4CvD,QAAF/Q,GACIvtD,EACQG,EACAD,GAHV,GAAFG,GAIIC,EAJJC,KAAAjE,KAIU0D,IAJV1D,WAEY+D,GAAZF,mBAAYA,EACAE,EAAZH,QAAYA,IAXZ,MAP6CS,GAA7C4sD,EAAAjtD,GAsBEitD,EAAFtwD,UAAA8Z,SAAE,WAAA,GAAF1W,GAAA/D,IACI,IAAKA,KAAKgwD,WAAWkS,YAAaliE,KAAKmiE,gBAAvC,CAIA,GAAMn4C,GACJhqB,KAAKgwD,WAAWkS,UAAUt4B,YAA4B,gBAExD5pC,MAAKmiE,gBAAkBn4C,EAAiBsf,gBAAgB3jC,UAAU,SAAAL,GAChE,GAAM88D,GAA6C,WAAnC98D,EAAOokC,eAAeW,QAElC+3B,KAAYr+D,EAAKs+D,UACnBt+D,EAAKH,QAAQwiB,IAAI,WACfriB,EAAKs+D,SAAWD,EAChBr+D,EAAKF,mBAAmBqB,qBAMhC+rD,EAAFtwD,UAAAwE,mBAAE,WACEnF,KAAKi+D,oBAIChN,EAAVtwD,UAAAs9D,sCACIj+D,MAAK4D,QAAQwB,kBAAkB,WAC7BrB,EAAKH,QAAQ4zC,SAAS/zB,eAAehe,KAAK0J,EAAAA,KAAK,IAAIxJ,UAAU,WAC3D5B,EAAKT,YAAYjD,cAAck2B,cAAc,6BAA6BjZ,aAKhF2zC,EAAFtwD,UAAAwF,YAAE,WACMnG,KAAKmiE,kBACPniE,KAAKmiE,gBAAgBhrD,cACrBnX,KAAKmiE,gBAAkB,sBA9E7B3gE,KAACC,EAAAA,UAADC,OAAAC,SAAA,yBACEE,SAAU,yjBACVC,QAAF,wyBACEQ,MACFC,MAAA,yBACM+/D,oBAAN,UACIC,uCAAJ,qBACIC,uCAAJ,YAEAjxD,YACAqwD,GAAA3sB,eACA2sB,GAAAC,gBAEAjgE,SAAA,uBACAG,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,QAAF,gGAlEAb,KAAEqF,EAAAA,UAMFoqD,EAAAvuD,0DAuEAuuD,mEA2MAjxD,KAAAonB,SAAAA,EAAsBpnB,KAAtB4D,QAAsBA,EACA5D,KAAtB+Z,kBAAAA,EACsB/Z,KAAtB6mC,gBAAAA,EACsB7mC,KAAtBktD,aAAAA,EAC8DltD,KAA9D2D,KAAAA,EACkC3D,KAAlC4K,UAA8CA,kbAP9C,KAAA0yD,GAA8C,eA3D9C,MAuEAh5D,QAAAC,eAAAysD,EAAArwD,UAAA,WACAqH,+FAxIA6iB,0FAGA3iB,YAAA,EACAC,cAAA,2JAUA0iB,+BAGA3iB,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,wKAOA0iB,gDAEAwU,KAAAr/B,KAAAk/B,YACAl/B,KAAAk/B,UAAUG,EAEFr/B,KAARstD,gBAAAlnD,KAAAi5B,KAGAn3B,YAAA,EACAC,cAAA,8IA4BEA,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACAC,cAAA,kDAGAH,wEACAE,YAAA,EACAC,cAAA,qDAAAH,gFAGAE,YAAA,EACAC,cAAA,oDA0CAnI,KAAAyiE,mBAAAtrD,cACInX,KAAKstD,gBAATjnD,WACQrG,KAARkiE,YACQliE,KAARkiE,UAAAh/C,UAEQljB,KAAK0iE,mBAAb,2DAOA1iE,MAAA++B,UAAAwvB,EACAvuD,KAAAktD,aAAAyV,SAAmBzoC,EAAnBl6B,KAAkC++B,YAC1B/+B,KAARytD,iBAAArnD,KAAAmoD,qLAoBA,IAAAvuD,KAAAowD,iBAAA,KAAArpC,OAAA,8DAEA/mB,MAAAowD,iBAAAr4B,EACA/3B,KAAAyiE,mBACQziE,KAARowD,iBAAArC,aAAApoD,UAAA,SAAAlB,GAAA,MAAAV,GAAAg7B,UAAAt6B,mEAQA,IAAAzE,KAAYowD,iBACZ,KAAArpC,OAAA,+DAEM/mB,MAAN4K,YACA5K,KAAA4iE,0BAAA5iE,KAAA4K,UAAAi4D,eAEA7iE,KAAA8iE,QAAA9iE,KAAA+iE,gBAAA/iE,KAAAgjE,eACAhjE,KAAA6iC,SAAA,EAEI7iC,KAAKswD,aAATvvD,gDAMA,IAAAf,KAAA6iC,QAAA,CAEM7iC,KAANkiE,WAAAliE,KAAAkiE,UAAAnmD,eACA/b,KAAAkiE,UAAA/lD,SAEMnc,KAAKijE,aACXjjE,KAAAijE,WAAA7gC,QACQpiC,KAAKijE,WAAa,MAEpBjjE,KAAKkjE,iBAAXljE,KAAAkjE,gBAAAjgB,YACAjjD,KAAAkjE,gBAAA/mD,QAEA,IAAAgnD,GAAA,oCAMUp/D,EAAKwsD,aAAfxvD,OACQgD,EAAK6+D,0BAAb,MAGA5iE,MAAA4iE,2BACA,kBAAA5iE,MAAA4iE,0BAAAtlD,6DAWA6lD,2HAOQzpD,iBAAkB1Z,KAA1B+Z,kBACM4M,WAAN,0BAEA3mB,KAAAijE,WAAkBG,cAAlBz9D,UAAA,WAAA,MAAA5B,GAAAq+B,UACApiC,KAAAijE,WAAAI,kBAAArT,WAAAhwD,KAEIA,KAAKsjE,0JAQTtjE,KAAAkiE,WAEAliE,KAAAujE,eAGAvjE,KAAAkiE,UAAAnmD,gBACA/b,KAAAkiE,UAAAsB,aAAAxjE,KAAAyjE,iBAEQzjE,KAAK0iE,mBAAb1iE,KAAuCkiE,UAAvClmD,OAAAhc,KAAAkjE,iBACMljE,KAAK0iE,mBAAX95C,SAAuConC,WAAahwD,KAC9CA,KAAKsjE,YAELtjE,KAAK4D,QAAX4zC,SAAA/zB,eAAAhe,KAAA0J,EAAAA,KAAA,IAAAxJ,UAAA,uKAWAu/B,aAAA,EACMuO,cAAN,mCACM/9B,UAAW1V,KAAjByjE,gBACM95B,eAAN3pC,KAAA6mC,kBACMlgB,WAAN,wBAEA3mB,MAAAkiE,UAAAliE,KAAAonB,SAAAqD,OAAwCX,GACxCtkB,EAAAA,MAAAxF,KAAAkiE,UAAAx+B,gBAAA1jC,KAAAkiE,UAAA14C,cAAAxpB,KAAAkiE,UAAAwB,gBAAAj+D,KAAA6F,EAAAA,OAAA,SAAAlD,GAIA,MACWA,GADX2W,UAAAypB,EAAAA,iEAKA7iC,UAAA,WAAiC,MAAjC5B,GAAAq+B,yKAQA0G,wBAAA,GACOC,mBAAmB,GACnB46B,UAAP,GACO36B,gBAEPe,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,sNAiBArqC,KAAA0iE,mBAAA95C,SAAAoyB,MAAAA,GAEMh7C,KAAKijE,aACXjjE,KAAAijE,WAAAI,kBAAAroB,MAAAA,iFAQAgW,EAAAzoD,2EApXA3G,SAAA,gBACEM,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA+uD,EAAAp/C,eAAiB,WAAjB,QACApQ,KAAAoiE,gEAjIApiE,SAAQuH,GAARR,aAAA/G,KAAAyH,EAAAA,OAAAvH,MAAAqgE,QA/BAvgE,KAAEkuD,GAAFnnD,aAAA/G,KAAAwH,EAAAA,aAqBAxH,KAAEqQ,EAAAA,eAAFtJ,aAAA/G,KAAAwH,EAAAA,aAMAxH,SAAEuH,GAAFR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAuK,EAAAA,eAGA+kD,EAAAtuD,gBAnCAmhE,0BAAAriE,KAAAsB,EAAAA,QAmTAq+D,UAAA3/D,KAAAsB,EAAAA,0DA3IAggE,UAAAthE,KAAAsB,EAAAA,QAGA1B,WAAAI,KAAAsB,EAAAA,QAYAq6D,eAAA37D,KAAA0B,EAAAA,SAGAm6D,gBAAA77D,KAAA0B,EAAAA,SAcAyjB,aAAAnlB,KAAAsB,EAAAA,QAQAwtD,eAAA9uD,KAAA0B,EAAAA,OAAAxB,MAAA,YAmBA6uD,eAAA/uD,KAAG0B,EAAAA,OAAHxB,MAAA,YAMAqgC,SAAAvgC,KAAAsB,EAAAA,SAMAkuD,KnB/Ma/B,IACX/hD,QAAS0lB,EAAAA,kBACTzlB,YAAakP,EAAAA,WAAW,WAAM,MAAAgxC,MAC9Bv6B,OAAO,GAIIo8B,IACXhiD,QAAS42D,EAAAA,cACT32D,YAAakP,EAAAA,WAAW,WAAM,MAAAgxC,MAC9Bv6B,OAAO,GAST86B,GAAA,WAIE,QAAFA,GAEWmW,EAEAC,GAFAhkE,KAAX+jE,OAAWA,EAEA/jE,KAAXgkE,cAAWA,EACPhkE,KAAKyE,MAAQzE,KAAK+jE,OAAOt/D,MApE7B,MAAAmpD,oBA4OE,QAAFP,GACc/pD,EACW4pD,EAC2BuB,EAC1BJ,GAJxB,GAAFtqD,GAAA/D,IAKI,IAJUA,KAAdsD,YAAcA,EACWtD,KAAzBktD,aAAyBA,EAC2BltD,KAApDyuD,aAAoDA,EAC1BzuD,KAA1BquD,WAA0BA,EA/D1BruD,KAAA6tD,WAAM,GAAIrxC,GAAAA,aAIVxc,KAAA2tD,UAAM,GAAInxC,GAAAA,aAGVxc,KAAA+tD,aAAiB,GAAIvxC,GAAAA,aAGrBxc,KAAAstD,gBAAoB,GAAI9wC,GAAAA,aAExBxc,KAAA22C,WAAe,aAEf32C,KAAA0tD,aAA+C,aAE/C1tD,KAAAotD,mBAA+B,aAE/BptD,KAAAwtD,wBAAoCjyC,EAAAA,aAAaC,MAEjDxb,KAAA8tD,oBAAgCvyC,EAAAA,aAAaC,MAG7Cxb,KAAAikE,gBAAyC,WACrC,MAAOlgE,GAAK2qD,gBACR,MAAQwV,oBAAuBC,KAAQpgE,EAAKT,YAAYjD,cAAcoE,SAI9EzE,KAAAokE,cAAuC,SAACnzC,GACpC,GAAMozC,GAAetgE,EAAKkpD,oBAAoBlpD,EAAKmpD,aAAaC,YAAYl8B,EAAQxsB,OACpF,QAASV,EAAK0U,MAAQ4rD,GAClBtgE,EAAKmpD,aAAaoX,YAAYvgE,EAAK0U,IAAK4rD,IAAiB,EACzD,MAAQE,kBAAqB9rD,IAAO1U,EAAK0U,IAAK+rD,OAAUH,KAIhErkE,KAAAykE,cAAuC,SAACxzC,GACpC,GAAMozC,GAAetgE,EAAKkpD,oBAAoBlpD,EAAKmpD,aAAaC,YAAYl8B,EAAQxsB,OACpF,QAASV,EAAK6c,MAAQyjD,GAClBtgE,EAAKmpD,aAAaoX,YAAYvgE,EAAK6c,IAAKyjD,IAAiB,EACzD,MAAQK,kBAAqB9jD,IAAO7c,EAAK6c,IAAK4jD,OAAUH,KAIhErkE,KAAA2kE,iBAA0C,SAAC1zC,GACvC,GAAMozC,GAAetgE,EAAKkpD,oBAAoBlpD,EAAKmpD,aAAaC,YAAYl8B,EAAQxsB,OACpF,OAAQV,GAAK6gE,aAAgBP,IAAgBtgE,EAAK6gE,YAAYP,IAClDxU,qBAAuB,GAA/B,MAKR7vD,KAAAkuD,WAAM2W,EAAAA,WAAWC,SACN9kE,KAAKikE,gBAAiBjkE,KAAKokE,cAAepkE,KAAKykE,cAAezkE,KAAK2kE,mBAG9E3kE,KAAA0uD,iBAA4B,GAOnB1uD,KAAKktD,aACR,KAAMoQ,GAA2B,cAEnC,KAAKt9D,KAAKyuD,aACR,KAAM6O,GAA2B,mBAInCt9D,MAAK8tD,oBAAsBZ,EAAa6X,cAAcp/D,UAAU,WAC9D5B,EAAKU,MAAQV,EAAKU,QA1PxB,MAkGAH,QAAAC,eAAM8oD,EAAN1sD,UAAA,qBAAA,SAAoB8D,GAChBzE,KAAKglE,mBAAmBvgE,oCAIlB4oD,EAAV1sD,UAAAqkE,mBAAA,SAA6BvgE,GACrBA,IACFzE,KAAKutD,YAAc9oD,EACnBzE,KAAKutD,YAAY0X,eAAejlE,QAMtCsE,OAAAC,eAAM8oD,EAAN1sD,UAAA,2BAAA,SAA0B8D,GACtBzE,KAAK4kE,YAAcngE,EACnBzE,KAAKotD,sDAMT9oD,OAAAC,eAAM8oD,EAAN1sD,UAAA,aAAA,WAA0B,MAAOX,MAAK63B,YACpC,SAAUpzB,GACRA,EAAQzE,KAAKktD,aAAaC,YAAY1oD,GACtCzE,KAAK0uD,iBAAmBjqD,GAASzE,KAAKktD,aAAayB,QAAQlqD,GAC3DA,EAAQzE,KAAKitD,oBAAoBxoD,EACjC,IAAMygE,GAAUllE,KAAKyE,KACrBzE,MAAK63B,OAASpzB,EACdzE,KAAK6uD,aAAapqD,GAEbzE,KAAKktD,aAAayV,SAASuC,EAASzgE,IACvCzE,KAAK+tD,aAAahtD,KAAK0D,oCAO7BH,OAAAC,eAAM8oD,EAAN1sD,UAAA,WAAA,WAAwB,MAAOX,MAAKy3B,UAClC,SAAQhzB,GACNzE,KAAKy3B,KAAOz3B,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,IACnEzE,KAAKotD,sDAMT9oD,OAAAC,eAAM8oD,EAAN1sD,UAAA,WAAA,WAAwB,MAAOX,MAAKw3B;MAClC,SAAQ/yB,GACNzE,KAAKw3B,KAAOx3B,KAAKitD,oBAAoBjtD,KAAKktD,aAAaC,YAAY1oD,IACnEzE,KAAKotD,sDAMT9oD,OAAAC,eAAM8oD,EAAN1sD,UAAA,gBAAA,WAA4B,QAASX,KAAKk/B,eACxC,SAAaz6B,GACX,GAAM46B,GAAWx6B,EAAAA,sBAAsBJ,GACjCO,EAAUhF,KAAKsD,YAAYjD,aAE7BL,MAAKk/B,YAAcG,IACrBr/B,KAAKk/B,UAAYG,EACjBr/B,KAAKstD,gBAAgBvsD,KAAKs+B,IAIxBA,GAAYr6B,EAAQ8zB,MAItB9zB,EAAQ8zB,wCAoFZu0B,EAAF1sD,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACQA,MAAKutD,cACPvtD,KAAKwtD,wBAA0BxtD,KAAKutD,YAAYE,iBAAiB9nD,UAAU,SAACirB,GAC1E7sB,EAAKU,MAAQmsB,EACb7sB,EAAK2pD,aAAa98B,GAClB7sB,EAAK4yC,aACL5yC,EAAK4pD,UAAU5sD,KAAK,GAAI6sD,IAAwB7pD,EAAMA,EAAKT,YAAYjD,gBACvE0D,EAAK8pD,WAAW9sD,KAAK,GAAI6sD,IAAwB7pD,EAAMA,EAAKT,YAAYjD,oBAK9EgtD,EAAF1sD,UAAAwF,YAAE,WACEnG,KAAKwtD,wBAAwBr2C,cAC7BnX,KAAK8tD,oBAAoB32C,cACzBnX,KAAK+tD,aAAa1nD,WAClBrG,KAAKstD,gBAAgBjnD,YAIvBgnD,EAAF1sD,UAAAqtD,0BAAE,SAA0Bv5B,GACxBz0B,KAAKotD,mBAAqB34B,GAI5B44B,EAAF1sD,UAAAstD,SAAE,SAAS/I,GACP,MAAOllD,MAAKkuD,WAAaluD,KAAKkuD,WAAWhJ,GAAK,MAOhDmI,EAAF1sD,UAAAwtD,6BAAE,WACE,MAAOnuD,MAAKouD,6BAOdf,EAAF1sD,UAAAytD,0BAAE,WACE,MAAOpuD,MAAKquD,WAAaruD,KAAKquD,WAAWD,4BAA8BpuD,KAAKsD,aAI9E+pD,EAAF1sD,UAAA4zB,WAAE,SAAW9vB,GACTzE,KAAKyE,MAAQA,GAIf4oD,EAAF1sD,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAK0tD,aAAej5B,GAItB44B,EAAF1sD,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAK22C,WAAaliB,GAIpB44B,EAAF1sD,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKoB,SAAWwzB,GAGlBy4B,EAAF1sD,UAAAq6B,WAAE,SAAW5yB,GACLA,EAAMyxC,QAAUzxC,EAAM2W,UAAYsc,EAAAA,aACpCr7B,KAAKutD,YAAYrlC,OACjB9f,EAAMC,mBAIVglD,EAAF1sD,UAAA2tD,SAAE,SAAS7pD,GACP,GAAI8pD,GAAOvuD,KAAKktD,aAAasB,MAAM/pD,EAAOzE,KAAKyuD,aAAaD,MAAMb,UAClE3tD,MAAK0uD,iBAAmBH,GAAQvuD,KAAKktD,aAAayB,QAAQJ,GAC1DA,EAAOvuD,KAAKitD,oBAAoBsB,GAChCvuD,KAAK63B,OAAS02B,EACdvuD,KAAK0tD,aAAaa,GAClBvuD,KAAK+tD,aAAahtD,KAAKwtD,GACvBvuD,KAAK2tD,UAAU5sD,KAAK,GAAI6sD,IAAwB5tD,KAAMA,KAAKsD,YAAYjD,iBAGzEgtD,EAAF1sD,UAAA+1C,UAAE,WACE12C,KAAK6tD,WAAW9sD,KAAK,GAAI6sD,IAAwB5tD,KAAMA,KAAKsD,YAAYjD,iBAI1EgtD,EAAF1sD,UAAAiuD,iBAAE,WACE,MAAO5uD,MAAKquD,WAAaruD,KAAKquD,WAAWrT,UAAQjyC,IAInDskD,EAAF1sD,UAAAo6B,QAAE,WAEM/6B,KAAKyE,OACPzE,KAAK6uD,aAAa7uD,KAAKyE,OAGzBzE,KAAK22C,cAIC0W,EAAV1sD,UAAAkuD,aAAA,SAAuBpqD,GACnBzE,KAAKsD,YAAYjD,cAAcoE,MAC3BA,EAAQzE,KAAKktD,aAAa4B,OAAOrqD,EAAOzE,KAAKyuD,aAAaM,QAAQpB,WAAa,IAO7EN,EAAV1sD,UAAAssD,oBAAA,SAA8Br1C,GAC1B,MAAQ5X,MAAKktD,aAAa8B,eAAep3C,IAAQ5X,KAAKktD,aAAayB,QAAQ/2C,GAAQA,EAAM,qBApS7FpW,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,uBACVsL,WACEgiD,GACAC,IACChiD,QAASiiD,GAA0BhiD,YAAakgD,IAEnD/qD,MACE8sD,uBAAwB,OACxB7O,mBAAoB,kDACpB8O,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZjzB,SAAU,YACVC,YAAa,sBAEf76B,SAAU,6DA/EZJ,KAAE4L,EAAAA,aAmBF5L,KAAQkuD,GAARnnD,aAAA/G,KA8MOwH,EAAAA,aACPxH,SAAAuH,GAAAR,aAAA/G,KAAOwH,EAAAA,WAAPxH,KAAmByH,EAAAA,OAAnBvH,MAA0BiuD,QA9M1BnuD,KAAQ0/C,GAAR34C,aAAA/G,KA+MOwH,EAAAA,gCA/IP4mD,gBAAApuD,KAAGsB,EAAAA,QAcH+sD,sBAAAruD,KAAGsB,EAAAA,QAQH2B,QAAAjD,KAAGsB,EAAAA,QAiBH2V,MAAAjX,KAAGsB,EAAAA,QASH8d,MAAApf,KAAGsB,EAAAA,QASH1B,WAAAI,KAAGsB,EAAAA,QAsBH+qD,aAAArsD,KAAG0B,EAAAA,SAIHyqD,YAAAnsD,KAAG0B,EAAAA,UApLHmqD,iCCAA,sBA4BA7rD,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,gCA7BZmuD,mBAoEE,QAAFC,GAAqBzhC,EAAkCzqB,GAAlC7D,KAArBsuB,MAAqBA,EAAkCtuB,KAAvD6D,mBAAuDA,EAlBvD7D,KAAA6rB,cAA0BtQ,EAAAA,aAAaC,MAgBvC,MATAlX,QAAAC,eAAMwrD,EAANpvD,UAAA,2BACI,WAA0BoI,KAAnB/I,KAAKk/B,UAA0Bl/B,KAAKgwD,WAAW5uD,WAAapB,KAAKk/B,eAE1E,SAAaz6B,GACXzE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,oCASzCsrD,EAAFpvD,UAAA4Z,YAAE,SAAYrP,GACNA,EAAR,YACMlL,KAAKiwD,sBAITF,EAAFpvD,UAAAwF,YAAE,WACEnG,KAAK6rB,cAAc1U,eAGrB44C,EAAFpvD,UAAAwE,mBAAE,WACEnF,KAAKiwD,sBAGPF,EAAFpvD,UAAAq9B,MAAE,SAAM51B,GACApI,KAAKgwD,aAAehwD,KAAKoB,WAC3BpB,KAAKgwD,WAAW9nC,OAChB9f,EAAM+rB,oBAIF47B,EAAVpvD,UAAAsvD,yCACUC,EAAqBlwD,KAAKgwD,WAAahwD,KAAKgwD,WAAW1C,gBAAkB/nD,EAAAA,KACzE4qD,EAAgBnwD,KAAKgwD,YAAchwD,KAAKgwD,WAAWI,iBACrDpwD,KAAKgwD,WAAWI,iBAAiB9C,gBAAkB/nD,EAAAA,KACjD8qD,EAAoBrwD,KAAKgwD,WAC3BxqD,EAAAA,MAAMxF,KAAKgwD,WAAWM,aAActwD,KAAKgwD,WAAWO,cACpDhrD,EAAAA,IAEJvF,MAAK6rB,cAAc1U,cACnBnX,KAAK6rB,cAAgBrmB,EAAAA,MACnBxF,KAAKsuB,MAAMpjB,QACXglD,EACAC,EACAE,GACA1qD,UAAU,WAAM,MAAA5B,GAAKF,mBAAmBqB,iCAvE9C1D,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEE,SAAU,4hBACVC,QAAF,quBACEQ,MACFC,MAAA,wBACMiuD,uCAAN,kCACIC,qBAAJ,8CACIC,mBAAJ,6CAEA9uD,SAAA,sBACAG,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAjCA2tD,EAAArtD,mFAyCAiuD,cAAAnvD,KAAA0wB,EAAAA,aAAAxwB,MAAAouD,OAaAC,iCClEA,sBA0BAvuD,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACA8I,GACAw+C,GACAvlC,EAAAA,cACAwlC,EAAAA,WACArnD,EAAAA,cAEFG,SACEmnD,GACAC,GACAC,GACAC,GACA5D,GACA0C,GACAD,GACAoB,GACAC,GACAC,GACAC,IAEFtnD,cACE+mD,GACAC,GACAC,GACAC,GACA5D,GACA0C,GACAD,GACAoB,GACAC,GACAC,GACAC,IAEFpkD,WACEqkD,IAEFhmC,iBACE2lC,GACAI,QAlEJE,gCC+BAvxD,KAAA83B,WAA+B,EAM/B93B,KAAAwxD,QAA4B,EAH5B,MALAltD,QAAAC,eAAMktD,EAAN9wD,UAAA,gBAAA,WAA4B,MAAOX,MAAK83B,eACtC,SAAarzB,GAAkBzE,KAAK83B,UAAYjzB,EAAAA,sBAAsBJ,oCAKxEH,OAAAC,eAAMktD,EAAN9wD,UAAA,aAAA,WAAyB,MAAOX,MAAKwxD,YACnC,SAAU/sD,GAAkBzE,KAAKwxD,OAAS3sD,EAAAA,sBAAsBJ,mDAzBlEjD,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEW,MACFsK,KAAA,YACMswB,0BAAN,uCACIw0B,+BAAJ,WACIC,4BAAJ,QACIpvD,MAAJ,eAEAV,SAAA,GACAC,QAAA,+SACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,+EAYAqvD,iCClCA,sBAcAjwD,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,GAAiBD,EAAAA,cAC3BK,SAAU8nD,GAAYloD,IACtBQ,cAAe0nD,QAjBjBlP,qFC8BAx+C,GAAA6tD,aAAiC,EAUjC7tD,EAAA8tD,YAAkD,YAxClD,MAyBkCxtD,GAAlCytD,EAAA9tD,GAGAM,OAAAC,eAAMutD,EAANnxD,UAAA,kBAAA,WAA8B,MAAOX,MAAK4xD,iBACxC,SAAerrD,GAAiBvG,KAAK4xD,YAAc/sD,EAAAA,sBAAsB0B,mDAX3E/E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,gBACVC,SAAU,eACVU,MACEC,MAAO,uCAKXwvD,aAAAvwD,KAAGsB,EAAAA,QAaH+uD,cAAArwD,KAAGsB,EAAAA,SAxCHgvD,GAyBkCE,EAAAA,c1EFrBC,IAMXC,gBAAiBn3C,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,YAAa1a,EAAAA,OAAO2a,UAAW,kBACrCD,EAAAA,MAAM,WAAY1a,EAAAA,OAAO2a,UAAW,oBACpCC,EAAAA,WAAW,yBAA0BC,EAAAA,QAZO,wCAgB9Cg3C,sBAAuBp3C,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,YAAa1a,EAAAA,OACjBC,OAAQ,yBAER6xD,QAASC,gBAAiB,UAE5Br3C,EAAAA,MAAM,WAAY1a,EAAAA,OAChBC,OAAQ,wBAER6xD,QAASE,eAAgB,UAE3Bp3C,EAAAA,WAAW,yBAA0Bi6B,EAAAA,OACnCznB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiBC,UAAU,IACrDzS,EAAAA,QA7B0C,0CAkC9Co3C,cAAex3C,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,YAAa1a,EAAAA,OAAOC,OAAQ,MAAO+Y,WAAY,YACrD0B,EAAAA,MAAM,WAAY1a,EAAAA,OAAOC,OAAQ,IAAK+Y,WAAY,aAClD4B,EAAAA,WAAW,yBAA0BC,EAAAA,QArCO,uD2EF9C,QAAFq3C,GAAqB/P,GAAAziD,KAArByiD,UAAqBA,EAlBrB,sBAcAjhD,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,gFAPZH,KAAmBmY,EAAAA,eARnB64C,KCwCIC,GAAW,iBAkDb,QAAFC,GAAkCC,EACpB9uD,EACA+uD,EACQ74C,GAHpB,GAAFhW,GAIIC,EAJJC,KAAAjE,KAIU2yD,EAAW9uD,EAAoB+uD,IAJzC5yD,WAGsB+D,GAAtBgW,kBAAsBA,EApBtBhW,EAAA6tD,aAAwB,EAGxB7tD,EAAA8uD,cAA2B,GAAI1uD,GAAAA,QAY/BJ,EAAA+uD,UAAc,8BAA8BL,KAOxC1uD,EAAK4uD,UAAYA,IAbrB,MAjBuCtuD,GAAvCquD,EAAA1uD,GAIAM,OAAAC,eAAMmuD,EAAN/xD,UAAA,kBAAA,WAA8B,MAAOX,MAAK4xD,iBACxC,SAAentD,GACbzE,KAAK4xD,YAAc/sD,EAAAA,sBAAsBJ,oCA4B3CiuD,EAAF/xD,UAAAoyD,eAAE,WACE,MAAI/yD,MAAK2yD,UACA3yD,KAAK2yD,UAAUZ,WAEjB/xD,KAAK+xD,YAIdW,EAAF/xD,UAAAqyD,YAAE,WACE,QAAIhzD,KAAK2yD,WAC4E,aAA3E3yD,KAAKizD,SAAWjzD,KAAK2yD,UAAUd,YAAc7xD,KAAKkzD,sBAM9DR,EAAF/xD,UAAAuyD,kBAAE,WACE,MAAOlzD,MAAKizD,SAAW,WAAa,aAGtCP,EAAF/xD,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACQA,MAAKmzD,cAEPnzD,KAAK+hC,OAAOt8B,KACVkW,EAAAA,UAAS,MACTrQ,EAAAA,OAAO,WAAM,MAAAvH,GAAKkvD,WAAalvD,EAAKqkC,UACpCj5B,EAAAA,KAAK,IACLxJ,UAAU,WACV5B,EAAKqkC,QAAU,GAAI1tB,GAAAA,eAAe3W,EAAKovD,aAAa1Q,UAAW1+C,EAAKgW,sBAK1E24C,EAAF/xD,UAAA4Z,YAAE,SAAYrP,GACVlL,KAAK6yD,cAAczsD,KAAK8E,IAG1BwnD,EAAF/xD,UAAAwF,YAAE,WACEnC,EAAJrD,UAAUwF,YAAVlC,KAAAjE,MACIA,KAAK6yD,cAAcxsD,YAGrBqsD,EAAF/xD,UAAAyyD,eAAE,SAAehrD,GACb,GAAM1D,GAAY0D,EAAMpD,QAAQN,UAEzB2uD,EAAXjrD,EAAAirD,UAAsBt2C,EAAtB3U,EAAA2U,OAMsB,UAAds2C,GAAoC,aAAZt2C,EAC1BrY,EAAUE,IARK,gBASQ,UAAdyuD,GAAqC,cAAZt2C,GAClCrY,EAAUC,OAVK,gCA/FrBnD,KAACC,EAAAA,UAADC,OAAAI,QAAA,y5BACEH,SAAU,sBACVC,SAAF,oBACEC,SAAU,meACVE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,QAAF,WAAA,YACEixD,SAAF,SAAA,SAAA,kBACE/hD,YAAF0gD,GAAAM,eACEjwD,MACFC,MAAe,sBACTgxD,uBAAN,WACIC,sCAAJ,2IA7BAhyD,KAAQq/B,EAAAA,4BAfRr/B,KAAE6K,EAAAA,oBAUFqmD,EAAAhwD,4FAwDAgwD,uBAlFAe,GAAA,yBAmKA,wEALAnxD,MACAC,MAAA,sBAIAkxD,mBCjGE,QAAFC,GACmB7Y,EACP3qB,EACAD,EACApsB,GAJV,GAAFE,GAAA/D,IACmBA,MAAnB66C,MAAmBA,EACP76C,KAAZkwB,SAAYA,EACAlwB,KAAZiwB,cAAYA,EACAjwB,KAAZ6D,mBAAYA,EANZ7D,KAAA2zD,0BAAsCp4C,EAAAA,aAAaC,MAU/Cxb,KAAK2zD,0BAA4BnuD,EAAAA,MAC/Bq1C,EAAM9Y,OACN8Y,EAAMz3B,OACNy3B,EAAMgY,cAAcptD,KAAK6F,EAAAA,OAAO,SAAAJ,GAAW,SAAGA,EAHpD,aAG0EA,EAH1E,cAKKvF,UAAU,WAAM,MAAA5B,GAAKF,mBAAmBqB,iBAEzC+qB,EAAcE,QAAQD,EAAS7vB,eAOnC,MAGEqzD,GAAF/yD,UAAAizD,QAAE,WACE5zD,KAAK66C,MAAM/lB,UAIb4+B,EAAF/yD,UAAAkzD,YAAE,WACE,MAAO7zD,MAAK66C,MAAMoY,UAIpBS,EAAF/yD,UAAAuyD,kBAAE,WACE,MAAOlzD,MAAK66C,MAAMqY,qBAIpBQ,EAAF/yD,UAAAmzD,YAAE,WACE,MAAO9zD,MAAK66C,MAAMxuB,IAIpBqnC,EAAF/yD,UAAAozD,YAAE,WACE,OAAQ/zD,KAAK66C,MAAMkX,aAAe/xD,KAAK66C,MAAMz5C,UAI/CsyD,EAAF/yD,UAAAqzD,SAAE,SAAS5rD,GACP,OAAQA,EAAM2W,SAEZ,IAAKU,GAAAA,MACL,IAAKD,GAAAA,MACHpX,EAAMC,iBACNrI,KAAK4zD,SACL,MACF,SACE,SAINF,EAAF/yD,UAAAwF,YAAE,WACEnG,KAAK2zD,0BAA0Bx8C,cAC/BnX,KAAKiwB,cAAcI,eAAerwB,KAAKkwB,SAAS7vB,+BAnGpDmB,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEG,QAAF,u3BACED,SAAU,mRACVE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEmP,YACF0gD,GAAAC,gBACAD,GAAAE,uBAEA7vD,MACAC,MAAA,6BACMqK,KAAN,SACIg0B,YAAJ,kBACIsf,kBAAJ,0BACI+T,uBAAJ,gBACInnD,uBAAJ,gBACIrE,uBAAwB,iBACxB8qD,uBAAwB,gBACxB1qD,UAAJ,YACI4zB,YAAJ,mBACIy3B,qBAAsB,uQA5B1B1yD,KAAQ20B,EAAAA,eATR30B,KAAEsF,EAAAA,qBAHF4sD,EAAAhxD,kFA4EAgxD,iCAyDA,+EALApxD,MACAC,MAAA,8CAIA4xD,iCAaA,yEALA7xD,MACAC,MAAA,wCAIA6xD,iCC9JA,sBAsBA5yD,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUC,EAAAA,aAAc+qD,EAAAA,mBAAoB7qD,EAAAA,cAC5CG,SACEmoD,GACAY,GACAe,GACAC,GACAU,GACAD,GACA3B,IAEFzoD,cACE+nD,GACAY,GACAe,GACAC,GACAU,GACAD,GACA3B,QAxCJ8B,mBCsCE,QAAFC,GAAsBrkC,GAAAlwB,KAAtBkwB,SAAsBA,EAHtBlwB,KAAAw0D,SAAqB,EACrBx0D,KAAAy0D,SAAqB,EAUrB,MAJAnwD,QAAAC,eAAMgwD,EAAN5zD,UAAA,eAAA,WAA0B,MAAOX,MAAKw0D,cACpC,SAAY/vD,GAAiBzE,KAAKw0D,SAAWE,EAAejwD,oCAI9DH,OAAAC,eAAMgwD,EAAN5zD,UAAA,eAAA,WAA0B,MAAOX,MAAKy0D,cACpC,SAAYhwD,GAAiBzE,KAAKy0D,SAAWC,EAAejwD,oCAM5D8vD,EAAF5zD,UAAAg0D,UAAE,SAAUC,EAAkBnwD,GAC1BzE,KAAKkwB,SAAS7vB,cAAcC,MAAMs0D,GAAYnwD,kBAjClDjD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVU,MACFC,MAAA,iBAEAV,SAAA,gEACAC,QAAA,gvCACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oEAnBAmyD,EAAE7xD,mEAmCF6xD,KA9CAM,GAAA,8IA6EAA,EAAAtsD,aACA/G,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qPAnBAO,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA4yD,EAAEjjD,eAAF,WAAA,QACApQ,KAAA4L,EAAAA,8GAqBA,+HAAA0nD,iCAUA,sHAAAC,iCAUA,sHAAAC,KC9EAC,GAAA,WA2BE,QAAFA,GAAcC,EAAoBC,GAAhC,GAAFpxD,GAAA/D,IAtBAA,MAAAo1D,YAAwB,EAGxBp1D,KAAAq1D,SAAqB,EAoBjBr1D,KAAKs1D,QAAU,GAAI1uC,OAAMsuC,GACzBl1D,KAAKs1D,QAAQC,KAAK,EAAG,EAAGv1D,KAAKs1D,QAAQnqD,QAErCnL,KAAKuZ,UAAY47C,EAAMpkD,IAAI,SAAAykD,GAAQ,MAAAzxD,GAAK0xD,WAAWD,KA3DvD,MAuCElxD,QAAFC,eAAM0wD,EAANt0D,UAAA,gBAAE,WAAyB,MAAOX,MAAKq1D,SAAW,mCAMhD/wD,OAAFC,eAAM0wD,EAANt0D,UAAA,eAAE,WACE,GAAI+0D,GAAan9C,KAAKqI,IAA1B9P,MAAqByH,KAAYvY,KAAKs1D,QAGlC,OAAOI,GAAa,EAAI11D,KAAK21D,SAAWD,EAAa,EAAI11D,KAAK21D,0CAcxDV,EAAVt0D,UAAA80D,WAAA,SAAqBD,GAEjB,GAAII,GAAgB51D,KAAK61D,iBAAiBL,EAAKM,QAS/C,OANA91D,MAAK+1D,kBAAkBH,EAAeJ,GAItCx1D,KAAKo1D,YAAcQ,EAAgBJ,EAAKM,QAEjC,GAAIE,IAAah2D,KAAKq1D,SAAUO,IAIjCX,EAAVt0D,UAAAk1D,iBAAA,SAA2BI,GACvB,GAAIA,EAAWj2D,KAAKs1D,QAAQnqD,OAC1B,KAAM4b,OAAM,oCAAoCkvC,EAAtD,kCACyCj2D,KAAKs1D,QAAQnqD,OAAtD,KAII,IAAIyqD,IAAiB,EACjBM,GAAe,CAGnB,IAEMl2D,KAAKo1D,YAAca,EAAWj2D,KAAKs1D,QAAQnqD,OAC7CnL,KAAKm2D,YAIPP,EAAgB51D,KAAKs1D,QAAQ7+C,QAAQ,EAAGzW,KAAKo1D,cAGvB,GAAlBQ,GAKJM,EAAcl2D,KAAKo2D,iBAAiBR,GAIpC51D,KAAKo1D,YAAcQ,EAAgB,GARjC51D,KAAKm2D,kBAWAD,EAAcN,EAAgBK,EAIvC,OAAO19C,MAAKqI,IAAIg1C,EAAe,IAIzBX,EAAVt0D,UAAAw1D,oBACIn2D,KAAKo1D,YAAc,EACnBp1D,KAAKq1D,UAGL,KAAK,GAAIrlD,GAAI,EAAGA,EAAIhQ,KAAKs1D,QAAQnqD,OAAQ6E,IACvChQ,KAAKs1D,QAAQtlD,GAAKuI,KAAKqI,IAAI,EAAG5gB,KAAKs1D,QAAQtlD,GAAK,IAQ5CilD,EAAVt0D,UAAAy1D,iBAAA,SAA2BR,GACvB,IAAK,GAAI5lD,GAAI4lD,EAAgB,EAAG5lD,EAAIhQ,KAAKs1D,QAAQnqD,OAAQ6E,IACvD,GAAuB,GAAnBhQ,KAAKs1D,QAAQtlD,GACf,MAAOA,EAKX,OAAOhQ,MAAKs1D,QAAQnqD,QAId8pD,EAAVt0D,UAAAo1D,kBAAA,SAA4BjqC,EAAe0pC,GACvC,IAAK,GAAIxlD,GAAI,EAAGA,EAAIwlD,EAAKM,QAAS9lD,IAChChQ,KAAKs1D,QAAQxpC,EAAQ9b,GAAKwlD,EAAKa,SAnJrCpB,KA4JAe,GAAA,WACE,QAAFA,GAAqBM,EAAoBC,GAApBv2D,KAArBs2D,IAAqBA,EAAoBt2D,KAAzCu2D,IAAyCA,EA7JzC,MAAAP,MCiBAQ,GAAA,wBAEAx2D,KAAAy2D,MAAkB,EAClBz2D,KAAAw0D,SAAqB,EApBrB,MAiCEgC,GAAF71D,UAAA+1D,KAAE,SAAKC,EAAoBrB,EAA0BsB,EAAclhD,GAC/D1V,KAAK62D,YAAcC,EAAeH,GAClC32D,KAAKy2D,MAAQnB,EAAQK,SACrB31D,KAAKw0D,SAAWc,EAAQe,QACxBr2D,KAAK+2D,MAAQH,EACb52D,KAAK+rB,WAAarW,GAUpB8gD,EAAF71D,UAAAq2D,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkCj3D,KAAK62D,YAAvC,MAAwDK,EAAxD,MAUEV,EAAF71D,UAAAw2D,gBAAE,SAAgBC,EAAkB92C,GAGhC,MAAkB,KAAXA,EAAe,IAAM+2C,EAAK,IAAID,EAAzC,MAAuDp3D,KAAK62D,YAA5D,OAA8Ev2C,IAU5Ek2C,EAAF71D,UAAA22D,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDv3D,KAAK62D,YAA5D,KAUEL,EAAF71D,UAAA62D,SAAE,SAAShC,EAAmBH,EAAkBoC,GAE5C,GAAIC,GAAsB,IAAM13D,KAAK+2D,MAIjCY,GAA8B33D,KAAK+2D,MAAQ,GAAK/2D,KAAK+2D,KAEzD/2D,MAAK43D,aAAapC,EAAMiC,EAAUC,EAAqBC,GACvD33D,KAAK63D,aAAarC,EAAMH,EAAUqC,EAAqBC,IAIzDnB,EAAF71D,UAAAi3D,aAAE,SAAapC,EAAmBiC,EAAkBK,EACrCC,GAEX,GAAIC,GAAgBh4D,KAAKg3D,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApBj4D,KAAK+rB,WAAuB,QAAU,MACjDypC,GAAKb,UAAUsD,EAAMj4D,KAAKm3D,gBAAgBa,EAAeP,IACzDjC,EAAKb,UAAU,QAAS0C,EAAKr3D,KAAKs3D,YAAYU,EAAexC,EAAKM,YAMpEU,EAAF71D,UAAAu3D,cAAE,WACE,MAAUl4D,MAAK62D,YAAnB,OAAqC72D,KAAKw0D,SAA1C,SAOEgC,EAAF71D,UAAAw3D,YAAE,SAAYC,GACV,MAAUp4D,MAAKw0D,SAAnB,MAAiCx0D,KAAKs3D,YAAYc,EAAY,IAgB5D5B,EAAF71D,UAAA03D,kBAAE,WAA+C,MAAO,OA7IxD7B,KA6JA8B,GAAA,SAAAt0D,GAEE,QAAFs0D,GAAqBC,GAAnB,GAAFx0D,GAA+CC,EAA/CC,KAAAjE,OAAAA,WAAqB+D,GAArBw0D,eAAqBA,IA/JrB,MA6JqCl0D,GAArCi0D,EAAAt0D,GAIEs0D,EAAF33D,UAAA+1D,KAAE,SAAKC,EAAoBrB,EAA0BsB,EAAclhD,GAC/D1R,EAAJrD,UAAU+1D,KAAVzyD,KAAAjE,KAAe22D,EAAYrB,EAASsB,EAAMlhD,GACtC1V,KAAKu4D,eAAiBzB,EAAe92D,KAAKu4D,iBAG5CD,EAAF33D,UAAAk3D,aAAE,SAAarC,EAAmBH,GAC9BG,EAAKb,UAAU,MAAO30D,KAAKm3D,gBAAgBn3D,KAAKu4D,eAAgBlD,IAChEG,EAAKb,UAAU,SAAU0C,EAAKr3D,KAAKs3D,YAAYt3D,KAAKu4D,eAAgB/C,EAAKa,YAG3EiC,EAAF33D,UAAA03D,kBAAE,WACE,OACE,SAAUhB,EAAQr3D,KAAKm4D,YAAYn4D,KAAKu4D,gBAA9C,MAAmEv4D,KAAKk4D,mBAItEI,EAAF33D,UAAA63D,MAAE,SAAMC,GACJA,EAAKC,eAAe,SAAU,OAE9BD,EAAKE,OAAOjyD,QAAQ,SAAA8uD,GAClBA,EAAKb,UAAU,MAAO,MACtBa,EAAKb,UAAU,SAAU,SAtL/B2D,GA6JqC9B,IAoCrCoC,GAAA,SAAA50D,GAME,QAAF40D,GAAcn0D,GAAZ,GAAFV,GACIC,EADJC,KAAAjE,OAAAA,WAEI+D,GAAK80D,YAAYp0D,KAzMrB,MAiMqCJ,GAArCu0D,EAAA50D,GAWE40D,EAAFj4D,UAAAk3D,aAAE,SAAarC,EAAmBH,EAAkByC,EACrCC,GACX,GAAIe,GAAuBhB,EAAe93D,KAAK+4D,cAC/C/4D,MAAKg5D,eAAiBh5D,KAAKg3D,gBAAgB8B,EAAsBf,GAKjEvC,EAAKb,UAAU,YAAa30D,KAAKm3D,gBAAgBn3D,KAAKg5D,eAAgB3D,IACtEG,EAAKb,UAAU,aAAc0C,EAAKr3D,KAAKs3D,YAAYt3D,KAAKg5D,eAAgBxD,EAAKa,YAG/EuC,EAAFj4D,UAAA03D,kBAAE,WACE,OACE,gBAAiBhB,EAAQr3D,KAAKm4D,YAAYn4D,KAAKg5D,gBAArD,MAA0Eh5D,KAAKk4D,mBAI7EU,EAAFj4D,UAAA63D,MAAE,SAAMC,GACJA,EAAKC,eAAe,gBAAiB,OAErCD,EAAKE,OAAOjyD,QAAQ,SAAA8uD,GAClBA,EAAKb,UAAU,YAAa,MAC5Ba,EAAKb,UAAU,aAAc,SAIzBiE,EAAVj4D,UAAAk4D,YAAA,SAAsBp0D,GAClB,GAAMw0D,GAAax0D,EAAMg0B,MAAM,IAE/B,IAA0B,IAAtBwgC,EAAW9tD,OACb,KAAM4b,OAAM,uDAAuDtiB,EAAzE,IAGIzE,MAAK+4D,eAAiBG,WAAWD,EAAW,IAAMC,WAAWD,EAAW,KA9O5EL,GAiMqCpC,IAwDrC2C,GAAA,SAAAn1D,+DAzPA,MAyPmCK,GAAnC80D,EAAAn1D,GAEEm1D,EAAFx4D,UAAAk3D,aAAE,SAAarC,EAAmBH,GAE9B,GAAIyD,GAAuB,IAAM94D,KAAKw0D,SAGlC4E,GAAuBp5D,KAAKy2D,MAAQ,GAAKz2D,KAAKy2D,MAG9CuC,EAAiBh5D,KAAKg3D,gBAAgB8B,EAAsBM,EAEhE5D,GAAKb,UAAU,MAAO30D,KAAKm3D,gBAAgB6B,EAAgB3D,IAC3DG,EAAKb,UAAU,SAAU0C,EAAKr3D,KAAKs3D,YAAY0B,EAAgBxD,EAAKa,YAGtE8C,EAAFx4D,UAAA63D,MAAE,SAAMC,GACJA,EAAKE,OAAOjyD,QAAQ,SAAA8uD,GAClBA,EAAKb,UAAU,MAAO,MACtBa,EAAKb,UAAU,SAAU,SA5Q/BwE,GAyPmC3C,kBCpLjC,QAAF6C,GAAsBnpC,EAA0CvsB,GAA1C3D,KAAtBkwB,SAAsBA,EAA0ClwB,KAAhE2D,KAAgEA,EARhE3D,KAAAs5D,QAA4B,MAqB5B,MATAh1D,QAAAC,eAAM80D,EAAN14D,UAAA,YAAA,WAAuB,MAAOX,MAAK+2D,WACjC,SAAStyD,GAAiBzE,KAAK+2D,MAAQrC,EAAejwD,oCAIxDH,OAAAC,eAAM80D,EAAN14D,UAAA,kBAAA,WAA6B,MAAOX,MAAKs5D,aACvC,SAAe70D,GAAiBzE,KAAKs5D,QAAUC,EAAe90D,oCAIhEH,OAAAC,eAAM80D,EAAN14D,UAAA,iBAAA,SAAgB8D,GACZ,GAAM46B,GAAWk6B,EAAe90D,EAE5B46B,KAAar/B,KAAKw5D,aACpBx5D,KAAKw5D,WAAan6B,EAClBr/B,KAAKy5D,eAAez5D,KAAKw5D,8CAI7BH,EAAF14D,UAAA8Z,SAAE,WACEza,KAAK05D,aACL15D,KAAK25D,mBAOPN,EAAF14D,UAAAkF,sBAAE,WACE7F,KAAK45D,gBAICP,EAAV14D,UAAA+4D,sBACI,IAAK15D,KAAK42D,KACR,KAAM7vC,OAAM,qFAMRsyC,EAAV14D,UAAAg5D,2BACS35D,KAAKw5D,YACRx5D,KAAKy5D,eAAe,QAKhBJ,EAAV14D,UAAA84D,eAAA,SAAyBI,GACjB75D,KAAK85D,aACP95D,KAAK85D,YAAYtB,MAAMx4D,MAzFR,QA4Fb65D,EACF75D,KAAK85D,YAAc,GAAIX,IACdU,GAAaA,EAAUpjD,QAAQ,MAAQ,EAChDzW,KAAK85D,YAAc,GAAIlB,IAAgBiB,GAEvC75D,KAAK85D,YAAc,GAAIxB,IAAgBuB,IAKnCR,EAAV14D,UAAAi5D,mCACUtE,EAAU,GAAIL,IAAgBj1D,KAAK42D,KAAM52D,KAAK24D,QAC9CjjD,EAAY1V,KAAK2D,KAAO3D,KAAK2D,KAAKc,MAAQ,KAChDzE,MAAK85D,YAAYpD,KAAK12D,KAAK22D,WAAYrB,EAASt1D,KAAK42D,KAAMlhD,GAE3D1V,KAAK24D,OAAOjyD,QAAQ,SAAC8uD,EAAMlmD,GACzB,GAAMmsB,GAAM65B,EAAQ/7C,UAAUjK,EAC9BvL,GAAK+1D,YAAYtC,SAAShC,EAAM/5B,EAAI66B,IAAK76B,EAAI86B,OAG/Cv2D,KAAK04D,cAAc14D,KAAK85D,YAAYzB,sBAItCgB,EAAF14D,UAAA+3D,cAAE,SAAcp4D,GACRA,IACFN,KAAKkwB,SAAS7vB,cAAcC,MAAMA,EAAM,IAAMA,EAAM,oBApH1DkB,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVC,SAAU,uCACVC,QAAF,gvCACEQ,MACFC,MAAA,iBAEAL,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,yHArBAo3D,EAAQ32D,kFA4CRi0D,aAAAn1D,KAAAsB,EAAAA,QAKA+2D,YAAAr4D,KAAQsB,EAAAA,SAURu2D,iCClFA,sBAiBA73D,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAU04C,GAAex4C,IACzBI,SACE0vD,GACA9E,GACAM,GACA9S,GACAx4C,GACAwrD,GACAC,GACAF,IAEF/qD,cACEsvD,GACA9E,GACAM,GACAE,GACAC,GACAF,QAnCJiF,KjBsEAC,GAAA,WAME,QAAFA,GAAcxsD,GAGJ,EAAc05B,SAClBlnC,KAAK8nD,WAAU,EAEf9nD,KAAKgoD,IAAG,EAlFd,MAAAgS,oBA6HE,QAAF7R,GACwBmB,EACZE,EACsB7+C,GAFV3K,KAAxBspD,YAAwBA,EACZtpD,KAAZwpD,WAAYA,EA1BZxpD,KAAAqqD,gBAA4B,GAAIz+B,KAMhC5rB,KAAAyqD,gBAA4B,GAAI7+B,KAGhC5rB,KAAAi6D,kBAA8B,GAAIruC,KAGlC5rB,KAAA8pD,sBAAkC,GAAIl+B,KAGtC5rB,KAAAk6D,uBAAmC,GAAItuC,KAOvC5rB,KAAAm6D,qBAAiC,iBAM3Bn6D,KAAK4K,UAAYD,EAjIvB,MAyIEw9C,GAAFxnD,UAAAy5D,WAAE,SAAW1R,EAAkBV,GAC3B,MAAOhoD,MAAKq6D,sBAAsB,GAAI3R,EAAUV,IAQlDG,EAAFxnD,UAAA25D,kBAAE,SAAkB5R,EAAkB6R,GAClC,MAAOv6D,MAAKw6D,6BAA6B,GAAI9R,EAAU6R,IASzDpS,EAAFxnD,UAAA05D,sBAAE,SAAsBjQ,EAAmB1B,EAAkBV,GACzD,MAAOhoD,MAAKmqD,kBAAkBC,EAAW1B,EAAU,GAAIsR,IAAchS,KASvEG,EAAFxnD,UAAA65D,6BAAE,SAA6BpQ,EAAmB1B,EAAkB6R,GAChE,GAAME,GAAmBz6D,KAAKwpD,WAAWC,SAASC,EAAAA,gBAAgBgR,KAAMH,EAExE,KAAKE,EACH,KAAME,IAAuCJ,EAG/C,IAAMzS,GAAa9nD,KAAKooD,+BAA+BqS,EACvD,OAAOz6D,MAAKmqD,kBAAkBC,EAAW1B,EAAU,GAAIsR,IAAclS,KAOvEK,EAAFxnD,UAAAi6D,cAAE,SAAc5S,GACZ,MAAOhoD,MAAK66D,yBAAyB,GAAI7S,IAO3CG,EAAFxnD,UAAAm6D,qBAAE,SAAqBP,GACnB,MAAOv6D,MAAK+6D,gCAAgC,GAAIR,IAQlDpS,EAAFxnD,UAAAk6D,yBAAE,SAAyBzQ,EAAmBpC,GAC1C,MAAOhoD,MAAKuqD,qBAAqBH,EAAW,GAAI4P,IAAchS,KAQhEG,EAAFxnD,UAAAo6D,gCAAE,SAAgC3Q,EAAmBmQ,GACjD,GAAME,GAAmBz6D,KAAKwpD,WAAWC,SAASC,EAAAA,gBAAgBgR,KAAMH,EAExE,KAAKE,EACH,KAAME,IAAuCJ,EAG/C,IAAMzS,GAAa9nD,KAAKkoD,sBAAsBuS,EAC9C,OAAOz6D,MAAKuqD,qBAAqBH,EAAW,GAAI4P,IAAclS,KAWhEK,EAAFxnD,UAAAq6D,uBAAE,SAAuBC,EAAevW,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxCuW,GACIj7D,KAAKk6D,uBAAuBrvC,IAAIowC,EAAOvW,GAChC1kD,MAOTmoD,EAAFxnD,UAAA6rD,sBAAE,SAAsByO,GACpB,MAAOj7D,MAAKk6D,uBAAuBlyD,IAAIizD,IAAUA,GASnD9S,EAAFxnD,UAAAu6D,uBAAE,SAAuBxW,GAErB,MADA1kD,MAAKm6D,qBAAuBzV,EACrB1kD,MAOTmoD,EAAFxnD,UAAA8rD,uBAAE,WACE,MAAOzsD,MAAKm6D,sBAWdhS,EAAFxnD,UAAAw6D,kBAAE,SAAkB9R,GAAlB,GAAFtlD,GAAA/D,KACUgoD,EAAMhoD,KAAKwpD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcN,EAEnE,KAAKrB,EACH,KAAM4B,IAAmCP,EAG3C,IAAM+R,GAAap7D,KAAKi6D,kBAAkBjyD,IAAIggD,EAE9C,OAAIoT,GACK71D,EAAAA,GAAa81D,GAASD,IAGxBp7D,KAAKs7D,uBAAuB,GAAItB,IAAc3Q,IAAU5jD,KAC7D81D,EAAAA,IAAI,SAAAjT,GAAO,MAAAvkD,GAAKk2D,kBAAkBpvC,IAAG,EAAOy9B,KAC5Cv3C,EAAAA,IAAI,SAAAu3C,GAAO,MAAA+S,IAAS/S,OAYxBH,EAAFxnD,UAAAgrD,gBAAE,SAAgBl4C,EAAc22C,OAAhC,KAAAA,IAAgCA,EAAhC,GAEI,IAAMj0C,GAAMm0C,GAAQF,EAAW32C,GACzBsU,EAAS/nB,KAAKqqD,gBAAgBriD,IAAImO,EAExC,IAAI4R,EACF,MAAO/nB,MAAKw7D,kBAAkBzzC,EAIhC,IAAM0zC,GAAiBz7D,KAAKyqD,gBAAgBziD,IAAIoiD,EAEhD,OAAIqR,GACKz7D,KAAK07D,0BAA0BjoD,EAAMgoD,GAGvCE,EAAAA,WAAgBC,EAA4BzlD,KAM7CgyC,EAAVxnD,UAAA66D,kBAAA,SAA4BzzC,GACxB,MAAIA,GAAO+/B,WAEFviD,EAAAA,GAAa81D,GAAStzC,EAAO+/B,aAG7B9nD,KAAKs7D,uBAAuBvzC,GAAQtiB,KACzC81D,EAAAA,IAAI,SAAAjT,GAAO,MAAAvgC,GAAO+/B,WAAaQ,IAC/Bv3C,EAAAA,IAAI,SAAAu3C,GAAO,MAAA+S,IAAS/S,OAalBH,EAAVxnD,UAAA+6D,0BAAA,SAAoCjoD,EAAcgoD,cAIxCI,EAAY77D,KAAK87D,+BAA+BroD,EAAMgoD,EAE5D,IAAII,EAIF,MAAOt2D,GAAAA,GAAas2D,EAKtB,IAAME,GAAwDN,EAC3DnwD,OAAO,SAAA0wD,GAAiB,OAACA,EAAclU,aACvC/2C,IAAI,SAAAirD,GACH,MAAOj4D,GAAKk4D,0BAA0BD,GAAev2D,KACnDy2D,EAAAA,WAAW,SAACrQ,GACV,GAAI7D,GAAMjkD,EAAKylD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcqS,EAAchU,IAK/E,OADArM,SAAQmQ,IAAI,yBAAyB9D,EAAjD,YAAgE6D,GAC7CtmD,EAAAA,GAAa,UAO5B,OAAO42D,GAAAA,SAASJ,GAAsBt2D,KAAKsL,EAAAA,IAAI,WAC7C,GAAMqrD,GAAYr4D,EAAK+3D,+BAA+BroD,EAAMgoD,EAE5D,KAAKW,EACH,KAAMR,GAA4BnoD,EAGpC,OAAO2oD,OASHjU,EAAVxnD,UAAAm7D,+BAAA,SAAyCpT,EAAkB+S,GAGvD,IAAK,GAAIzrD,GAAIyrD,EAAetwD,OAAS,EAAG6E,GAAK,EAAGA,IAAK,CACnD,GAAM+X,GAAS0zC,EAAezrD,EAC9B,IAAI+X,EAAO+/B,WAAY,CACrB,GAAMsU,GAAYp8D,KAAKwoD,uBAAuBzgC,EAAO+/B,WAAYY,EACjE,IAAI0T,EACF,MAAOA,IAIb,MAAO,OAODjU,EAAVxnD,UAAA26D,uBAAA,SAAiCvzC,aAC7B,OAAO/nB,MAAK+nD,UAAUhgC,EAAOigC,KACxBviD,KAAKsL,EAAAA,IAAI,SAAAk3C,GAAW,MAAAlkD,GAAKqkD,+BAA+BH,OAOvDE,EAAVxnD,UAAAs7D,0BAAA,SAAoCl0C;4DAEhC,OAAIA,GAAO+/B,WACFviD,EAAAA,GAAawiB,EAAO+/B,YAGtB9nD,KAAK+nD,UAAUhgC,EAAOigC,KAAKviD,KAAKsL,EAAAA,IAAI,SAAAk3C,GAOzC,MAJKlgC,GAAO+/B,aACV//B,EAAO+/B,WAAa/jD,EAAKmkD,sBAAsBD,IAG1ClgC,EAAO+/B,eAOVK,EAAVxnD,UAAAynD,+BAAA,SAAyCC,GACrC,GAAMC,GAAMtoD,KAAKkoD,sBAAsBG,EAEvC,OADAroD,MAAKuoD,kBAAkBD,GAChBA,GAQDH,EAAVxnD,UAAA6nD,uBAAA,SAAiCC,EAAqBC,GAClD,GAAMC,GAAaF,EAAQlyB,cAAc,IAAMmyB,EAE/C,KAAKC,EACH,MAAO,KAKT,IAAMC,GAAcD,EAAWE,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAY1hB,SAAS3wB,cACvB,MAAOvW,MAAKuoD,kBAAiB,EAM/B,IAA2C,WAAvCK,EAAY1hB,SAAS3wB,cACvB,MAAOvW,MAAKuoD,kBAAkBvoD,KAAK+oD,cAAcH,GAQnD,IAAMN,GAAMtoD,KAAKkoD,sBAAsB,cAIvC,OAFAI,GAAIvY,YAAY6Y,GAET5oD,KAAKuoD,kBAAkBD,IAMxBH,EAAVxnD,UAAAunD,sBAAA,SAAgCc,GAC5B,GAAMC,GAAMjpD,KAAK4K,UAAUilC,cAAc,MACzCoZ,GAAIC,UAAYF,CAChB,IAAMV,GAAMW,EAAI1yB,cAAc,MAE9B,KAAK+xB,EACH,KAAMvhC,OAAM,sBAGd,OAAOuhC,IAMDH,EAAVxnD,UAAAooD,cAAA,SAAwB/jD,GAGpB,IAAK,GAFDsjD,GAAMtoD,KAAKkoD,sBAAsB,eAE5Bl4C,EAAI,EAAGA,EAAIhL,EAAQqG,WAAWF,OAAQ6E,IACzChL,EAAQqG,WAAW2E,GAAGvE,WAAazL,KAAK4K,UAAUu+C,cACpDb,EAAIvY,YAAY/qC,EAAQqG,WAAW2E,GAAG64C,WAAU,GAIpD,OAAOP,IAMDH,EAAVxnD,UAAA4nD,kBAAA,SAA4BD,GAMxB,MALAA,GAAIc,aAAa,MAAO,IACxBd,EAAIc,aAAa,SAAU,QAC3Bd,EAAIc,aAAa,QAAS,QAC1Bd,EAAIc,aAAa,sBAAuB,iBACxCd,EAAIc,aAAa,YAAa,SACvBd,GAODH,EAAVxnD,UAAAonD,UAAA,SAAoBsB,aAChB,KAAKrpD,KAAKspD,YACR,KAAMC,IAGR,IAAe,MAAXF,EACF,KAAMtiC,OAAM,+BAA+BsiC,EAAjD,KAGI,IAAMrB,GAAMhoD,KAAKwpD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcN,EAEnE,KAAKrB,EACH,KAAM4B,IAAmCP,EAM3C,IAAMQ,GAAkB7pD,KAAK8pD,sBAAsB9hD,IAAIggD,EAEvD,IAAI6B,EACF,MAAOA,EAKT,IAAME,GAAM/pD,KAAKspD,YAAYthD,IAAIggD,GAAMgC,aAAc,SAASvkD,KAC5DwkD,EAAAA,SAAS,WAAM,MAAAlmD,GAAK+lD,sBAAsBp9B,OAAOs7B,KACjDkC,EAAAA,QAIF,OADAlqD,MAAK8pD,sBAAsBj/B,IAAIm9B,EAAK+B,GAC7BA,GASD5B,EAAVxnD,UAAAwpD,kBAAA,SAA4BC,EAAmB1B,EAAkB3gC,GAE7D,MADA/nB,MAAKqqD,gBAAgBx/B,IAAIy/B,GAAQF,EAAW1B,GAAW3gC,GAChD/nB,MAQDmoD,EAAVxnD,UAAA4pD,qBAAA,SAA+BH,EAAmBriC,GAC9C,GAAMyiC,GAAkBxqD,KAAKyqD,gBAAgBziD,IAAIoiD,EAQjD,OANII,GACFA,EAAgBt7C,KAAK6Y,GAErB/nB,KAAKyqD,gBAAgB5/B,IAAIu/B,GAAYriC,IAGhC/nB,qBA5eXwB,KAACupB,EAAAA,WAADrpB,OAAakX,WAAY,+CArFzBpX,KAAQkpD,EAAAA,WAARniD,aAAA/G,KAqHKwH,EAAAA,aA5GLxH,KAAQmpD,EAAAA,eA8GRnpD,SAAAuH,GAAAR,aAAA/G,KAAKwH,EAAAA,WAALxH,KAAiByH,EAAAA,OAAjBvH,MAAwBuK,EAAAA,4LAhIxBk8C,KAwlBayC,IAEX19C,QAASi7C,GACTn6B,OACG,GAAIhlB,GAAAA,SAAY,GAAIoiB,GAAAA,SAAY+8B,KAChC,GAAIn/C,GAAAA,SAAY0hD,EAAAA,YACjBC,EAAAA,cACC,GAAI3hD,GAAAA,SAAYiD,EAA+B,WAElDgiB,WAAY48B,ICtkBdC,GAAA,WACE,QAAFA,GAAqBxnD,GAAAtD,KAArBsD,YAAqBA,EA5BrB,MAAAwnD,MA8BaC,GAAoBvnD,EAAWsnD,mBAkF1C,QAAFE,GACMtnD,EACQunD,EACkBC,GAH9B,GAAFnnD,GAIIC,EAJJC,KAAAjE,KAIU0D,IAJV1D,WAEc+D,GAAdknD,cAAcA,EA1BdlnD,EAAAonD,SAA6B,EAgCpBD,GACHxnD,EAAWrD,cAAc+oD,aAAa,cAAe,UAnB3D,MA3B6B/kD,GAA7B2mD,EAAAhnD,GAOAM,OAAAC,eAAMymD,EAANrqD,UAAA,yBACI,MAAOX,MAAKmrD,aAEd,SAAWC,GACTprD,KAAKmrD,QAAUtmD,EAAAA,sBAAsBumD,oCASzC9mD,OAAAC,eAAMymD,EAANrqD,UAAA,eAAA,WAA0B,MAAOX,MAAKqrD,cACpC,SAAY5mD,GACVzE,KAAKqrD,SAAWrrD,KAAKsrD,kBAAkB7mD,oCAM3CH,OAAAC,eAAMymD,EAANrqD,UAAA,gBAAA,WAA2B,MAAOX,MAAKurD,eACrC,SAAa9mD,GACXzE,KAAKurD,UAAYvrD,KAAKsrD,kBAAkB7mD,oCAiClCumD,EAAVrqD,UAAA6qD,eAAA,SAAyB9C,GACrB,IAAKA,EACH,OAAQ,GAAI,GAEd,IAAM+C,GAAQ/C,EAASjwB,MAAM,IAC7B,QAAQgzB,EAAMtgD,QACZ,IAAK,GAAG,OAAQ,GAAIsgD,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAM1kC,OAAM,uBAAuB2hC,EAAlD,OAIEsC,EAAFrqD,UAAA4Z,YAAE,SAAYrP,GAAZ,GAAFnH,GAAA/D,IAEI,IAAIkL,EAAR,QACM,GAAIlL,KAAK0rD,QAAS,CAChB,GAARn0C,GAAAvX,KAAAwrD,eAAAxrD,KAAA0rD,SAAetB,EAAf7yC,EAAA,GAA0BmxC,EAA1BnxC,EAAA,EAEQvX,MAAKirD,cAAcU,gBAAgBjD,EAAU0B,GAAW3kD,KAAK0J,EAAAA,KAAK,IAAIxJ,UACpE,SAAA2iD,GAAO,MAAAvkD,GAAK6nD,eAAetD,IAC3B,SAACuD,GAAe,MAAAlQ,SAAQmQ,IAAI,0BAA0BD,EAAI1jC,eAG5DnoB,MAAK+rD,kBAIL/rD,MAAKgsD,kBACPhsD,KAAKisD,0BAITjB,EAAFrqD,UAAA8Z,SAAE,WAGMza,KAAKgsD,kBACPhsD,KAAKisD,0BAIDjB,EAAVrqD,UAAAqrD,0BACI,OAAQhsD,KAAK0rD,SAGPV,EAAVrqD,UAAAirD,eAAA,SAAyBtD,GACrBtoD,KAAK+rD,mBACL/rD,KAAKsD,YAAYjD,cAAc0vC,YAAYuY,IAGrC0C,EAAVrqD,UAAAorD,4BAMI,IAAK,GALCG,GAA6BlsD,KAAKsD,YAAYjD,cAC9C8rD,EAAaD,EAAc7gD,WAAWF,OAInC6E,EAAI,EAAGA,EAAIm8C,EAAYn8C,IAC9Bk8C,EAAcE,YAAYF,EAAc7gD,WAAW2E,KAI/Cg7C,EAAVrqD,UAAAsrD,kCACI,GAAKjsD,KAAKgsD,iBAAV,CAIA,GAAMK,GAAoBrsD,KAAKsD,YAAYjD,cACrCisD,EAAetsD,KAAKusD,QACtBvsD,KAAKirD,cAAcuB,sBAAsBxsD,KAAKusD,SAC9CvsD,KAAKirD,cAAcwB,wBAEnBH,IAAgBtsD,KAAK0sD,wBACnB1sD,KAAK0sD,uBACPL,EAAK3nD,UAAUC,OAAO3E,KAAK0sD,uBAEzBJ,GACFD,EAAK3nD,UAAUE,IAAI0nD,GAErBtsD,KAAK0sD,sBAAwBJ,GAG3BtsD,KAAK2sD,UAAY3sD,KAAK4sD,yBACpB5sD,KAAK4sD,wBACPP,EAAK3nD,UAAUC,OAAO3E,KAAK4sD,wBAEzB5sD,KAAK2sD,UACPN,EAAK3nD,UAAUE,IAAI5E,KAAK2sD,UAE1B3sD,KAAK4sD,uBAAyB5sD,KAAK2sD,YAS/B3B,EAAVrqD,UAAA2qD,kBAAA,SAA4B7mD,GACxB,MAAwB,gBAAVA,GAAqBA,EAAMoH,OAAO4sB,MAAM,KAAK,GAAKh0B,kBA/KpEjD,KAACC,EAAAA,UAADC,OAAAG,SAAA,4BACEF,SAAU,WACVC,SAAU,UACVE,QAAF,spBACEO,QAAF,SACEC,MACFsK,KAAA,MACMrK,MAAN,WACIsqD,0BAAJ,UAEA9qD,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,6EA1DAZ,SAAEuH,GAAFR,aAAA/G,KAAA2H,EAAAA,UAAAzH,MAAA,oBAsGAspD,EAAAtoD,iEAlCA6pD,UAAA/qD,KAAAsB,EAAAA,QAUA6pD,WAAAnrD,KAAAsB,EAAAA,SAWAkoD,mCCtGA,sBAcAxpD,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,IACVI,SAAUqhD,GAASzhD,IACnBQ,cAAeihD,IACf/9C,WAAY29C,QAlBdt4C,KHwBAw6C,GAAA,yBAxBA,MAAAA,MAyBazH,GAAoBl+C,EAAmB2lD,IAIpDC,GAAA,yBA7BA,MAAAA,MA8BaC,GAAwB7lD,EAAmB4lD,+EAexD,MACgC1oD,GAAhC69C,EAAAl+C,kBAdAxC,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,aACVU,MACFsK,KAAA,aACMrK,MAAN,gBAEAV,SAAA,4BACAC,QAAA,u3sBACEO,QAAF,iBACEN,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGA8/C,OA7CAD,GAAA,SAAAj+C,gBA2DA,MAAA,QAAAA,GAAAA,EAAA8M,MAAA9Q,KAAA0U,YAAA1U,KAHA,4FARA6B,SAAA,4BACES,MAAQC,MAAS,YACjBT,QAAF;+3sBACEO,QAAF,iBACEN,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,WAGA6/C,GACAoD,gCASA,+HAAAjD,iCAUA,yHAAAC,iCAUA,0HAAAC,4DA8BsB,qBAPtBv+C,EAAAuhD,SAAAA,EAOAvhD,EAAAwhD,YAAA,EAAExhD,EAAFwhD,aAAAD,EAAAvhD,EAtEA,cA0EAo+C,EAAAxhD,UAAAwE,+FASE,oFAEFg9C,EAAAxhD,UAAA6kD,wBAEAxlD,KAAAkwB,SAAA7vB,cAAAqE,UAAAE,IAAA,wBAEAu9C,EAAAxhD,UAAA8kD,uBAEAzlD,KAAAkwB,SAAA7vB,cAAAqE,UAAAC,OAAA,oDAKE,8DAAFnD,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCACgBC,SAAhB,cACAU,4BAnDAojD,+BAAA,UACAC,oCAAA,UACAppB,UAAA,iBACMC,SAAN,0CAGA36B,SAAA,uYACAE,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA+/C,EAAAvwC,eAAe,WAAf,QACApQ,KAAA4L,EAAAA,aACA5L,KAAA0gD,GAAA35C,aAAA/G,KAAAwH,EAAAA,uHA7DAm5C,OLFAyD,GAAA,yBA5CA,MAAAA,MA6Ca9D,GAA6B36C,EAAmBC,EAAcw+C,KAG3EC,GAAA,yBAhDA,MAAAA,MAiDaC,GAA0B3+C,EAAmB0+C,IAG7CjE,IACX10C,QAAS0lB,EAAAA,kBACTzlB,YAAakP,EAAAA,WAAW,WAAM,MAAAslC,MAC9B7uB,OAAO,GAITizB,GAAA,WACE,QAAFA,GAEW/yB,EAEAskB,GAFAt3C,KAAXgzB,OAAWA,EAEAhzB,KAAXs3C,OAAWA,EAhEX,MAAAyO,qBAyIE,QAAFlE,GAAsB3xB,EACA2O,EAE2CmnB,GAH/D,GAAFjiD,GAIIC,EAJJC,KAAAjE,OAAAA,WAAsB+D,GAAtBmsB,SAAsBA,EACAnsB,EAAtB86B,gBAAsBA,EAE2C96B,EAAjEiiD,cAAiEA,EA5CjEjiD,EAAAg7B,WAAsB,EACtBh7B,EAAAm7B,WAAsB,EAGtBn7B,EAAAkiD,WAAuB,EAQvBliD,EAAAmiD,iBAAkD,UAkBlD,MAjCmC7hD,GAAnCw9C,EAAA79C,GAsBAM,OAAAC,eAAMs9C,EAANlhD,UAAA,gBAAA,WAAmB,MAAOX,MAAKk/B,WAAcl/B,KAAKgmD,eAAiBhmD,KAAKgmD,cAAc5kD,cACpF,SAAaqD,GACX,GAAM46B,GAAWx6B,EAAAA,sBAAsBJ,EAEnC46B,KAAar/B,KAAKk/B,YACpBl/B,KAAKk/B,UAAYG,EACjBr/B,KAAK6+B,gBAAgB35B,iDAM3BZ,OAAAC,eAAMs9C,EAANlhD,UAAA,gBAAA,WAA4B,MAAOX,MAAKgmD,cAAc1M,gBAAgBmD,WAAWz8C,WAC/E,SAAayE,GACX,GAAMg4C,GAAa53C,EAAAA,sBAAsBJ,EAErCg4C,KAAez8C,KAAK++B,YACtB/+B,KAAKmmD,aAAa1J,GAClBz8C,KAAKgmD,cAAcI,uDAWvBvE,EAAFlhD,UAAA8Z,SAAE,WAAA,GAAF1W,GAAA/D,KAMUw8C,EAAcx8C,KAAK++B,SAEzB5mB,SAAQC,UAAUC,KAAK,YACjBtU,EAAKg7B,WAAayd,KACpBz4C,EAAK6sB,UAAW,EAChB7sB,EAAK86B,gBAAgB35B,mBAK3B28C,EAAFlhD,UAAAwE,mBAAE,WAGE,GAAIkhD,IAAcrmD,KAAKsmD,OAAQtmD,KAAKkwB,WAGtC2xB,EAAFlhD,UAAAwF,YAAE,WAAA,GAAFpC,GAAA/D,IACQA,MAAK4wB,UAGPzY,QAAQC,UAAUC,KAAK,WAAM,MAAAtU,GAAK6sB,UAAW,IAG/C5wB,KAAKgmD,cAAcO,sBAAsBvmD,OAI3C6hD,EAAFlhD,UAAAm0B,OAAE,WACE90B,KAAK4wB,UAAY5wB,KAAK4wB,UAIxBixB,EAAFlhD,UAAA2c,MAAE,WACEtd,KAAKkwB,SAAS7vB,cAAcid,SAO9BukC,EAAFlhD,UAAA6iD,SAAE,WACE,MAAOxjD,MAAKwmD,MAAQxmD,KAAKwmD,MAAMnmD,cAAcuL,YAAc,IAI7Di2C,EAAFlhD,UAAA4/B,kBAAE,WACE,MAAOvgC,MAAKoB,UAAYpB,KAAK4G,eAAiB5G,KAAKgmD,cAAcp/C,eAGnEi7C,EAAFlhD,UAAAK,aAAE,WACOhB,KAAKoB,WACRpB,KAAK80B,SAGL90B,KAAKgmD,cAAc3xB,iBAAiBr0B,QAIxC6hD,EAAFlhD,UAAA6kD,aAAE,WACExlD,KAAKimD,WAAY,EACjBjmD,KAAKgmD,cAAcS,kBAAkBzmD,OAGvC6hD,EAAFlhD,UAAA8kD,YAAE,WACEzlD,KAAKimD,WAAY,EACjBjmD,KAAKgmD,cAAcrP,cAIrBkL,EAAFlhD,UAAA8vB,gBAAE,WACE,MAAOzwB,MAAKkwB,SAAS7vB,eAIvBwhD,EAAFlhD,UAAAwlD,aAAE,SAAav1B,GACPA,IAAa5wB,KAAK++B,YAItB/+B,KAAK++B,UAAYnO,EAEbA,EACF5wB,KAAKgmD,cAAc1M,gBAAgBuC,OAAO77C,MAE1CA,KAAKgmD,cAAc1M,gBAAgByC,SAAS/7C,MAG9CA,KAAK6+B,gBAAgB35B,gCArKzB1D,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU,gBACVS,QAAF,iBACEC,MACFsK,KAAA,SACMrK,MAAN,gCACIg6B,UAAJ,iBACIC,SAAJ,gBACI3zB,UAAW,iBACX69C,SAAJ,KACIC,iCAAJ,WACIC,8BAAJ,YACIC,uBAAJ,sBACIp+C,uBAAJ,uBAEA5G,SAAA,waACAE,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAtEAZ,KAAEmgD,GAAFp5C,aAAA/G,KAAAyH,EAAAA,OAAAvH,MAAA2a,EAAAA,WAAA,WAAA,MAAAslC,YAsPAE,EAAAn/C,qGAnKAwjD,mBAAA1kD,KAAAsB,EAAAA,QAGA2B,QAAAjD,KAAGsB,EAAAA,QAGH1B,WAAAI,KAAAsB,EAAAA,QAGA8tB,WAAApvB,KAAAsB,EAAAA,SAeA++C,sCA2IA,GAAA99C,GAAAC,EAAAC,KAAAjE,OAAAA,IAmCA,OAEA+D,GAAAmsB,SAAAA,kNAFAnsB,EAzBA,6GAiCA6gD,WACS3I,gBACF6K,cAAP,WAAA,OAAA,IACA9mD,KAAA+mD,cAGA/mD,KAAAgnD,sBAAAhnD,KAAA+mD,aAEQ/mD,KAAK+mD,YAAc,MAG3B/mD,KAAAinD,cAAAjnD,KAAAs5C,gBAAA,SAAA3zC,UAAA,SAAAyC,cAGA,IAAA,GAAA8+C,GAAA,EAAA3vC,EAAAnP,EAAA++C,MAAAD,EAAA3vC,EAAApM,OAAA+7C,IAAA,CACA,GAAArC,GAAAttC,EAAA2vC,EACYrC,GAAZj0B,UAAA,EAEA,GAAAxoB,EAAAg/C,QACA,IAAA,GAAArT,GAAA,EAAAE,EAAA7rC,EAAAg/C,QAAArT,EAAAE,EAAA9oC,OAAA4oC,IAAA,CAEA,GAAA8Q,GAAyB5Q,EAAzBF,EACY8Q,GAAZj0B,UAAA,2OAiBA5wB,KAAAomD,sHAMApmD,KAAAomD,+LAWA,GAAAiB,GAAArnD,KAAAm9C,gBAAA7F,EAEA+P,GAAA,2CAIA,IAAaA,GAAbrnD,KAAAq3C,QAAAlsC,OAAA,GACAnL,KAAA64C,YAAAyO,uEAOAvN,EAAA/5C,KAAA64C,YACU0O,EAAVxN,EAAAK,eACI,QAAJr7B,GACA,IAAAU,GAAAA,MAEA,IAAAD,GAAAA,MACAxf,KAAAoB,WACApB,KAAAwnD,+BAEUp/C,EAAVC,iBAGA,MACA,KAAS+W,GAAAA,KACT,IAAAE,GAAAA,IACAP,IAAAK,EAAAA,KAAA26B,EAAAC,qBAAAD,EAAAE,oBACA7xC,EAAAC,gBACQ,MACR,SACQ0xC,EAARD,UAAA1xC,GAEA2W,IAAAqc,EAAAA,UAAArc,IAAAsc,EAAAA,aAAAjzB,EAAAiyC,UACAN,EAAAK,kBAAAmN,GAEQvnD,KAARwnD,wFAOAxnD,KAAA02C,UAAA12C,KAAAynD,iKAYAznD,KAAAgnD,sBAAAU,OAGA1nD,KAAA+mD,YAAAW,0DAMA1nD,KAAAq3C,QAAA3wC,QAAA,SAAA4wC,GAAA,MAAAA,GAAAl2C,SAAAwzB,qLAiBA50B,MAAAq3C,QAAA3wC,QAAA,SAAA4wC,GAAA,MAAAA,GAAA6O,cAAA,OACSp1C,IAAT,SAAAtM,GAEA,MAAAV,GAAAszC,QAAArxC,KAAA,SAAAsxC,GACU,MAAVvzC,GAAA09C,YAAA19C,EAAA09C,YAAAnK,EAAA7yC,MAAAA,GAAA6yC,EAAA7yC,QAAAA,MAE6F6G,OAA7Fq8C,SACAjhD,QAAA,SAAA4wC,GAAA,MAAA,GAAA6O,cAAA,iRAYA,GAAAyB,GAA4B5nD,KAA5Bq3C,QAAAr3B,UAAA6nC,EAEAD,KACAA,EAAA9yB;kFAuBA6sB,EAAAp5C,+FAvPAlG,QAAA,WAAA,gBAAA,YACEC,MACFsK,KAAA,UACAkwB,aAAA,WACAv6B,MAAA,qBACMg6B,UAAN,UACIC,SAAJ,eACIC,YAAJ,mBACIh0B,uBAAJ,uBAEA5G,SAAA,4BACAC,QAAA,u3sBACAC,cAAAC,EAAAA,kBAAAC,KACAgL,WAAA20C,IACE1/C,gBAAFC,EAAAA,wBAAAC,WAIAu/C,EAAA/vC,eAAA,WAAA,QACApQ,KAAA4L,EAAAA,gGArPAiqC,UAAA71C,KAAAqM,EAAAA,gBAAAnM,MAAAmgD,MA2RAlK,kBAAAn2C,KAAA0B,EAAAA,iEA3BAy+C,GAIAG,gCCvRA,sBA4BAtgD,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAU04C,GAAet4C,GAAiBF,GAAiBy4C,GAAyB14C,EAAAA,cACpFK,SACEs4C,GACAC,GACAC,GACAC,GACAL,GACAx4C,GACA84C,GACAC,GACAN,GACAL,GACAE,GACAU,IAEFx4C,cACEk4C,GACAC,GACAC,GACAC,GACAC,GACAC,GACAX,GACAE,QApDJW,mBC+BE,QAAF1R,GACY2R,EACAC,EACAC,EACAr7B,EACAvN,EACkBnP,GALlB5K,KAAZyiD,UAAYA,EACAziD,KAAZ0iD,0BAAYA,EACA1iD,KAAZ2iD,QAAYA,EACA3iD,KAAZsnB,UAAYA,EACAtnB,KAAZ+Z,kBAAYA,EACkB/Z,KAA9B4K,UAA8BA,EArC9B,MA2CEkmC,GAAFnwC,UAAAqb,OAAE,SAAO4mC,OAAT,KAAAA,IAASA,MACA5iD,KAAKooC,UACRpoC,KAAKooC,QAAU,GAAI1tB,GAAAA,eAAe1a,KAAKyiD,UAAWziD,KAAK+Z,oBAGzD/Z,KAAKmc,SAEAnc,KAAK6iD,UACR7iD,KAAK6iD,QAAU,GAAIC,GAAAA,gBAAgB9iD,KAAK4K,UAAUilC,cAAc,OAC5D7vC,KAAK0iD,0BAA2B1iD,KAAK2iD,QAAS3iD,KAAKsnB,WAGzD,IAAMtiB,GAAuBhF,KAAKyiD,UAAU/+C,WAAWrD,aAKvD2E,GAAkB,WAAE+9C,aAAa/iD,KAAK6iD,QAAQG,cAAeh+C,GAC7DhF,KAAKooC,QAAQpsB,OAAOhc,KAAK6iD,QAASD,IAOpC9R,EAAFnwC,UAAAwb,OAAE,WACMnc,KAAKooC,QAAQ6a,YACfjjD,KAAKooC,QAAQjsB,UAIjB20B,EAAFnwC,UAAAwF,YAAE,WACMnG,KAAK6iD,SACP7iD,KAAK6iD,QAAQ3/B,0BApDnB1hB,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,sEAfZH,KAAEmY,EAAAA,cACFnY,KAAE4a,EAAAA,2BACF5a,KAAE0hD,EAAAA,iBACF1hD,KAAE0pB,EAAAA,WACF1pB,KAAE6K,EAAAA,mBAuBF7K,SAAAuH,GAAAR,aAAA/G,KAAKyH,EAAAA,OAALvH,MAAYuK,EAAAA,eArCZ6kC,KCyBaT,IAYXC,cAAev1B,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQ1a,EAAAA,OACZikB,QAAS,EAGTtJ,UAAW,uBAEbC,EAAAA,WAAW,gBAAiBioC,EAAAA,UAC1Bz1B,EAAAA,MAAM,oBAAqBptB,EAAAA,OAAOikB,QAAS,KAC3CpJ,EAAAA,QAAQ,eAAgB7a,EAAAA,OAAOikB,QAAS,EAAGtJ,UAAW,mBACtDk6B,EAAAA,OACEznB,EAAAA,MAAM,oBAAqBvS,EAAAA,QAAQ,yCACjC7a,EAAAA,OAAOikB,QAAS,MAElBpJ,EAAAA,QAAQ,yCAA0C7a,EAAAA,OAAO2a,UAAW,sBAGxEC,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqB7a,EAAAA,OAAOikB,QAAS,QAQvEgsB,YAAax1B,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAW1a,EAAAA,OAAOikB,QAAS,KACjCrJ,EAAAA,WAAW,aACT5a,EAAAA,OAAOikB,QAAS,IAChBpJ,EAAAA,QAAQ,qDASDo1B,GAAcF,GAAkBE,YAMhCD,GAAgBD,GAAkBC,cCvD/C8S,GAAA,yBA5BA,MAAAA,MA6BaC,GAAwBl8C,EAAmBC,EAAcg8C,oBAwCpE,QAAFxS,GACYttC,EACUqH,EACVslB,GAHV,GAAFlsB,GAMIC,EAAJC,KAAAjE,OAAAA,WALY+D,GAAZT,YAAYA,EAEAS,EAAZksB,cAAYA,EAXZlsB,EAAAmuC,SAA4C,GAAI/tC,GAAAA,QAGhDJ,EAAAqvC,cAA0B,EAG1BrvC,EAAA6tC,kBAA8B,EAUtB3hB,GAIFA,EAAcE,QAAQpsB,EAAK0sB,mBAAmB,GAGhD1sB,EAAK6G,UAAYD,IA5ErB,MA+CiCtG,GAAjCusC,EAAA5sC,GAiCE4sC,EAAFjwC,UAAA2c,MAAE,SAAMjD,OAAR,KAAAA,IAAQA,EAAR,WACQra,KAAKiwB,cACPjwB,KAAKiwB,cAAc4E,SAAS70B,KAAKywB,kBAAmBpW,GAEpDra,KAAKywB,kBAAkBnT,SAI3BszB,EAAFjwC,UAAAwF,YAAE,WACMnG,KAAKiwB,eACPjwB,KAAKiwB,cAAcI,eAAerwB,KAAKywB,mBAGzCzwB,KAAKkyC,SAAS7rC,YAIhBuqC,EAAFjwC,UAAAY,aAAE,WACE,MAAOvB,MAAKoB,SAAW,KAAO,KAIhCwvC,EAAFjwC,UAAA8vB,gBAAE,WACE,MAAOzwB,MAAKsD,YAAYjD,eAI1BuwC,EAAFjwC,UAAA2iD,eAAE,SAAel7C,GACTpI,KAAKoB,WACPgH,EAAMC,iBACND,EAAM+rB,oBAKVyc,EAAFjwC,UAAA4iD,kBAAE,WACEvjD,KAAKkyC,SAAS9rC,KAAKpG,OAIrB4wC,EAAFjwC,UAAA6iD,SAAE,WACE,GAAMx+C,GAAuBhF,KAAKsD,YAAYjD,cACxCojD,EAAezjD,KAAK4K,UAAY5K,KAAK4K,UAAU84C,UAAY,EAC7DC,EAAS,EAEb,IAAI3+C,EAAQqG,WAMV,IAAK,GALCu4C,GAAS5+C,EAAQqG,WAAWF,OAKzB6E,EAAI,EAAGA,EAAI4zC,EAAQ5zC,IACtBhL,EAAQqG,WAAW2E,GAAGvE,WAAag4C,IACrCE,GAAU3+C,EAAQqG,WAAW2E,GAAGpE,YAKtC,OAAO+3C,GAAO93C,uBA/GlBrK,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU,cACVS,QAAF,WAAA,iBACEC,MACFsK,KAAA,WACMrK,MAAN,gBACIshD,oCAAJ,eACIC,wCAAJ,mBACI5D,kBAAJ,iBACIz3C,uBAAJ,sBACIs7C,kBAAmB,mBACnBl7C,UAAJ,yBACI4mB,eAAJ,uBAEAvtB,gBAAAC,EAAAA,wBAAyCC,OACzCL,cAAAC,EAAAA,kBAAAC,KACEJ,SAAF,yRAvCAL,KAAE20B,EAAAA,gBAJFya,ORqDaJ,GACT,GAAI73B,GAAAA,eAAsC,4BACxCC,WAAY,OACZC,QAAS,WAAM,OACbk4B,gBAAgB,EAChB8C,UAAW,QACXnD,UAAW,QACX+C,cAAe,qDA8IrB,QAAFhD,GACYntC,EACAM,EACkCkjC,GAFlC9mC,KAAZsD,YAAYA,EACAtD,KAAZ4D,QAAYA,EACkC5D,KAA9C8mC,gBAA8CA,EAvH9C9mC,KAAAgkD,WAAsChkD,KAAK8mC,gBAAgB+M,UAC3D7zC,KAAAikD,WAAsCjkD,KAAK8mC,gBAAgB4J,UAI3D1wC,KAAAkkD,iBAA6B3oC,EAAAA,aAAaC,MAG1Cxb,KAAAmkD,cAGAnkD,KAAAokD,qBAA2C,OAG3CpkD,KAAAkrC,eAAmB,GAAI/mC,GAAAA,QASvBnE,KAAAyzC,cAAmCzzC,KAAK8mC,gBAAgB2M,cA0CxDzzC,KAAAqkD,gBAAqCrkD,KAAK8mC,gBAAgBiK,eAQ1D/wC,KAAAskD,aAA8CtkD,KAAK8mC,gBAAgB5B,YAkCnEllC,KAAAojB,OAAM,GAAI5G,GAAAA,aAOVxc,KAAAoiC,MAAoBpiC,KAAKojB,OAAzB,MAvFA9e,QAAAC,eAAMksC,EAAN9vC,UAAA,iBAAA,WAAmC,MAAOX,MAAKgkD,gBAC7C,SAAcv/C,GACE,WAAVA,GAAgC,UAAVA,GACxB8/C,KAEFvkD,KAAKgkD,WAAav/C,EAClBzE,KAAK4zC,sDAKTtvC,OAAAC,eAAMksC,EAAN9vC,UAAA,iBAAA,WAAmC,MAAOX,MAAKikD,gBAC7C,SAAcx/C,GACE,UAAVA,GAA+B,UAAVA,GACvB+/C,KAEFxkD,KAAKikD,WAAax/C,EAClBzE,KAAK4zC,sDAiBTtvC,OAAAC,eAAMksC,EAAN9vC,UAAA,sBAAA,WAAkC,MAAOX,MAAKqkD,qBAC5C,SAAmB5/C,GACjBzE,KAAKqkD,gBAAkBx/C,EAAAA,sBAAsBJ,oCAMjDH,OAAAC,eAAMksC,EAAN9vC,UAAA,mBAAA,WAA2C,MAAOX,MAAKskD,kBACrD,SAAgB7/C,GACdzE,KAAKskD,aAAez/C,EAAAA,sBAAsBJ,oCAW9CH,OAAAC,eAAMksC,EAAN9vC,UAAA,kBAAA,SAAiB8jD,GACTA,GAAWA,EAAQt5C,SACrBnL,KAAKmkD,WAAaM,EAAQhsB,MAAM,KAAKniB,OAAO,SAACsB,EAAU8sC,GAErD,MADA9sC,GAAI8sC,IAAa,EACV9sC,OAGT5X,KAAKsD,YAAYjD,cAAcqkD,UAAY,GAC3C1kD,KAAK4zC,uDAYXtvC,OAAAC,eAAMksC,EAAN9vC,UAAA,iBAAA,WAA4B,MAAOX,MAAK2mB,gBACtC,SAAc89B,GAAmBzkD,KAAK2mB,WAAa89B,mCAkBnDhU,EAAF9vC,UAAA8Z,SAAE,WACEza,KAAK4zC,sBAGPnD,EAAF9vC,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAK64C,YAAc,GAAI8L,GAAAA,gBAA6B3kD,KAAK2wC,OAAOiU,WAAW3I,gBAC3Ej8C,KAAKkkD,iBAAmBlkD,KAAK64C,YAAYsD,OAAOx2C,UAAU,WAAM,MAAA5B,GAAKq+B,MAAMrhC,KAAK,UAGlF0vC,EAAF9vC,UAAAwF,YAAE,WACEnG,KAAKkkD,iBAAiB/sC,cACtBnX,KAAKojB,OAAO/c,YAIdoqC,EAAF9vC,UAAAuxC,SAAE,WAAA,GAAFnuC,GAAA/D,IACI,OAAIA,MAAK2wC,MACA3wC,KAAK2wC,MAAMzlC,QAAQzF,KACxBkW,EAAAA,UAAU3b,KAAK2wC,OACf8G,EAAAA,UAAU,SAAA9G,GAAS,MAAAnrC,GAAAA,MAF3BsL,UAAA,GAEoC6/B,EAAM5/B,IAAI,SAAA8zC,GAAQ,MAAAA,GAAK3S,eAIhDlyC,KAAK4D,QAAQ4zC,SACjB/zB,eACAhe,KAAK0J,EAAAA,KAAK,GAAIsoC,EAAAA,UAAU,WAAM,MAAA1zC,GAAKmuC,eAIxCzB,EAAF9vC,UAAAme,eAAE,SAAe1W,GACb,OAAQA,EAAM2W,SACZ,IAAKypB,GAAAA,OACHxoC,KAAKojB,OAAOriB,KAAK,WACjBqH,EAAM+rB,iBACR,MACA,KAAKjV,GAAAA,WACClf,KAAK8yC,YAAiC,QAAnB9yC,KAAK0V,WAC1B1V,KAAKojB,OAAOriB,KAAK,UAErB,MACA,KAAKie,GAAAA,YACChf,KAAK8yC,YAAiC,QAAnB9yC,KAAK0V,WAC1B1V,KAAKojB,OAAOriB,KAAK,UAErB,MACA,SACEf,KAAK64C,YAAYiB,UAAU1xC,KAQjCqoC,EAAF9vC,UAAAsyC,eAAE,SAAe54B,GAAf,GAAFtW,GAAA/D,SAAA,KAAAqa,IAAiBA,EAAjB,WAEQra,KAAK6wC,YACP7wC,KAAK4D,QAAQ4zC,SAAS/zB,eACnBhe,KAAK0J,EAAAA,KAAK,IACVxJ,UAAU,WAAM,MAAA5B,GAAK80C,YAAYiM,eAAezqC,GAAQ2/B,uBAE3Dh6C,KAAK64C,YAAYiM,eAAezqC,GAAQ2/B,sBAQ5CvJ,EAAF9vC,UAAAokD,gBAAE,WACE/kD,KAAK64C,YAAY4C,eAAe,IAOlChL,EAAF9vC,UAAAizC,mBAAE,SAAmBF,EAAsCC,OAA3D,KAAAD,IAAqBA,EAAsB1zC,KAAK6zC,eAAhD,KAAAF,IAA2DA,EAAsB3zC,KAAK0wC,WAClF1wC,KAAKmkD,WAAW,mBAA8B,WAATzQ,EACrC1zC,KAAKmkD,WAAW,kBAA6B,UAATzQ,EACpC1zC,KAAKmkD,WAAW,kBAA6B,UAATxQ,EACpC3zC,KAAKmkD,WAAW,kBAA6B,UAATxQ,GAOtClD,EAAF9vC,UAAAuyC,aAAE,SAAaC,GAEX,GAAM6R,GAAe,mBArOO,EAqOqC7R,GAC3D8R,EAAkB3gD,OAAO+R,KAAKrW,KAAKmkD,YAAYn+C,KAAK,SAAAk/C,GAAK,MAAAA,GAAEj/B,WAAW,oBAEvEg/B,IAAmBA,IAAoBjlD,KAAKmlD,qBAC3CnlD,KAAKmlD,qBACPnlD,KAAKmkD,WAAWnkD,KAAKmlD,qBAAsB,GAG7CnlD,KAAKmkD,WAAWa,IAAgB,EAChChlD,KAAKmlD,mBAAqBH,IAK9BvU,EAAF9vC,UAAA+xC,gBAAE,WAEE1yC,KAAKokD,qBAAuB,SAI9B3T,EAAF9vC,UAAAkyC,gBAAE,WAEE7yC,KAAKokD,qBAAuB,QAI9B3T,EAAF9vC,UAAAykD,iBAAE,WACEplD,KAAKkrC,eAAe9kC;eA7PxB5E,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEE,SAAU,qUACVC,QAAF,u0EACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEsP,YACF8+B,GAAAC,cACAD,GAAAE,aAEA3uC,SAAA,sFAtEAJ,SAAEuH,GAAFR,aAAA/G,KAAAyH,EAAAA,OAAAvH,MAAA8uC,SAmMAC,EAAA/tC,0EAhGAguC,YAAAlvC,KAAAsB,EAAAA,QAGA2W,cAAAjY,KAAAoB,EAAAA,UAAAlB,MAAAiY,EAAAA,eAWAg3B,QAAAnvC,KAAAqM,EAAAA,gBAAAnM,MAAAkvC,MAWAC,cAAArvC,KAAG0wB,EAAAA,aAAHxwB,MAAAovC,MAGAC,iBAAAvvC,KAAAsB,EAAAA,QAMAoiC,cAAA1jC,KAAGsB,EAAAA,QAGH6jB,aAAAnlB,KAAAsB,EAAAA,MAAApB,MAAA,WAQAgD,YAAAlD,KAAAsB,EAAAA,QAaAsgB,SAAA5hB,KAAA0B,EAAAA,SAoBAk/B,QAAA5gC,KAAA0B,EAAAA,UAaAutC,KCnKaO,GACT,GAAIr4B,GAAAA,eAAqC,4BACvCC,WAAY,OACZC,QAAS,WACP,GAAMotB,GAAUC,EAAAA,OAAOlb,EAAAA,QACvB,OAAO,YAAM,MAAAib,GAAQE,iBAAiBC,+BAyE5C,QAAF6K,GAAsB7pB,EACA8I,EACAnW,EACkC8sB,EACtBqK,EACQC,EACRxtC,EAGZssB,GATAjwB,KAAtBonB,SAAsBA,EACApnB,KAAtBkwB,SAAsBA,EACAlwB,KAAtB+Z,kBAAsBA,EACkC/Z,KAAxD6mC,gBAAwDA,EACtB7mC,KAAlCkxC,YAAkCA,EACQlxC,KAA1CmxC,kBAA0CA,EACRnxC,KAAlC2D,KAAkCA,EAGZ3D,KAAtBiwB,cAAsBA,EAzDtBjwB,KAAAijB,YAA2C,KAC3CjjB,KAAAoxC,WAA+B,EAC/BpxC,KAAAqxC,mBAA+B91B,EAAAA,aAAaC,MAC5Cxb,KAAAsxC,mBAA+B/1B,EAAAA,aAAaC,MAI5Cxb,KAAAuxC,gBAAoC,EAsBpCvxC,KAAAwxC,WAAsD,GAAIh1B,GAAAA,aAO1Dxc,KAAAyxC,WAAsDzxC,KAAKwxC,WAG3DxxC,KAAA0xC,WAAsD,GAAIl1B,GAAAA,aAO1Dxc,KAAA2xC,YAAuD3xC,KAAK0xC,WAapDP,IACFA,EAAkBS,iBAAmB5xC,KAAK6xC,mBAvIhD,MAyFAvtC,QAAAC,eAAM0sC,EAANtwC,UAAA,+CACI,MAAOX,MAAK8xC,UAGd,SAAiCnxB,GAC/B3gB,KAAK8xC,KAAOnxB,mCA6CdswB,EAAFtwC,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAK+xC,aAEL/xC,KAAK8xC,KAAK1P,MAAMz8B,UAAU,SAAAqsC,GACxBjuC,EAAKkuC,eAGW,UAAXD,GAAiC,QAAXA,IAAqBjuC,EAAKmtC,aACnDntC,EAAKmtC,YAAY9tB,OAAOriB,KAAKixC,KAI7BhyC,KAAK6xC,oBAEP7xC,KAAKsxC,mBAAqBtxC,KAAKkxC,YAAYgB,WACtCzsC,KAAK6F,EAAAA,OAAO,SAAArF,GAAU,MAAAA,KAAWlC,EAAKotC,oBAAsBlrC,EAAO7E,YACnEuE,UAAU,WACT5B,EAAKwtC,gBAAiB,EACtBxtC,EAAKouC,eAKflB,EAAFtwC,UAAAwF,YAAE,WACMnG,KAAKijB,cACPjjB,KAAKijB,YAAYC,UACjBljB,KAAKijB,YAAc,MAGrBjjB,KAAKoyC,yBAIP9tC,OAAFC,eAAM0sC,EAANtwC,UAAA,gBAAE,WACE,MAAOX,MAAKoxC,2CAId9sC,OAAFC,eAAM0sC,EAANtwC,UAAA,WAAE,WACE,MAAOX,MAAK2D,MAA4B,QAApB3D,KAAK2D,KAAKc,MAAkB,MAAQ,uCAI1DwsC,EAAFtwC,UAAAkxC,gBAAE,WACE,SAAU7xC,KAAKmxC,oBAAqBnxC,KAAKkxC,cAI3CD,EAAFtwC,UAAA0xC,WAAE,WACE,MAAOryC,MAAKoxC,UAAYpxC,KAAKsyC,YAActyC,KAAKmyC,YAIlDlB,EAAFtwC,UAAAwxC,SAAE,WAAA,GAAFpuC,GAAA/D,IACQA,MAAKoxC,YAITpxC,KAAK+oB,iBAAiB/M,OAAOhc,KAAKooC,SAE9BpoC,KAAK8xC,KAAKjB,aACZ7wC,KAAK8xC,KAAKjB,YAAY70B,OAAOhc,KAAKuyC,UAGpCvyC,KAAKqxC,mBAAqBrxC,KAAKwyC,sBAAsB7sC,UAAU,WAAM,MAAA5B,GAAKuuC,cAC1EtyC,KAAKyyC,YAEDzyC,KAAK8xC,eAAgBrB,KACvBzwC,KAAK8xC,KAAKY,oBAKdzB,EAAFtwC,UAAA2xC,UAAE,WACEtyC,KAAK8xC,KAAK1P,MAAMrhC,QAOlBkwC,EAAFtwC,UAAA2c,MAAE,SAAMjD,OAAR,KAAAA,IAAQA,EAAR,WACQra,KAAKiwB,cACPjwB,KAAKiwB,cAAc4E,SAAS70B,KAAKkwB,SAAS7vB,cAAega,GAEzDra,KAAKkwB,SAAS7vB,cAAcid,SAKxB2zB,EAAVtwC,UAAAsxC,wBACI,GAAKjyC,KAAKijB,aAAgBjjB,KAAK2yC,SAA/B,CAIA,GAAMb,GAAO9xC,KAAK8xC,IAElB9xC,MAAK4yC,aACL5yC,KAAKqxC,mBAAmBl6B,cACxBnX,KAAKijB,YAAY9G,SAEb21B,YAAgBrB,KAClBqB,EAAKe,kBAEDf,EAAKjB,aAEPiB,EAAK5G,eACFzlC,KAAK0J,EAAAA,KAAK,IACVxJ,UAAU,WAArB,MAA2BmsC,GAAgB,YAAE31B,YAE9B21B,EAAKjB,aACdiB,EAAKjB,YAAY10B,WAQb80B,EAAVtwC,UAAA8xC,qBACIzyC,KAAK8xC,KAAKgB,WAAa9yC,KAAK6xC,kBAAoB7xC,KAAKkxC,gBAAcnoC,GACnE/I,KAAK8xC,KAAKp8B,UAAY1V,KAAK2c,IAC3B3c,KAAK+yC,oBACL/yC,KAAKgzC,gBAAe,GACpBhzC,KAAK8xC,KAAKmB,eAAejzC,KAAKuxC,eAAiB,QAAU,YAInDN,EAAVtwC,UAAAoyC,6BACI,GAAI/yC,KAAK8xC,KAAKoB,aAAc,CAI1B,IAHA,GAAIC,GAAQ,EACRL,EAAa9yC,KAAK8xC,KAAKgB,WAEpBA,GACLK,IACAL,EAAaA,EAAWA,UAG1B9yC,MAAK8xC,KAAKoB,aAAaC,KAQnBlC,EAAVtwC,UAAAiyC,sBACI5yC,KAAKgzC,gBAAe,GAKfhzC,KAAKuxC,eAIEvxC,KAAK6xC,mBACf7xC,KAAKsd,MAAM,SAFXtd,KAAKsd,QAKPtd,KAAKuxC,gBAAiB,GAIhBN,EAAVtwC,UAAAqyC,eAAA,SAAyBrQ,GACrB3iC,KAAKoxC,UAAYzO,EACjB3iC,KAAKoxC,UAAYpxC,KAAKwxC,WAAWzwC,OAASf,KAAK0xC,WAAW3wC,OAEtDf,KAAK6xC,oBACP7xC,KAAKmxC,kBAAkBiC,aAAezQ,IAQlCsO,EAAVtwC,UAAAoxC,sBACS/xC,KAAK8xC,MACRuB,MAQIpC,EAAVtwC,UAAAooB,0BACI,IAAK/oB,KAAKijB,YAAa,CACrBjjB,KAAKooC,QAAU,GAAI1tB,GAAAA,eAAe1a,KAAK8xC,KAAKr4B,YAAazZ,KAAK+Z,kBAC9D,IAAMgO,GAAS/nB,KAAKszC,mBACpBtzC,MAAKuzC,sBAAsBxrB,EAA4D,kBACvF/nB,KAAKijB,YAAcjjB,KAAKonB,SAASqD,OAAO1C,GAG1C,MAAO/nB,MAAKijB,aAONguB,EAAVtwC,UAAA2yC,6BACI,MAAO,IAAIvpB,GAAAA,eACTC,iBAAkBhqB,KAAKwzC,eACvBtO,YAAsC,MAAzBllC,KAAK8xC,KAAK5M,aAAuBllC,KAAK6xC,kBAAoB7xC,KAAK8xC,KAAK5M,YACjFuO,cAAezzC,KAAK8xC,KAAK2B,eAAiB,mCAC1C/9B,UAAW1V,KAAK2c,IAChBgtB,eAAgB3pC,KAAK6mC,qBASjBoK,EAAVtwC,UAAA4yC,sBAAA,SAAgCn5B,aAC5BA,GAASkvB,gBAAgB3jC,UAAU,SAAAL,GACjC,GAAMouC,GAAyD,UAAnCpuC,EAAOokC,eAAeU,SAAuB,QAAU,SAC7EuJ,EAAyD,QAAnCruC,EAAOokC,eAAeW,SAAqB,QAAU,OAEjFtmC,GAAK+tC,KAAK8B,mBAAmBF,EAAMC,MAS/B1C,EAAVtwC,UAAA6yC,wBACI,GAAJj8B,GAAA,WAAAvX,KAAA8xC,KAAA+B,WAAA,MAAA,UAAA,QAAA,OAAS9J,EAATxyB,EAAA,GAAkBu8B,EAAlBv8B,EAAA,GAGAw8B,EAAA,UAAA/zC,KAAA8xC,KAAApB,WAAA,SAAA,QAAA,MAAA,UAASrG,EAAT0J,EAAA,GAAmBC,EAAnBD,EAAA,GAGAE,GAAA5J,EAAA2J,GAAShK,EAATiK,EAAA,GAAkBC,EAAlBD,EAAA,GACAE,GAAApK,EAAA+J,GAAS1J,EAAT+J,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAad,OAXIr0C,MAAK6xC,mBAGPuC,EAAmBrK,EAAkC,WAAxB/pC,KAAK8xC,KAAK+B,UAAyB,QAAU,MAC1EC,EAAkB1J,EAAuB,QAAZL,EAAoB,QAAU,MAC3DsK,EAAuB,WAAbhK,EA3UsB,GAAA,GA4UtBrqC,KAAK8xC,KAAKf,iBACpB/G,EAAuB,QAAbK,EAAqB,SAAW,MAC1C6J,EAAuC,QAArBF,EAA6B,SAAW,OAGrDh0C,KAAKonB,SAAShN,WAChByuB,oBAAoB7oC,KAAKkwB,UACzB8Y,gBACEe,QAAXA,EAAoBC,QAApBA,EAA6BI,SAA7BA,EAAuCC,SAAvCA,EAAiDgK,QAAjDA,IACWtK,QAAS+J,EAAiB9J,QAArCA,EAA8CI,SAAUgK,EAAkB/J,SAA1EA,EAAoFgK,QAApFA,IAEYtK,QAAZA,EACYC,QAASkK,EACT9J,SAAZA,EACYC,SAAU2J,EACVK,SAAUA,IAGVtK,QAAS+J,EACT9J,QAASkK,EACT9J,SAAUgK,EACV/J,SAAU2J,EACVK,SAAUA,MAMZpD,EAAVtwC,UAAAyxC,iCACIpyC,KAAKqxC,mBAAmBl6B,cACxBnX,KAAKsxC,mBAAmBn6B,eAIlB85B,EAAVtwC,UAAA6xC,0CACU8B,EAAWt0C,KAAgB,YAAE0jC,gBAC7Bla,EAAcxpB,KAAgB,YAAEwpB,cAChC+qB,EAAcv0C,KAAKkxC,YAAclxC,KAAKkxC,YAAY9O,MAAQ78B,EAAAA,KAC1DivC,EAAQx0C,KAAKkxC,YAAclxC,KAAKkxC,YAAYgB,WAAWzsC,KAC3D6F,EAAAA,OAAO,SAAArF,GAAU,MAAAA,KAAWlC,EAAKotC,oBACjC7lC,EAAAA,OAAO,WAAM,MAAAvH,GAAKqtC,aAChB7rC,EAAAA,IAEJ,OAAOC,GAAAA,MAAM8uC,EAAUC,EAAaC,EAAOhrB,IAI7CynB,EAAFtwC,UAAA8zC,iBAAE,SAAiBrsC,GACVssC,EAAAA,gCAAgCtsC,KACnCpI,KAAKuxC,gBAAiB,EAKlBvxC,KAAK6xC,mBACPzpC,EAAMC,mBAMZ4oC,EAAFtwC,UAAAme,eAAE,SAAe1W,GACb,GAAM2W,GAAU3W,EAAM2W,OAElB/e,MAAK6xC,oBACA9yB,IAAYC,EAAAA,aAA4B,QAAbhf,KAAK2c,KAChCoC,IAAYG,EAAAA,YAA2B,QAAblf,KAAK2c,MACtC3c,KAAKmyC,YAKTlB,EAAFtwC,UAAAK,aAAE,SAAaoH,GACPpI,KAAK6xC,mBAEPzpC,EAAM+rB,kBACNn0B,KAAKmyC,YAELnyC,KAAKqyC,6BAlZX7wC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,8CACVW,MACEqyC,gBAAiB,OACjBC,cAAe,2BACfnY,YAAa,yBACb5zB,UAAW,wBAEbjH,SAAU,yDAzDZJ,KAAEwpB,EAAAA,UAWFxpB,KAAE4L,EAAAA,aAUF5L,KAAE6K,EAAAA,mBA2FF7K,SAAAuH,GAAAR,aAAA/G,KAAeyH,EAAAA,OAAfvH,MAAsBsvC,QAxFtBxvC,KAAQivC,GAARloC,aAAA/G,KAyFewH,EAAAA,aAvFfxH,KAAQovC,GAARroC,aAAA/G,KAwFewH,EAAAA,WAxFfxH,KAwF2BqzC,EAAAA,SAvH3BrzC,KAAmBqQ,EAAAA,eAAnBtJ,aAAA/G,KAwHewH,EAAAA,aAzHfxH,KAAQ20B,EAAAA,kCAgFR2e,+BAAAtzC,KAAGsB,EAAAA,MAAHpB,MAAS,0BAUTowC,OAAAtwC,KAAGsB,EAAAA,MAAHpB,MAAS,uBAGT6wC,WAAA/wC,KAAGsB,EAAAA,MAAHpB,MAAS,wBAGT8vC,aAAAhwC,KAAG0B,EAAAA,SAOHuuC,aAAAjwC,KAAG0B,EAAAA,SAGHwuC,aAAAlwC,KAAG0B,EAAAA,SAOHyuC,cAAAnwC,KAAG0B,EAAAA,UAzHH+tC,iCCAA,sBAkBAzvC,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACAC,GACAE,GACA4hB,EAAAA,eAEF1hB,SAAU8mC,GAASG,GAAaK,GAAgBH,GAAgBvnC,IAChEQ,cAAe0mC,GAASG,GAAaK,GAAgBH,QA1BvDiE,KC0BaC,IAaXC,eAAgBl6B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ1a,EAAAA,OACZ2a,UAAW,YACXi6B,SAAU,OACV3wB,QAAS,KAEXvJ,EAAAA,MAAM,UAAW1a,EAAAA,OACfikB,QAAS,EACT2wB,SAAU,oBACVj6B,UAAW,eAEbD,EAAAA,MAAM,mBAAoB1a,EAAAA,OACxBikB,QAAS,EACT2wB,SAAU,oBACVj6B,UAAW,eAEbC,EAAAA,WAAW,YAAai6B,EAAAA,OACtBznB,EAAAA,MAAM,iBAAkBC,EAAAA,gBACxBxS,EAAAA,QAAQ,6CAEVD,EAAAA,WAAW,aACTC,EAAAA,QAAQ,qBAAsB7a,EAAAA,OAAOikB,QAAS,SASlD6wB,cAAer6B,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAW1a,EAAAA,OAAOikB,QAAS,KACjCrJ,EAAAA,WAAW,mBACT5a,EAAAA,OAAOikB,QAAS,IAChBpJ,EAAAA,QAAQ,qDAUD85B,GAAiBD,GAAoBC,eAMrCG,GAAgBJ,GAAoBI,c1DH7C1iB,GAAe,EAqCN2iB,GACT,GAAI18B,GAAAA,eAAqC,8BAShCitB,IACX14B,QAASmoC,GACTrnB,MAAOhD,EAAAA,SACPiD,WAAYqnB,IAIdC,GAAA,WACE,QAAFA,GAEWviB,EAEAvuB,GAFAzE,KAAXgzB,OAAWA,EAEAhzB,KAAXyE,MAAWA,EAjJX,MAAA8wC,MAsJAC,GAAA,WACE,QAAFA,GAAqBlyC,EACAmyC,EACAC,EACAC,EACAC,GAJA51C,KAArBsD,YAAqBA,EACAtD,KAArBy1C,0BAAqBA,EACAz1C,KAArB01C,YAAqBA,EACA11C,KAArB21C,iBAAqBA,EACA31C,KAArB41C,UAAqBA,EA3JrB,MAAAJ,MA6JaK,GAAsB1uC,EAC/BD,EAAcE,EAAc0uC,EAAgBN,mCA9JhD,sBAoKAh0C,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,yBArKZ+jC,KAuKAD,GAAA,SAAAzhC,GAkRE,QAAFyhC,GACY3hC,EACAD,EACAD,EACR6xC,EACA/xC,EACoBC,EACR+xC,EACAC,EACQI,EACOH,EACJpuC,EACqBwuC,GAZ9C,GAAFjyC,GAaIC,EAbJC,KAAAjE,KAaU0D,EAAY+xC,EAA2BC,EACvCC,EAAkBC,IAd5B51C,WACY+D,GAAZD,eAAYA,EACAC,EAAZF,mBAAYA,EACAE,EAAZH,QAAYA,EAGYG,EAAxBJ,KAAwBA,EAGAI,EAAxBgyC,iBAAwBA,EACOhyC,EAA/B6xC,UAA+BA,EAEiB7xC,EAAhDiyC,uBAAgDA,EAhPhDjyC,EAAAkyC,YAAuB,EAGvBlyC,EAAAyvB,WAA+B,EAG/BzvB,EAAAmyC,WAAuB,EAMvBnyC,EAAAoyC,WAA+B,EAG/BpyC,EAAAqyC,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAGtDvyC,EAAAwyC,KAAiB,cAAc7jB,KAG/B3uB,EAAAyyC,SAA8B,GAAIryC,GAAAA,QASlCJ,EAAA0yC,iBAAqB,EASrB1yC,EAAA2yC,UAAoC,aAGpC3yC,EAAA4yC,WAAe,aAGf5yC,EAAA6yC,WAAuB,GAGvB7yC,EAAA6mC,iBAA6B,MAG7B7mC,EAAA8yC,qBAAiC,EAGjC9yC,EAAA8iC,gBAAoB9iC,EAAKiyC,yBAOzBjyC,EAAA+yC,SAAa,EAQb/yC,EAAAgzC,aAEMhN,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKhBtmC,EAAAizC,yBAA6C,EAG7CjzC,EAAAkzC,SAAqB,EAGrBlzC,EAAAmzC,YAAgB,aAuFhBnzC,EAAA4vB,UAA2C,GAkB3C5vB,EAAAozC,uBAA0EC,EAAAA,MAAM,WAC5E,MAAIrzC,GAAKszC,QACA7xC,EAAAA,MAAbsL,UAAA,GAAsB/M,EAAKszC,QAAQtmC,IAAI,SAAAumC,GAAU,MAAAA,GAAOC,qBAG7CxzC,EAAKH,QAAQ4zC,SACjB/zB,eACAhe,KAAK0J,EAAAA,KAAK,GAAIsoC,EAAAA,UAAU,WAAM,MAAA1zC,GAAKozC,4BAI1CpzC,EAAA+9B,aAA4D,GAAItlB,GAAAA,aAIhEzY,EAAAu/B,cAAMv/B,EAAK+9B,aAAar8B,KAAK6F,EAAAA,OAAO,SAAAosC,GAAK,MAAAA,KAAI3mC,EAAAA,IAAI,eAIjDhN,EAAAy/B,cAAMz/B,EAAK+9B,aAAar8B,KAAK6F,EAAAA,OAAO,SAAAosC,GAAK,OAACA,IAAI3mC,EAAAA,IAAI,eAIlDhN,EAAA4zC,gBAAM,GAAIn7B,GAAAA,aAOVzY,EAAA6zC,YAAsD,GAAIp7B,GAAAA,aAkBlDzY,EAAK6xC,YAGP7xC,EAAK6xC,UAAUiC,cAAgB9zC,GAGjCA,EAAKyD,SAAWC,SAASD,IAAa,EAGtCzD,EAAKsoB,GAAKtoB,EAAKsoB,KA3BnB,MAtO+BhoB,GAA/BohC,EAAAzhC,GAwHAM,OAAAC,eAAMkhC,EAAN9kC,UAAA,mBAAA,WAA8B,MAAOX,MAAK83C,kBACxC,SAAgBrzC,GACdzE,KAAK83C,aAAerzC,EACpBzE,KAAK+3C,aAAa3xC,wCAKtB9B,OAAAC,eAAMkhC,EAAN9kC,UAAA,gBAAA,WAA4B,MAAOX,MAAKwzB,eACtC,SAAa/uB,GACXzE,KAAKwzB,UAAY3uB,EAAAA,sBAAsBJ,GACvCzE,KAAK+3C,aAAa3xC,wCAKtB9B,OAAAC,eAAMkhC,EAAN9kC,UAAA,gBAAA,WAA4B,MAAOX,MAAKm2C,eACtC,SAAa1xC,GACX,GAAIzE,KAAKg4C,gBACP,KAAMC,KAGRj4C,MAAKm2C,UAAYtxC,EAAAA,sBAAsBJ,oCAK3CH,OAAAC,eAAMkhC,EAAN9kC,UAAA,8BAAA,WAA0C,MAAOX,MAAKg3C,6BACpD,SAA2BvyC,GACzBzE,KAAKg3C,wBAA0BnyC,EAAAA,sBAAsBJ,oCASzDH,OAAAC,eAAMkhC,EAAN9kC,UAAA,mBAAA,WAAsB,MAAOX,MAAKo2C,kBAChC,SAAgB3hB,GACd,GAAkB,kBAAPA,GACT,KAAMyjB,KAERl4C,MAAKo2C,aAAe3hB,EAChBz0B,KAAKg4C,iBAEPh4C,KAAKm4C,wDAMX7zC,OAAAC,eAAMkhC,EAAN9kC,UAAA,aAAA,WAAqB,MAAOX,MAAK63B,YAC/B,SAAUwH,GACJA,IAAar/B,KAAK63B,SACpB73B,KAAKu0B,WAAW8K,GAChBr/B,KAAK63B,OAASwH,oCAgBpB/6B,OAAAC,eAAMkhC,EAAN9kC,UAAA,UAAA,WAAqB,MAAOX,MAAKo4C,SAC/B,SAAO3zC,GACLzE,KAAKo4C,IAAM3zC,GAASzE,KAAKu2C,KACzBv2C,KAAK+3C,aAAa3xC,wCAiEpBq/B,EAAF9kC,UAAA8Z,SAAE,WACEza,KAAKg4C,gBAAkB,GAAIK,GAAAA,eAA0Br4C,KAAKs4C,aAAUvvC,IAAW,GAC/E/I,KAAK+3C,aAAa3xC,QAGpBq/B,EAAF9kC,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAKu4C,kBAELv4C,KAAKq3C,QAAQnsC,QAAQzF,KAAKkW,EAAAA,UAAU,MAAOjW,EAAAA,UAAU1F,KAAKw2C,WAAW7wC,UAAU,WAC7E5B,EAAKy0C,gBACLz0C,EAAKo0C,0BAIT1S,EAAF9kC,UAAA4jC,UAAE,WACMvkC,KAAK41C,WACP51C,KAAKy4C,oBAIThT,EAAF9kC,UAAA4Z,YAAE,SAAYrP,GAGNA,EAAR,UACMlL,KAAK+3C,aAAa3xC,QAItBq/B,EAAF9kC,UAAAwF,YAAE,WACEnG,KAAKw2C,SAASpwC,OACdpG,KAAKw2C,SAASnwC,WACdrG,KAAK+3C,aAAa1xC,YAIpBo/B,EAAF9kC,UAAAm0B,OAAE,WACE90B,KAAK04C,UAAY14C,KAAKoiC,QAAUpiC,KAAKkoB,QAIvCud,EAAF9kC,UAAAunB,KAAE,WAAA,GAAFnkB,GAAA/D,MACQA,KAAKoB,UAAapB,KAAKq3C,SAAYr3C,KAAKq3C,QAAQlsC,SAAUnL,KAAKi2C,aAInEj2C,KAAK24C,aAAe34C,KAAK+a,QAAQ1a,cAAci8B,wBAG/Ct8B,KAAKy2C,iBAAmBhvC,SAASmxC,iBAAiB54C,KAAK+a,QAAQ1a,eAAe,cAE9EL,KAAKi2C,YAAa,EAClBj2C,KAAK64C,YAAYC,0BAA0B,MAC3C94C,KAAK+4C,4BACL/4C,KAAKg5C,0BACLh5C,KAAK6D,mBAAmBqB,eAGxBlF,KAAK4D,QAAQ4zC,SAAS/zB,eAAehe,KAAK0J,EAAAA,KAAK,IAAIxJ,UAAU,WACvD5B,EAAK0yC,kBAAoB1yC,EAAKk1C,WAAWzwB,YACzCzkB,EAAKk1C,WAAWzwB,WAAWkB,iBAC7B3lB,EAAKk1C,WAAWzwB,WAAWkB,eAAeppB,MAAM44C,SAAcn1C,EAAK0yC,iBAA3E,UAMEhR,EAAF9kC,UAAAyhC,MAAE,WACMpiC,KAAKi2C,aACPj2C,KAAKi2C,YAAa,EAClBj2C,KAAK64C,YAAYC,0BAA0B94C,KAAKm5C,SAAW,MAAQ,OACnEn5C,KAAK6D,mBAAmBqB,eACxBlF,KAAK22C,eAUTlR,EAAF9kC,UAAA4zB,WAAE,SAAW9vB,GACLzE,KAAKq3C,SACPr3C,KAAKo5C,qBAAqB30C,IAW9BghC,EAAF9kC,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAK02C,UAAYjiB,GAUnBgR,EAAF9kC,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAK22C,WAAaliB,GASpBgR,EAAF9kC,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKoB,SAAWwzB,EAChB50B,KAAK6D,mBAAmBqB,eACxBlF,KAAK+3C,aAAa3xC,QAIpB9B,OAAFC,eAAMkhC,EAAN9kC,UAAA,iBAAE,WACE,MAAOX,MAAKi2C,4CAId3xC,OAAFC,eAAMkhC,EAAN9kC,UAAA,gBAAE,WACE,MAAOX,MAAKs4C,SAAWt4C,KAAKg4C,gBAAgBpnB,SAAW5wB,KAAKg4C,gBAAgBpnB,SAAS,oCAIvFtsB,OAAFC,eAAMkhC,EAAN9kC,UAAA,oBAAE,WACE,GAAIX,KAAKq5C,MACP,MAAO,EAGT,IAAIr5C,KAAKm2C,UAAW,CAClB,GAAMmD,GAAkBt5C,KAAKg4C,gBAAgBpnB,SAAS7f,IAAI,SAAAumC,GAAU,MAAAA,GAAOiC,WAO3E,OALIv5C,MAAKm5C,UACPG,EAAgBE,UAIXF,EAAgBG,KAAK,MAG9B,MAAOz5C,MAAKg4C,gBAAgBpnB,SAAS,GAAG2oB,2CAI1C9T,EAAF9kC,UAAAw4C,OAAE,WACE,QAAOn5C,KAAK2D,MAA2B,QAApB3D,KAAK2D,KAAKc,OAI/BghC,EAAF9kC,UAAAme,eAAE,SAAe1W,GACRpI,KAAKoB,WACRpB,KAAK04C,UAAY14C,KAAK05C,mBAAmBtxC,GAASpI,KAAK25C,qBAAqBvxC,KAKxEq9B,EAAV9kC,UAAAg5C,qBAAA,SAA+BvxC,GAC3B,GAAM2W,GAAU3W,EAAM2W,QAChB66B,EAAa76B,IAAYsc,EAAAA,YAActc,IAAYqc,EAAAA,UACrDrc,IAAYG,EAAAA,YAAcH,IAAYC,EAAAA,WACxBD,KAAYS,EAAAA,OAAST,IAAYU,EAAAA,QAGhCzf,KAAKs4C,UAAYlwC,EAAMyxC,SAAWD,GACnDxxC,EAAMC,iBACNrI,KAAKkoB,QACKloB,KAAKs4C,UACft4C,KAAK64C,YAAYiB,UAAU1xC,IAKvBq9B,EAAV9kC,UAAA+4C,mBAAA,SAA6BtxC,GACzB,GAAM2W,GAAU3W,EAAM2W,QAChB66B,EAAa76B,IAAYsc,EAAAA,YAActc,IAAYqc,EAAAA,SACnD2e,EAAU/5C,KAAK64C,WAErB,IAAI95B,IAAYK,EAAAA,MAAQL,IAAYO,EAAAA,IAClClX,EAAMC,iBACN0W,IAAYK,EAAAA,KAAO26B,EAAQC,qBAAuBD,EAAQE,wBACrD,IAAIL,GAAcxxC,EAAMyxC,OAE7BzxC,EAAMC,iBACNrI,KAAKoiC,YACA,IAAKrjB,IAAYS,EAAAA,OAAST,IAAYU,EAAAA,QAAUs6B,EAAQG,WAGxD,CACL,GAAMC,GAAyBJ,EAAQK,eAEvCL,GAAQD,UAAU1xC,GAEdpI,KAAKm2C,WAAayD,GAAcxxC,EAAMiyC,UAAYN,EAAQG,YAC1DH,EAAQK,kBAAoBD,GAC9BJ,EAAQG,WAAWI,4BATrBlyC,GAAMC,iBACN0xC,EAAQG,WAAWI,yBAiBvB7U,EAAF9kC,UAAA45C,aAAE,WACMv6C,KAAK04C,WACP14C,KAAKk2C,WAAa,EAClBl2C,KAAK8hC,aAAa/gC,MAAK,KAEvBf,KAAK8hC,aAAa/gC,MAAK,GACvBf,KAAK62C,qBAAsB,EAC3B72C,KAAKi5C,WAAWuB,QAAU,EAC1Bx6C,KAAK6D,mBAAmBqB,iBAQ5BugC,EAAF9kC,UAAA85C,cAAE,WACEz6C,KAAK62C,oBAAsB72C,KAAK04C,UAChC14C,KAAK6D,mBAAmBqB,gBAG1BugC,EAAF9kC,UAAAm6B,SAAE,WACO96B,KAAKoB,WACRpB,KAAKi3C,SAAU,EACfj3C,KAAK+3C,aAAa3xC,SAQtBq/B,EAAF9kC,UAAAo6B,QAAE,WACE/6B,KAAKi3C,SAAU,EAEVj3C,KAAKoB,UAAapB,KAAK04C,YAC1B14C,KAAK22C,aACL32C,KAAK6D,mBAAmBqB,eACxBlF,KAAK+3C,aAAa3xC,SAOtBq/B,EAAF9kC,UAAA+5C,YAAE,WAAA,GAAF32C,GAAA/D,IACIA,MAAKi5C,WAAW0B,eAAel1C,KAAK0J,EAAAA,KAAK,IAAIxJ,UAAU,WACrD5B,EAAKF,mBAAmB0iB,gBACxBxiB,EAAK62C,2BACL72C,EAAK82C,MAAMx6C,cAAcy6C,UAAY/2C,EAAKmyC,cAK9CzQ,EAAF9kC,UAAAo6C,eAAE,WACE,MAAO/6C,MAAK+1C,iBAAmB,OAAO/1C,KAAK+1C,iBAAiBiF,MAAU,IAIxE12C,OAAFC,eAAMkhC,EAAN9kC,UAAA,aAAE,WACE,OAAQX,KAAKg4C,iBAAmBh4C,KAAKg4C,gBAAgBiD,2CAG/CxV,EAAV9kC,UAAAw3C,0CAGIhgC,SAAQC,UAAUC,KAAK,WACrBtU,EAAKq1C,qBAAqBr1C,EAAK6xC,UAAY7xC,EAAK6xC,UAAUnxC,MAAQV,EAAK8zB,WAQnE4N,EAAV9kC,UAAAy4C,qBAAA,SAA+B30C,EAAoBy2C,aAC/C,QADJ,KAAAA,IAAmDA,GAAnD,GACQl7C,KAAKs4C,UAAY7zC,EAAO,CAC1B,IAAKmiB,MAAMC,QAAQpiB,GACjB,KAAM02C,KAGRn7C,MAAKo7C,kBACL32C,EAAMiC,QAAQ,SAAC20C,GAAsB,MAAAt3C,GAAKu3C,aAAaD,EAAcH,KACrEl7C,KAAKu7C,kBACA,CACLv7C,KAAKo7C,iBAEL,IAAMI,GAAsBx7C,KAAKs7C,aAAa72C,EAAOy2C,EAIjDM,IACFx7C,KAAK64C,YAAY4C,cAAcD,GAInCx7C,KAAK6D,mBAAmBqB,gBAOlBugC,EAAV9kC,UAAA26C,aAAA,SAAuB72C,EAAYy2C,kBAAnC,KAAAA,IAAmCA,GAAnC,EACI,IAAMM,GAAsBx7C,KAAKq3C,QAAQrxC,KAAK,SAACsxC,GAC7C,IAEE,MAAuB,OAAhBA,EAAO7yC,OAAiBV,EAAKqyC,aAAakB,EAAO7yC,MAAQA,GAChE,MAAOi3C,GAKP,MAJI5wC,GAAAA,aAEF6wC,QAAQC,KAAKF,IAER,IAUX,OANIF,KACFN,EAAcM,EAAoBlB,wBAA0BkB,EAAoBK,SAChF77C,KAAKg4C,gBAAgB6D,OAAOL,GAC5Bx7C,KAAK+3C,aAAa3xC,QAGbo1C,GAQD/V,EAAV9kC,UAAAy6C,gBAAA,SAA0BU,GACtB97C,KAAKg4C,gBAAgB/P,QACrBjoC,KAAKq3C,QAAQ3wC,QAAQ,SAAA4wC,GACfA,IAAWwE,GACbxE,EAAOyE,aAGX/7C,KAAK+3C,aAAa3xC,QAIZq/B,EAAV9kC,UAAA43C,qCACIv4C,MAAK64C,YAAc,GAAImD,GAAAA,2BAAsCh8C,KAAKq3C,SAC/D4E,gBACAC,0BACApD,0BAA0B94C,KAAKm5C,SAAW,MAAQ,OAEnDn5C,KAAK64C,YAAYsD,OAAO12C,KAAKC,EAAAA,UAAU1F,KAAKw2C,WAAW7wC,UAAU,WAAM,MAAA5B,GAAKq+B,UAC9EpiC,KAAK64C,YAAYvzC,OAAOG,KAAKC,EAAAA,UAAU1F,KAAKw2C,WAAW7wC,UAAU,WAC3D5B,EAAKkyC,YAAclyC,EAAK82C,MAC1B92C,EAAKq4C,8BACKr4C,EAAKkyC,YAAelyC,EAAKu0C,WAAYv0C,EAAK80C,YAAYqB,YAChEn2C,EAAK80C,YAAYqB,WAAWI,2BAM1B7U,EAAV9kC,UAAA63C,oCACU6D,EAAqB72C,EAAAA,MAAMxF,KAAKq3C,QAAQnsC,QAASlL,KAAKw2C,SAE5Dx2C,MAAKm3C,uBACF1xC,KAAKC,EAAAA,UAAU22C,GAAqB/wC,EAAAA,OAAO,SAAAlD,GAAS,MAAAA,GAAM8yC,eAC1Dv1C,UAAU,SAAAyC,GACTrE,EAAKu4C,UAAUl0C,EAAM4qB,SAEhBjvB,EAAKu0C,UAAYv0C,EAAKkyC,aACzBlyC,EAAKq+B,QACLr+B,EAAKuZ,WAMX9X,EAAAA,MAAJsL,UAAA,GAAa9Q,KAAKq3C,QAAQtmC,IAAI,SAAAumC,GAAU,MAAAA,GAAOzrB,iBACxCpmB,KAAKC,EAAAA,UAAU22C,IACf12C,UAAU,WACT5B,EAAKF,mBAAmBqB,eACxBnB,EAAKg0C,aAAa3xC,SAGtBpG,KAAKu8C,iBAIC9W,EAAV9kC,UAAA27C,UAAA,SAAoBhF,GAChB,GAAMkF,GAAcx8C,KAAKg4C,gBAAgByE,WAAWnF,EAGhDt3C,MAAKs4C,UACPt4C,KAAKg4C,gBAAgBljB,OAAOwiB,GAC5Bt3C,KAAK+3C,aAAa3xC,OAClBo2C,EAAclF,EAAOyE,WAAazE,EAAOuE,SACzC77C,KAAK64C,YAAY4C,cAAcnE,GAC/Bt3C,KAAKu7C,gBAELv7C,KAAKo7C,gBAAgC,MAAhB9D,EAAO7yC,UAAgBsE,GAAYuuC,GAEpC,MAAhBA,EAAO7yC,MACTzE,KAAK08C,kBAAkBpF,EAAO7yC,QAE9BzE,KAAKg4C,gBAAgB6D,OAAOvE,GAC5Bt3C,KAAK+3C,aAAa3xC,SAIlBo2C,IAAgBx8C,KAAKg4C,gBAAgByE,WAAWnF,IAClDt3C,KAAK08C,qBAQDjX,EAAV9kC,UAAA46C,iCACQv7C,MAAKm2C,YACPn2C,KAAKg4C,gBAAgB/P,QAErBjoC,KAAKq3C,QAAQ3wC,QAAQ,SAAA4wC,GACfA,EAAO1mB,UACT7sB,EAAKi0C,gBAAgB6D,OAAOvE,KAGhCt3C,KAAK+3C,aAAa3xC,SAKdq/B,EAAV9kC,UAAA+7C,kBAAA,SAA4BC,GACxB,GAAIC,GAAmB,IAGrBA,GADE58C,KAAKs4C,SACQt4C,KAA4B,SAAE+Q,IAAI,SAAAumC,GAAU,MAAAA,GAAO7yC,QAEpDzE,KAAK4wB,SAAY5wB,KAA0B,SAAEyE,MAAQk4C,EAGrE38C,KAAK63B,OAAS+kB,EACd58C,KAAK43C,YAAY72C,KAAK67C,GACtB58C,KAAK02C,UAAUkG,GACf58C,KAAK23C,gBAAgB52C,KAAK,GAAIw0C,IAAgBv1C,KAAM48C,IACpD58C,KAAK6D,mBAAmBqB,gBAIlBugC,EAAV9kC,UAAA47C,yBACIv8C,KAAK42C,WAAa52C,KAAKq3C,QAAQtmC,IAAI,SAAAumC,GAAU,MAAAA,GAAOjrB,KAAIotB,KAAK,MAOvDhU,EAAV9kC,UAAAq4C,mCACQh5C,KAAK64C,cACH74C,KAAKq5C,MACPr5C,KAAK64C,YAAYmB,qBAEjBh6C,KAAK64C,YAAY4C,cAAcz7C,KAAKg4C,gBAAgBpnB,SAAS,MAM3D6U,EAAV9kC,UAAAy7C,uCACI,GAAMS,GAAoB78C,KAAK64C,YAAYuB,iBAAmB,EACxD0C,EAAaC,EAA8BF,EAAmB78C,KAAKq3C,QACrEr3C,KAAKg9C,aAETh9C,MAAK66C,MAAMx6C,cAAcy6C,UAAYmC,EACnCJ,EAAoBC,EACpB98C,KAAKk9C,iBACLl9C,KAAK66C,MAAMx6C,cAAcy6C,UA31BQ,MAi2BrCrV,EAAF9kC,UAAA2c,MAAE,WACEtd,KAAKsD,YAAYjD,cAAcid,SAIzBmoB,EAAV9kC,UAAAw8C,gBAAA,SAA0B7F,GACtB,MAAOt3C,MAAKq3C,QAAQ/gC,OAAO,SAAC8mC,EAAgBC,EAAoB/tC,GAC9D,WAAkBvG,KAAXq0C,EAAwB9F,IAAW+F,EAAU/tC,MAAQvG,GAAaq0C,OACxEr0C,KAIG08B,EAAV9kC,UAAAo4C,qCACI,GAAMuE,GAAat9C,KAAKk9C,iBAClBvM,EAAQ3wC,KAAKu9C,gBACbC,EAAcjlC,KAAKE,IAAIk4B,EAAQ2M,EAh3BF,KAi3B7BG,EAAwB9M,EAAQ2M,EAGhCI,EAAYD,EAAwBD,EAGtCG,EACA39C,KAAKq5C,MAAQ,EAAIr5C,KAAKm9C,gBAAgBn9C,KAAKg4C,gBAAgBpnB,SAAS,GAExE+sB,IAAwBZ,EAA8BY,EAAsB39C,KAAKq3C,QAC7Er3C,KAAKg9C,aAIT,IAAMY,GAAeJ,EAAc,CACnCx9C,MAAKk2C,WAAal2C,KAAK69C,wBAAwBF,EAAsBC,EAAcF,GACnF19C,KAAK82C,SAAW92C,KAAK89C,yBAAyBH,EAAsBC,EAAcF,GAElF19C,KAAK+9C,4BAA4BL,IAUnCjY,EAAF9kC,UAAAk9C,wBAAE,SAAwBx8C,EAAuBu8C,EACvBF,GACtB,GAAMJ,GAAat9C,KAAKk9C,iBAClBc,EAA4BV,EAAaj8C,EACzC48C,EAAmBX,EAAa,EAMhCY,EAAwBF,EAA4BJ,EAAeK,CACzE,OAAO1lC,MAAKE,IAAIF,KAAKqI,IAAI,EAAGs9B,GAAwBR,IAItDp5C,OAAFC,eAAMkhC,EAAN9kC,UAAA,kBAAE,WAGE,MAAOX,MAAK4zB,eAAiB,KAAO5zB,KAAK2zB,WAAa3zB,KAAKm+C,6CAI7D1Y,EAAF9kC,UAAAy9C,yBAAE,WACE,MAAIp+C,MAAK04C,WAAa14C,KAAK64C,aAAe74C,KAAK64C,YAAYqB,WAClDl6C,KAAK64C,YAAYqB,WAAW7tB,GAG9B,MAUDoZ,EAAV9kC,UAAAi6C,oCACI,GAKIJ,GALE6D,EAAcr+C,KAAKi5C,WAAWzwB,WAAWkB,eAAe4S,wBACxDgiB,EAAet+C,KAAK8D,eAAey6C,kBACnCr0B,EAAQlqB,KAAKm5C,SACbqF,EAAex+C,KAAKs4C,SAAWmG,GACAptC,EAIrC,IAAIrR,KAAKs4C,SACPkC,EAz6ByCnpC,OA06BpC,CACL,GAAIuf,GAAW5wB,KAAKg4C,gBAAgBpnB,SAAS,IAAM5wB,KAAKq3C,QAAQqH,KAChElE,GAAU5pB,GAAYA,EAASukB,MAz7BQ9jC,GAHP,GAg8B7B6Y,IACHswB,IAAY,EAId,IAAMmE,GAAe,GAAKN,EAAYtlC,KAAOyhC,GAAWtwB,EAAQs0B,EAAe,IACzEI,EAAgBP,EAAYh0B,MAAQmwB,EAAU8D,EAAarlC,OACxCiR,EAAQ,EAAIs0B,EAGjCG,GAAe,EACjBnE,GAAWmE,EAr7B4B,EAs7B9BC,EAAgB,IACzBpE,GAAWoE,EAv7B4B,GA47BzC5+C,KAAKi5C,WAAWuB,QAAUA,EAC1Bx6C,KAAKi5C,WAAWzwB,WAAWif,kBAQrBhC,EAAV9kC,UAAAm9C,yBAAA,SAAmCz8C,EAAuBu8C,EACxBF,GAC9B,GAGImB,GAHEvB,EAAat9C,KAAKk9C,iBAClB4B,GAA0BxB,EAAat9C,KAAK24C,aAAap4C,QAAU,EACnEw+C,EAAsBxmC,KAAKg1B,MAl+BE,IAk+B8B+P,EAIjE,IAAIt9C,KAAKg3C,wBACP,MAAO,EAGT,IAAwB,IAApBh3C,KAAKk2C,WACP2I,EAA2Bx9C,EAAgBi8C,MACtC,IAAIt9C,KAAKk2C,aAAewH,EAAW,CACxC,GAAMsB,GAAsBh/C,KAAKu9C,gBAAkBwB,EAC7CE,EAAuB59C,EAAgB29C,EAIzCE,EACA5B,GAAct9C,KAAKu9C,gBAAkBD,EAn/BR,KAm/BgDA,CAMjFuB,GAA2BI,EAAuB3B,EAAa4B,MAK/DL,GAA2BjB,EAAeN,EAAa,CAMzD,QAAmC,EAA5BuB,EAAgCC,GASjCrZ,EAAV9kC,UAAAo9C,4BAAA,SAAsCL,GAClC,GAAMJ,GAAat9C,KAAKk9C,iBAClBoB,EAAet+C,KAAK8D,eAAey6C,kBAEnCY,EAAoBn/C,KAAK24C,aAAapuB,IAx/BH,EAy/BnC60B,EACFd,EAAa/9C,OAASP,KAAK24C,aAAanuB,OA1/BH,EA4/BnC60B,EAAiB9mC,KAAK+mC,IAAIt/C,KAAK82C,UAC/ByI,EACFhnC,KAAKE,IAAIzY,KAAKu9C,gBAAkBD,EAvhCD,KAwhC7BkC,EAAoBD,EAAmBF,EAAiBr/C,KAAK24C,aAAap4C,MAE5Ei/C,GAAoBJ,EACtBp/C,KAAKy/C,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3Bn/C,KAAK0/C,iBAAiBL,EAAgBF,EAAmBzB,GAExD19C,KAAK4qC,iBAAmB5qC,KAAK2/C,2BAKzBla,EAAV9kC,UAAA8+C,eAAA,SAAyBD,EAA2BJ,GAEhD,GAAMQ,GAAwBrnC,KAAKwjB,MAAMyjB,EAAoBJ,EAI7Dp/C,MAAKk2C,YAAc0J,EACnB5/C,KAAK82C,UAAY8I,EACjB5/C,KAAK4qC,iBAAmB5qC,KAAK2/C,0BAKzB3/C,KAAKk2C,YAAc,IACrBl2C,KAAKk2C,WAAa,EAClBl2C,KAAK82C,SAAW,EAChB92C,KAAK4qC,iBAAmB,mBAKpBnF,EAAV9kC,UAAA++C,iBAAA,SAA2BL,EAAwBF,EACxBzB,GAEvB,GAAMmC,GAAwBtnC,KAAKwjB,MAAMsjB,EAAiBF,EAW1D,IAPAn/C,KAAKk2C,YAAc2J,EACnB7/C,KAAK82C,UAAY+I,EACjB7/C,KAAK4qC,iBAAmB5qC,KAAK2/C,0BAKzB3/C,KAAKk2C,YAAcwH,EAIrB,MAHA19C,MAAKk2C,WAAawH,EAClB19C,KAAK82C,SAAW,OAChB92C,KAAK4qC,iBAAmB,gBAMpBnF,EAAV9kC,UAAAg/C,mCACI,GAAMrC,GAAat9C,KAAKk9C,iBAClB4B,GAA0BxB,EAAat9C,KAAK24C,aAAap4C,QAAU,CAEzE,OAAO,QADSgY,KAAK+mC,IAAIt/C,KAAK82C,UAAYgI,EAAyBxB,EAAa,GACpF,UAIU7X,EAAV9kC,UAAA48C,yBACI,MAAOv9C,MAAKq3C,QAAQlsC,OAASnL,KAAKg9C,aAAa7xC,QAIzCs6B,EAAV9kC,UAAAu8C,0BACI,MArlCiC,GAqlC1Bl9C,KAAKy2C,kBAOdhR,EAAF9kC,UAAAm/C,kBAAE,SAAkBC,GAChB//C,KAAKggD,iBAAmBD,EAAItG,KAAK,MAOnChU,EAAF9kC,UAAAs/C,iBAAE,WACEjgD,KAAKsd,QACLtd,KAAKkoB,QAOP5jB,OAAFC,eAAMkhC,EAAN9kC,UAAA,wBAAE,WACE,MAAOX,MAAKi2C,aAAej2C,KAAKq5C,sDA5iCpC73C,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACVC,SAAU,6jDACVC,QAAF,uwDACEO,QAAF,WAAA,gBAAA,YACEN,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEE,MACFsK,KAAA,UACMg0B,YAAN,KACIsf,kBAAJ,WACIC,oBAAJ,aACIC,yBAAJ,iBACIC,uBAAJ,sBACI53C,uBAAwB,sBACxB63C,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/Bt+C,MAAJ,aACIk6B,YAAJ,yBACIF,UAAJ,aACIC,SAAJ,aAEAjrB,YACAyjC,GAAAC,eACAD,GAAAI,eAEAnoC,YACAC,QAAA4zC,GAAA3zC,YAAAs4B,IACAv4B,QAAA6zC,GAAA5zC,YAAAs4B,8FAjLAjkC,KAAEqF,EAAAA,SAMFrF,KAAEqR,KAYFrR,KAAE4L,EAAAA,aAmBF5L,KAAEqQ,EAAAA,eAAFtJ,aAAA/G,KAAAwH,EAAAA,aAzBAxH,KAAEw/C,EAAAA,OAAFz4C,aAAA/G,KAAAwH,EAAAA,aA9BAxH,KAAQy/C,EAAAA,mBAAR14C,aAAA/G,KAAAwH,EAAAA,aAgDAxH,KAA6D0/C,GAA7D34C,aAuYK/G,KAvYLwH,EAAAA,aAAAxH,KAA8B2/C,EAAAA,UAA9B54C,aAAA/G,KAAAqzC,EAAAA,OAAArzC,KAAAwH,EAAAA,aAkBAxH,SAAQuH,GAARR,aAAA/G,KAAA2H,EAAAA,UAuXazH,MAvXb,gBAlBAF,SAAkDuH,GAAlDR,aAAA/G,KA0YKyH,EAAAA,OA1YLvH,MAAA2zC,SA4YA5P,EAAA/iC,wGAlJAu2C,aAAAz3C,KAAAoB,EAAAA,UAAAlB,MAAA0/C,EAAAA,uBAGA/J,UAAA71C,KAAAqM,EAAAA,gBAAAnM,MAAA2/C,IAAAvhB,aAAA,MAGAkd,eAAAx7C,KAAAqM,EAAAA,gBAAAnM,MAAA4/C,MAGA36B,aAAAnlB,KAAAsB,EAAAA,QAGAy+C,gBAAA//C,KAAA0wB,EAAAA,aAAkBxwB,MAAlBgkC,MAGAyY,cAAA38C,KAAAsB,EAAAA,QAGAszB,WAAA50B,KAAAsB,EAAAA,QAGAw1C,WAAA92C,KAAAsB,EAAAA,QAQA0+C,yBAAAhgD,KAAAsB,EAAAA,QAQA2+C,cAAAjgD,KAAAsB,EAAAA,QAWA2B,QAAAjD,KAAAsB,EAAAA,QAWA6wB,YAAAnyB,KAAAsB,EAAAA,MAAQpB,MAAR,gBAcAkyB,iBAAApyB,KAAAsB,EAAAA,MAAApB,MAAA,qBAWAggD,oBAAAlgD,KAAAsB,EAAAA,QAGAupB,KAAA7qB,KAAAsB,EAAAA,QAGAg/B,eAAAtgC,KAAA0B,EAAAA,SAGAogC,gBAAQ9hC,KAAR0B,EAAAA,OAAAxB,MAAA,YAoBA8hC,gBAAAhiC,KAAA0B,EAAAA,OAAAxB,MAAA,YAGAi2C,kBAAAn2C,KAAA0B,EAAAA,SAIA00C,cAAAp2C,KAAA0B,EAAAA,UAYAuiC,mC+CvbA,sBAgBAjkC,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACA+hB,EAAAA,cACAsa,GACAp8B;+CAEFI,SAAU67B,GAAoBC,GAAWC,GAAkBC,GAAiBp8B,IAC5EQ,cAAe07B,GAAWC,IAC1Bz4B,WAAY24B,QAzBdC,KCiBaC,IAIXC,aAAchrB,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyB1a,EAAAA,OAAO2a,UAAW,cACjDD,EAAAA,MAAM,UAAW1a,EAAAA,OAAO2a,UAAW,cACnCC,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,yCACnCD,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,0C/CqCzB6qB,GACT,GAAIrtB,GAAAA,eAAqC,+BACvCC,WAAY,OACZC,QAAS,WACP,GAAMotB,GAAUC,EAAAA,OAAOlb,EAAAA,QACvB,OAAO,YAAM,MAAAib,GAAQE,iBAAiBC,YAAYC,eAhBxB,SA4BrBC,GACT,GAAI3tB,GAAAA,eAAyC,+BAC3CC,WAAY,OACZC,QAAS,WAAM,OACb0tB,UAAW,EACXC,UAAW,EACXC,kBAAmB,uBAmGzB,QAAFC,GACYtf,EACA9jB,EACAqjC,EACA5sB,EACAnW,EACA8G,EACAk8B,EACA3W,EACqC4W,EACzBljC,EAEVmjC,GAZZ,GAAF/iC,GAAA/D,IACYA,MAAZonB,SAAYA,EACApnB,KAAZsD,YAAYA,EACAtD,KAAZ2mC,kBAAYA,EACA3mC,KAAZ+Z,kBAAYA,EACA/Z,KAAZ4D,QAAYA,EACA5D,KAAZ0K,UAAYA,EACA1K,KAAZ4mC,eAAYA,EACA5mC,KAAZiwB,cAAYA,EACqCjwB,KAAjD6mC,gBAAiDA,EACzB7mC,KAAxB2D,KAAwBA,EAEV3D,KAAd8mC,gBAAcA,EAvFd9mC,KAAA6b,UAAuC,QACvC7b,KAAAk/B,WAA+B,EAmC/Bl/B,KAAAumC,UAA4CvmC,KAAK8mC,gBAAgBP,UAGjEvmC,KAAAwmC,UAA4CxmC,KAAK8mC,gBAAgBN,UAEjExmC,KAAA+mC,SAAqB,GA6BrB/mC,KAAAgnC,iBAA6B,GAAIpb,KAGjC5rB,KAAAulB,WAAgC,GAAIphB,GAAAA,OAgBhC,IAAMa,GAAuB1B,EAAYjD,aAIpCqK,GAAUu8B,IAMiB,UAArBjiC,EAAQkiC,UAA6C,aAArBliC,EAAQkiC,WAMjDliC,EAAQ1E,MAAM6mC,iBAAmBniC,EAAQ1E,MAAM8mC,WAAa,KAX5DpnC,KAAKgnC,iBAAiBnc,IAAI,aAAc,WAAM,MAAA9mB,GAAKwC,SACnDvG,KAAKgnC,iBAAiBnc,IAAI,aAAc,WAAM,MAAA9mB,GAAK0C,SAEnDzG,KAAKgnC,iBACFtgC,QAAQ,SAAC2gC,EAAUj/B,GAAU,MAAA9E,GAAYjD,cAAcinC,iBAAiBl/B,EAAOi/B,MAUpFpX,EAAcE,QAAQnrB,GAASS,KAAKC,EAAAA,UAAU1F,KAAKulB,aAAa5f,UAAU,SAAA0U,GAEnEA,EAEiB,YAAXA,GACTzW,EAAQwiB,IAAI,WAAM,MAAAriB,GAAKwC,SAFvB3C,EAAQwiB,IAAI,WAAM,MAAAriB,GAAK0C,KAAK,OA5NpC,MAmHAnC,QAAAC,eAAMmiC,EAAN/lC,UAAA,gBAAA,WAAoC,MAAOX,MAAK6b,eAC9C,SAAapX,GACPA,IAAUzE,KAAK6b,YACjB7b,KAAK6b,UAAYpX,EAEbzE,KAAKijB,cACPjjB,KAAKunC,kBAEDvnC,KAAKwnC,kBACPxnC,KAAqB,iBAAEuG,KAAK9B,EAAO,GAGrCzE,KAAKijB,YAAYwkB,oDAOzBnjC,OAAAC,eAAMmiC,EAAN/lC,UAAA,gBAAA,WAA4B,MAAOX,MAAKk/B,eACtC,SAAaz6B,GACXzE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,GAGnCzE,KAAKk/B,WACPl/B,KAAKyG,KAAK,oCAchBnC,OAAAC,eAAMmiC,EAAN/lC,UAAA,eAAA,WAAkB,MAAOX,MAAK+mC,cAC5B,SAAYtiC,GACVzE,KAAK4mC,eAAec,kBAAkB1nC,KAAKsD,YAAYjD,cAAeL,KAAK+mC,UAG3E/mC,KAAK+mC,SAAoB,MAATtiC,GAAgB,GAAGA,GAAQoH,OAAS,IAE/C7L,KAAK+mC,UAAY/mC,KAAK2nC,oBACzB3nC,KAAKyG,KAAK,IAEVzG,KAAK4nC,wBACL5nC,KAAK4mC,eAAeiB,SAAS7nC,KAAKsD,YAAYjD,cAAeL,KAAKmoB,2CAMxE7jB,OAAAC,eAAMmiC,EAAN/lC,UAAA,oBAAA,WAAuB,MAAOX,MAAK8nC,mBACjC,SAAiBrjC,GACfzE,KAAK8nC,cAAgBrjC,EACjBzE,KAAKwnC,kBACPxnC,KAAK+nC,iBAAiB/nC,KAAK8nC,gDAuD/BpB,EAAF/lC,UAAAwF,YAAE,WAAA,GAAFpC,GAAA/D,IACQA,MAAKijB,cACPjjB,KAAKijB,YAAYC,UACjBljB,KAAKwnC,iBAAmB,MAIrBxnC,KAAK0K,UAAUu8B,MAClBjnC,KAAKgnC,iBAAiBtgC,QAAQ,SAAC2gC,EAAUj/B,GACvC,MAAArE,GAAKT,YAAYjD,cAAc2nC,oBAAoB5/B,EAAOi/B,KAE5DrnC,KAAKgnC,iBAAiBiB,SAGxBjoC,KAAKulB,WAAWnf,OAChBpG,KAAKulB,WAAWlf,WAEhBrG,KAAK4mC,eAAec,kBAAkB1nC,KAAKsD,YAAYjD,cAAeL,KAAKmoB,SAC3EnoB,KAAKiwB,cAAcI,eAAerwB,KAAKsD,YAAYjD,gBAIrDqmC,EAAF/lC,UAAA4F,KAAE,SAAK2hC,GAAL,GAAFnkC,GAAA/D,IACI,QADJ,KAAAkoC,IAAOA,EAAgBloC,KAAKumC,YACpBvmC,KAAKoB,UAAapB,KAAKmoB,QAA3B,CAEA,GAAMK,GAAaxoB,KAAK+oB,gBAExB/oB,MAAKmoC,UACLnoC,KAAKooC,QAAUpoC,KAAKooC,SAAW,GAAI1f,GAAAA,gBAAgB2f,GAAkBroC,KAAK+Z,mBAC1E/Z,KAAKwnC,iBAAmBhf,EAAWxM,OAAOhc,KAAKooC,SAASxf,SACxD5oB,KAAKwnC,iBAAiBc,cACnB7iC,KAAKC,EAAAA,UAAU1F,KAAKulB,aACpB5f,UAAU,WAAM,MAAA5B,GAAKokC,YACxBnoC,KAAK+nC,iBAAiB/nC,KAAK8nC,eAC3B9nC,KAAK4nC,wBACL5nC,KAAqB,iBAAEuG,KAAKvG,KAAK6b,UAAWqsB,KAI9CxB,EAAF/lC,UAAA8F,KAAE,SAAKyhC,OAAP,KAAAA,IAAOA,EAAgBloC,KAAKwmC,WACpBxmC,KAAKwnC,kBACPxnC,KAAKwnC,iBAAiB/gC,KAAKyhC,IAK/BxB,EAAF/lC,UAAAm0B,OAAE,WACE90B,KAAK2nC,oBAAsB3nC,KAAKyG,OAASzG,KAAKuG,QAIhDmgC,EAAF/lC,UAAAgnC,kBAAE,WACE,QAAS3nC,KAAKwnC,kBAAoBxnC,KAAKwnC,iBAAiBe,aAI1D7B,EAAF/lC,UAAAme,eAAE,SAAehC,GACT9c,KAAK2nC,qBAAuB7qB,EAAEiC,UAAYypB,EAAAA,SAC5C1rB,EAAEqX,kBACFn0B,KAAKyG,KAAK,KAKdigC,EAAF/lC,UAAA8nC,gBAAE,WACEzoC,KAAKyG,KAAKzG,KAAK8mC,gBAAgBL,oBAIzBC,EAAV/lC,UAAAooB,oCACI,IAAI/oB,KAAKijB,YACP,MAAOjjB,MAAKijB,WAGd,IAAM5I,GAASra,KAAK0oC,aACdzC,EAAUjmC,KAAK2oC,sBACfjzB,EAAY1V,KAAK2D,KAAO3D,KAAK2D,KAAKc,MAAQ,MAG1CmkC,EAAW5oC,KAAKonB,SAAShN,WAC5ByuB,oBAAoB7oC,KAAKsD,aACzBwlC,wBAAuB,GACvBC,mBAAmB,GACnBC,eACP3gB,MAAYhO,EAAO4uB,KAAShD,EAAQgD,MACpC5gB,MAAYhO,EAAO6uB,SAAajD,EAAQiD,YAG9BC,EAAsBnpC,KAAK2mC,kBAC9ByC,4BAA4BppC,KAAKsD,YA4BpC,OA1BAslC,GAASS,yBAAyBF,GAElCP,EAASU,gBAAgB7jC,KAAKC,EAAAA,UAAU1F,KAAKulB,aAAa5f,UAAU,SAAAL,GAC9DvB,EAAKyjC,mBACHliC,EAAOikC,yBAAyBC,kBAAoBzlC,EAAKyjC,iBAAiBe,YAG5ExkC,EAAKH,QAAQwiB,IAAI,WAAM,MAAAriB,GAAK0C,KAAK,KAGjC1C,EAAKyjC,iBAAiBiC,oBAAoBnkC,EAAOokC,eAAgBh0B,MAKvE1V,KAAKijB,YAAcjjB,KAAKonB,SAASqD,QAC/B/U,UAANA,EACMsU,iBAAkB4e,EAClBjiB,WA7R6B,oBA8R7BgjB,eAAgB3pC,KAAK6mC,oBAGvB7mC,KAAKijB,YAAYuG,cACd/jB,KAAKC,EAAAA,UAAU1F,KAAKulB,aACpB5f,UAAU,WAAM,MAAA5B,GAAKokC,YAEjBnoC,KAAKijB,aAINyjB,EAAV/lC,UAAAwnC,mBACQnoC,KAAKijB,aAAejjB,KAAKijB,YAAYlH,eACvC/b,KAAKijB,YAAY9G,SAGnBnc,KAAKwnC,iBAAmB,MAIlBd,EAAV/lC,UAAA4mC,2BACI,GAAMntB,GACFpa,KAAgB,YAAE4pC,YAA4B,iBAC5CvvB,EAASra,KAAK0oC,aACdzC,EAAUjmC,KAAK2oC,qBAErBvuB,GACG4uB,eACP3gB,MAAYhO,EAAO4uB,KAAShD,EAAQgD,MACpC5gB,MAAYhO,EAAO6uB,SAAajD,EAAQiD,aAQtCxC,EAAF/lC,UAAA+nC,WAAE,WACE,GAEImB,GAFEC,GAAS9pC,KAAK2D,MAA2B,OAAnB3D,KAAK2D,KAAKc,MAChC2V,EAAWpa,KAAKoa,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzByvB,GAAkBE,QAAS,SAAUC,QAAqB,SAAZ5vB,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsB0vB,GACV,SAAZ1vB,IAAwB0vB,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZ5vB,GACa,SAAZA,GAAuB0vB,GACX,QAAZ1vB,IAAuB0vB,GAGxB,KAAMG,IAAkC7vB,EAFxCyvB,IAAkBE,QAAS,MAAOC,QAAS,UAK7C,GAAJzyB,GAAAvX,KAAAkqC,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEf,KAAMY,EACNX,UAAWa,QAJjBxyB,EAAA6iB,EAI6B4P,QAJ7BzyB,EAAA+iB,KASEoM,EAAF/lC,UAAAgoC,oBAAE,WACE,GAEIwB,GAFEL,GAAS9pC,KAAK2D,MAA2B,OAAnB3D,KAAK2D,KAAKc,MAChC2V,EAAWpa,KAAKoa,QAGtB,IAAgB,SAAZA,EACF+vB,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZjwB,EACT+vB,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZjwB,GACa,QAAZA,GAAsB0vB,GACV,SAAZ1vB,IAAwB0vB,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZjwB,GACa,SAAZA,GAAuB0vB,GACX,QAAZ1vB,IAAuB0vB,GAGxB,KAAMG,IAAkC7vB,EAFxC+vB,IAAmBC,SAAU,QAASC,SAAU,UAKlD,GAAJ9yB,GAAAvX,KAAAkqC,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEpB,KAAMkB,EACNjB,UAAWkB,SAJjB7yB,EAAA6iB,EAI8BiQ,SAJ9B9yB,EAAA+iB,KASUoM,EAAV/lC,UAAAinC,2CAGQ5nC,MAAKwnC,mBACPxnC,KAAKwnC,iBAAiBrf,QAAUnoB,KAAKmoB,QACrCnoB,KAAKwnC,iBAAiB5H,gBAEtB5/B,KAAK4D,QAAQ6iB,iBAAiBhD,eAAehe,KAC3C0J,EAAAA,KAAK,GACLzJ,EAAAA,UAAU1F,KAAKulB,aACf5f,UAAU,WACN5B,EAAKyjC,kBACPzjC,EAAgB,YAAE0jC,qBAOlBf,EAAV/lC,UAAAonC,iBAAA,SAA2BuC,GACnBtqC,KAAKwnC,mBACPxnC,KAAKwnC,iBAAiB8C,aAAeA,EACrCtqC,KAAKwnC,iBAAiB5H,kBAKlB8G,EAAV/lC,UAAAupC,gBAAA,SAA0B9P,EAA4BE,GAelD,MAdsB,UAAlBt6B,KAAKoa,UAA0C,UAAlBpa,KAAKoa,SAC1B,QAANkgB,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAANF,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeE,EAAfA,mBAlYA94B,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,eACVC,SAAU,aACVU,MACEotB,cAAe,SACf+M,YAAa,yBACb8N,aAAc,6DAnFlB/oC,KAAEwpB,EAAAA,UAeFxpB,KAAE4L,EAAAA,aAZF5L,KAAEgpC,EAAAA,mBAoBFhpC,KAAE6K,EAAAA,mBAHF7K,KAAEqF,EAAAA,SAbFrF,KAAQsH,EAAAA,WAjBRtH,KAAQipC,EAAAA,gBAARjpC,KAAuB20B,EAAAA,eAyLvB30B,SAAAuH,GAAAR,aAAA/G,KAAKyH,EAAAA,OAALvH,MAAYskC,QAxLZxkC,KAAmBqQ,EAAAA,eAAnBtJ,aAAA/G,KAyLKwH,EAAAA,aACLxH,SAAAuH,GAAAR,aAAA/G,KAAKwH,EAAAA,WAALxH,KAAiByH,EAAAA,OAAjBvH,MAAwB4kC,2BAjFxBlsB,WAAA5Y,KAAGsB,EAAAA,MAAHpB,MAAS,wBAmBTN,WAAAI,KAAGsB,EAAAA,MAAHpB,MAAS,wBAYT6kC,YAAA/kC,KAAGsB,EAAAA,MAAHpB,MAAS,yBAGT8kC,YAAAhlC,KAAGsB,EAAAA,MAAHpB,MAAS,yBAKTymB,UAAA3mB,KAAGsB,EAAAA,MAAHpB,MAAS,gBAiBT4oC,eAAA9oC,KAAGsB,EAAAA,MAAHpB,MAAS,sBA1KTglC,mBA0hBE,QAAF2B,GACYxkC,EACA0jB,GADAvnB,KAAZ6D,mBAAYA,EACA7D,KAAZunB,oBAAYA,EAnBZvnB,KAAA0qC,YAAmC,UAGnC1qC,KAAA2qC,qBAAyC,EAGzC3qC,KAAA4qC,iBAA0D,SAM1D5qC,KAAA6qC,QAA2C,GAAI1mC,GAAAA,QAG/CnE,KAAA8qC,WAA4C9qC,KAAKunB,oBAAoB8B,QAAQC,EAAAA,YAAYC,SA5gBzF,MAuhBE8e,GAAF1nC,UAAA4F,KAAE,SAAK6T,EAA2B8tB,GAAhC,GAAFnkC,GAAA/D,IAEQA,MAAK+qC,gBACPlN,aAAa79B,KAAK+qC,gBAIpB/qC,KAAK2qC,qBAAsB,EAC3B3qC,KAAK6b,UAAYzB,EACjBpa,KAAKgrC,eAAiBpV,WAAW,WAC/B7xB,EAAK2mC,YAAc,UAInB3mC,EAAK67B,iBACJsI,IAOLG,EAAF1nC,UAAA8F,KAAE,SAAKyhC,GAAL,GAAFnkC,GAAA/D,IAEQA,MAAKgrC,gBACPnN,aAAa79B,KAAKgrC,gBAGpBhrC,KAAK+qC,eAAiBnV,WAAW,WAC/B7xB,EAAK2mC,YAAc,SAInB3mC,EAAK67B,iBACJsI,IAILG,EAAF1nC,UAAA2nC,YAAE,WACE,MAAOtoC,MAAK6qC,QAAQpnB,gBAItB4kB,EAAF1nC,UAAA4nC,UAAE,WACE,MAA4B,YAArBvoC,KAAK0qC,aAIdrC,EAAF1nC,UAAA8oC,oBAAE,SAAoBU,EAAyCz0B,GAC3D,GAAM4jB,GAA2B,UAAnBt5B,KAAK6b,WAA4C,UAAnB7b,KAAK6b,UAAyB,IAAM,IAC1EzB,EAAmB,KAARkf,EAAc6Q,EAAgBC,SAAWD,EAAgBE,QAE1E,IAAiB,QAAbjwB,GAAmC,WAAbA,EACxBpa,KAAK4qC,iBAAmBxwB,MACnB,IAAiB,UAAbA,EACTpa,KAAK4qC,iBAAiC,QAAdl1B,EAAsB,OAAS,YAClD,CAAA,GAAiB,QAAb0E,EAGT,KAAM6vB,IAAkCjqC,KAAK6b,UAF7C7b,MAAK4qC,iBAAiC,QAAdl1B,EAAsB,QAAU,SAM5D2yB,EAAF1nC,UAAAsqC,gBAAE,WACEjrC,KAAK2qC,qBAAsB,GAG7BtC,EAAF1nC,UAAAuqC,eAAE,SAAe9iC,GACb,GAAM2U,GAAU3U,EAAkC,OAElC,YAAZ2U,GAAyB/c,KAAKuoC,aAChCvoC,KAAK6qC,QAAQzkC,OAGC,YAAZ2W,GAAqC,WAAZA,IAC3B/c,KAAK2qC,qBAAsB,IAS/BtC,EAAF1nC,UAAAwqC,uBAAE,WACMnrC,KAAK2qC,qBACP3qC,KAAKyG,KAAK,IASd4hC,EAAF1nC,UAAAi/B,cAAE,WACE5/B,KAAK6D,mBAAmBqB,+BAxJ5B1D,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEE,SAAU,+QACVC,QAAF,iTACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEmP,YAAau0B,GAAfC,cACEzjC,2GAKE8oC,cAAJ,wGA1eA/C,iCgDZA,sBAeA7mC,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACA+hB,EAAAA,cACA9hB,IAEFI,SAAU+8B,GAAY2B,GAAkB9+B,IACxCQ,cAAe28B,GAAY2B,IAC3B/c,iBAAkB+c,QAvBpBgD,gCCsBArrC,KAAAkL,QAAoC,GAAI/G,GAAAA,QAGxCnE,KAAAsrC,kBAA8B,kBAG9BtrC,KAAAurC,cAA0B,YAG1BvrC,KAAAwrC,kBAA8B,gBAG9BxrC,KAAAyrC,eAA2B,aAG3BzrC,KAAA0rC,cAA0B,YAG1B1rC,KAAA2rC,cAAkB,SAAC10B,EAAce,EAAkB7M,GAC/C,GAAc,GAAVA,GAA2B,GAAZ6M,EAAiB,MAAO,QAAQ7M,CAEnDA,GAASoN,KAAKqI,IAAIzV,EAAQ,EAE1B,IAAM2M,GAAab,EAAOe,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAa3M,EAC1BoN,KAAKE,IAAIX,EAAaE,EAAU7M,GAChC2M,EAAaE,GAErB,OAAiD7M,GApDjD,sBAgBA3J,KAACupB,EAAAA,WAADrpB,OAAakX,WAAY,8GAhBzBgzB,KA8DaC,IAEX3+B,QAAS0+B,GACT5d,OAAQ,GAAIhlB,GAAAA,SAAY,GAAIoiB,GAAAA,SAAYwgB,KACxC3d,WAAY6d,ICnCdC,GAAA,yBA/BA,MAAAA,MA4CAC,GAAA,yBA5CA,MAAAA,MA6CaC,GAAoBvgB,EAAiBsgB,mBAkFhD,QAAFE,GAAqB5d,EACCzqB,GADpB,GAAFE,GAEIC,EAFJC,KAAAjE,OAAAA,WAAqB+D,GAArBuqB,MAAqBA,EACCvqB,EAAtBF,mBAAsBA,EArDtBE,EAAAooC,WAAuB,EASvBpoC,EAAAqoC,QAAoB,EAkBpBroC,EAAAsoC,oBAQAtoC,EAAAuoC,eAA0B,EAS1BvoC,EAAAwoC,uBAAkC,EAGlCxoC,EAAAkT,KAAqD,GAAIuF,GAAAA,aAQrDzY,EAAKyoC,aAAele,EAAMpjB,QAAQvF,UAAU,WAAM,MAAA5B,GAAKF,mBAAmBqB,mBAR9E,MA1DkCb,GAAlC6nC,EAAAloC,GAMAM,OAAAC,eAAM2nC,EAANvrC,UAAA,iBAAA,WAA4B,MAAOX,MAAKmsC,gBACtC,SAAc1nC,GACZzE,KAAKmsC,WAAa9tB,EAAAA,qBAAqB5Z,GACvCzE,KAAK6D,mBAAmBqB,gDAM5BZ,OAAAC,eAAM2nC,EAANvrC,UAAA,cAAA,WAAyB,MAAOX,MAAKosC,aACnC,SAAW3nC,GACTzE,KAAKosC,QAAU/tB,EAAAA,qBAAqB5Z,GACpCzE,KAAK6D,mBAAmBqB,gDAM5BZ,OAAAC,eAAM2nC,EAANvrC,UAAA,gBAAA,WAA2B,MAAOX,MAAKysC,eACrC,SAAahoC,GACXzE,KAAKysC,UAAYpuB,EAAAA,qBAAqB5Z,GACtCzE,KAAK0sC,mEAMTpoC,OAAAC,eAAM2nC,EAANvrC,UAAA,uBAAA,WAAoC,MAAOX,MAAKqsC,sBAC9C,SAAoB5nC,GAClBzE,KAAKqsC,kBAAoB5nC,OAAasM,IAAI,SAAA47B,GAAK,MAAAtuB,GAAAA,qBAAqBsuB,KACpE3sC,KAAK0sC,mEAMTpoC,OAAAC,eAAM2nC,EAANvrC,UAAA,oBAAA,WAAgC,MAAOX,MAAKssC,mBAC1C,SAAiB7nC,GACfzE,KAAKssC,cAAgBznC,EAAAA,sBAAsBJ,oCAO/CH,OAAAC,eAAM2nC,EAANvrC,UAAA,4BAAA,WAAwC,MAAOX,MAAKusC,2BAClD,SAAyB9nC,GACvBzE,KAAKusC,sBAAwB1nC,EAAAA,sBAAsBJ,oCAgBrDynC,EAAFvrC,UAAA8Z,SAAE,WACEza,KAAK4sC,cAAe,EACpB5sC,KAAK0sC,kCACL1sC,KAAKgtB,oBAGPkf,EAAFvrC,UAAAwF,YAAE,WACEnG,KAAKwsC,aAAar1B,eAIpB+0B,EAAFvrC,UAAAksC,SAAE,WACO7sC,KAAK8sC,gBACV9sC,KAAK+X,YACL/X,KAAK+sC,mBAIPb,EAAFvrC,UAAAqsC,aAAE,WACOhtC,KAAKitC,oBACVjtC,KAAK+X,YACL/X,KAAK+sC,mBAIPb,EAAFvrC,UAAAusC,UAAE,WAEOltC,KAAKitC,oBACVjtC,KAAK+X,UAAY,EACjB/X,KAAK+sC,mBAIPb,EAAFvrC,UAAAwsC,SAAE,WAEOntC,KAAK8sC,gBACV9sC,KAAK+X,UAAY/X,KAAKotC,mBACtBptC,KAAK+sC,mBAIPb,EAAFvrC,UAAAssC,gBAAE,WACE,MAAOjtC,MAAK+X,WAAa,GAAsB,GAAjB/X,KAAKgY,UAIrCk0B,EAAFvrC,UAAAmsC,YAAE,WACE,GAAMO,GAAgBrtC,KAAKotC,kBAC3B,OAAOptC,MAAK+X,UAAYs1B,GAAkC,GAAjBrtC,KAAKgY,UAIhDk0B,EAAFvrC,UAAAysC,iBAAE,WACE,MAAO70B,MAAKC,KAAKxY,KAAKmL,OAASnL,KAAKgY,UAAY,GAYlDk0B,EAAFvrC,UAAA2sC,gBAAE,SAAgBt1B,GAGd,GAAMF,GAAa9X,KAAK+X,UAAY/X,KAAKgY,QACzChY,MAAK+X,UAAYQ,KAAKg1B,MAAMz1B,EAAaE,IAAa,EAEtDhY,KAAKgY,SAAWA,EAChBhY,KAAK+sC,kBAOCb,EAAVvrC,UAAA+rC,2CACS1sC,KAAK4sC,eAGL5sC,KAAKgY,WACRhY,KAAKysC,UAA2C,GAA/BzsC,KAAKwtC,gBAAgBriC,OAClCnL,KAAKwtC,gBAAgB,GAjML,IAqMtBxtC,KAAKytC,0BAA4BztC,KAAKwtC,gBAAgBpiC,SACQ,GAA1DpL,KAAKytC,0BAA0Bh3B,QAAQzW,KAAKgY,WAC9ChY,KAAKytC,0BAA0Bv+B,KAAKlP,KAAKgY,UAI3ChY,KAAKytC,0BAA0Bh4B,KAAK,SAACE,EAAGC,GAAM,MAAAD,GAAIC,IAElD5V,KAAK6D,mBAAmBqB,iBAIlBgnC,EAAVvrC,UAAAosC,0BACI/sC,KAAKiX,KAAKlW,MACRgX,UAAW/X,KAAK+X,UAChBC,SAAUhY,KAAKgY,SACf7M,OAAQnL,KAAKmL,yBA1LnB3J,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,eACVC,SAAU,u1EACVC,QAAF,uoBACEQ,MACFC,MAAA,iBAEAL,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAjDAiqC,EAAAxpC,mEA0DAsV,WAAAxW,KAAAsB,EAAAA,QASA0qC,kBAAAhsC,KAAAsB,EAAAA,QASA4qC,eAAAlsC,KAAAsB,EAAAA,QASA6qC,uBAAAnsC,KAAQsB,EAAAA,QASRmU,OAAAzV,KAAA0B,EAAAA,UAiBAgpC,mCC1HA,sBAiBA1qC,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACA8I,GACAyzB,GACAwF,IAEF1hC,SAAUuiC,IACVniC,cAAemiC,IACfj/B,WAAY4+B,QA1Bd+B,KCqBAC,GAAA,WACE,QAAFA,GAAqBvqC,GAAAtD,KAArBsD,YAAqBA,EAtBrB,MAAAuqC,MAyBaC,GAA2BtqC,EAAWqqC,GAAoB,WAGnEE,GAAgB,iBAyBlB,QAAFC,GAAqB1qC,GAAnB,GAAFS,GACIC,EADJC,KAAAjE,KACUsD,IADVtD,WAAqB+D,GAArBT,YAAqBA,EAQrBS,EAAA8zB,OAA2B,EAM3B9zB,EAAAkqC,aAAiC,EASjClqC,EAAAm6B,KAAwE,cAGxEn6B,EAAAgqC,cAAkB,oBAAoBA,OAHtC,MAzBoC1pC,GAApC2pC,EAAAhqC,GAQAM,OAAAC,eAAMypC,EAANrtC,UAAA,aAAA,WAAwB,MAAOX,MAAK63B,YAClC,SAAUlX,GAAa3gB,KAAK63B,OAASqW,GAAMvtB,GAAK,oCAKlDrc,OAAAC,eAAMypC,EAANrtC,UAAA,mBAAA,WAA8B,MAAOX,MAAKiuC,kBACxC,SAAgBttB,GAAa3gB,KAAKiuC,aAAeC,GAAMvtB,GAAK,oCAgB5DqtB,EAAFrtC,UAAAwtC,kBAAE,WAEE,OAAQlzB,UAAW,UADLjb,KAAKyE,MAAQ,IAC/B,MAOEupC,EAAFrtC,UAAAytC,iBAAE,WACE,GAAkB,WAAdpuC,KAAKk+B,KAAmB,CAE1B,OAAQjjB,UAAW,UADLjb,KAAKquC,YAAc,IACvC,sBA7DA7sC,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iBACVU,MACFsK,KAAA,cACM0hC,gBAAN,IACIC,gBAAJ,MACItR,uBAAJ,QACIuR,cAAe,OACfjsC,MAAJ,oBAEAF,QAAA,SACAR,SAAA,0pBACEC,QAAS,40HACTI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,kEArCA+rC,EAAAtrC,oEAgDAw7B,OAAA18B,KAAAsB,EAAAA,SAkBAkrC,mCC5EA,sBAcAxsC,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUC,EAAAA,aAAcC,IACxBI,SAAUqkC,GAAgBzkC,IAC1BQ,cAAeikC,QAjBjBS,Kb6BMC,GAAY,IAUlBC,GAAA,WACE,QAAFA,GAAqBrrC,GAAAtD,KAArBsD,YAAqBA,EAxCrB,MAAAqrC,MA0CaC,GAA+BprC,EAAWmrC,GAAwB,WAMzEE,GAAmC,27CAgGvC,QAAF5Q,GAAqB36B,EACP66B,EACsCvzB,GAFlD,GAAF7G,GAIIC,EAJJC,KAAAjE,KAIUsD,IAJVtD,IAAqB+D,GAArBT,YAAqBA,EAE+BS,EAApD6G,UAAoDA,EAjDpD7G,EAAA8zB,OAAmB,EAEnB9zB,EAAA+qC,oBAA+B,EAqB/B/qC,EAAAgrC,UAAsBL,GAatB3qC,EAAAm6B,KAAuC,cAgBnCn6B,EAAK+qC,mBAAqB3Q,EAAS6Q,MAAQ7Q,EAAS8Q,OAIpD,IAAMC,GACJ,sCAAqCnrC,EAAK+qC,mBAAqB,YAAc,IADnF,mBAGIxrC,GAAYjD,cAAcqE,UAAUE,IAAIsqC,KApB5C,MAzCwC7qC,GAAxC45B,EAAAj6B,GAiBAM,OAAAC,eAAM05B,EAANt9B,UAAA,gBAAA,WAA2B,MAAOX,MAAK+uC,eACrC,SAAarT,GACX17B,KAAK+uC,UAAY1wB,EAAAA,qBAAqBqd,GAEjC17B,KAAK8uC,oBAAuB7Q,EAAmBkR,UAAU5iB,IAAIvsB,KAAK+uC,YACrE/uC,KAAKovC,oDAOX9qC,OAAAC,eAAM05B,EAANt9B,UAAA,8BACI,MAAOX,MAAKqvC,cAAgBrvC,KAAKsvC,SAAW,QAE9C,SAAgB7qC,GACdzE,KAAKqvC,aAAehxB,EAAAA,qBAAqB5Z,oCAS7CH,OAAAC,eAAM05B,EAANt9B,UAAA,wBACI,MAAqB,gBAAdX,KAAKk+B,KAAyBl+B,KAAK63B,OAAS,OAErD,SAAUwH,GACRr/B,KAAK63B,OAAStf,KAAKqI,IAAI,EAAGrI,KAAKE,IAAI,IAAK4F,EAAAA,qBAAqBghB,sCAmB/D/6B,OAAFC,eAAM05B,EAANt9B,UAAA,qBAAE,WACE,OAAQX,KAAKsvC,SA9HS,IA8HuB,mCAI/ChrC,OAAFC,eAAM05B,EAANt9B,UAAA,gBAAE,WACE,GAAM4uC,GAA+B,EAArBvvC,KAAKwvC,cAAoBxvC,KAAKyvC,WAC9C,OAAO,OAAOF,EAAlB,IAA6BA,mCAI3BjrC,OAAFC,eAAM05B,EAANt9B,UAAA,4BAAE,WACE,MAAO,GAAI4X,KAAKm3B,GAAK1vC,KAAKwvC,+CAI5BlrC,OAAFC,eAAM05B,EAANt9B,UAAA,yBAAE,WACE,MAAkB,gBAAdX,KAAKk+B,KACAl+B,KAAK2vC,sBAAwB,IAAM3vC,KAAK63B,QAAU,IAIvD73B,KAAK8uC,oBAAoC,kBAAd9uC,KAAKk+B,KACC,GAA5Bl+B,KAAK2vC,qBAGP,sCAITrrC,OAAFC,eAAM05B,EAANt9B,UAAA,0BAAE,WACE,MAAOX,MAAKyvC,YAAczvC,KAAKsvC,SAAW,qCAIpCrR,EAAVt9B,UAAAyuC,4BACI,GAAIQ,GAAW3R,EAAmB2R,QAE7BA,KACHA,EAAW5vC,KAAK4K,UAAUilC,cAAc,SACxC7vC,KAAK4K,UAAUklC,KAAKC,YAAYH,GAChC3R,EAAmB2R,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAA+B,MAAEK,WAAWjwC,KAAKkwC,oBAAqB,GAGzEjS,EAAmBkR,UAAUvqC,IAAI5E,KAAKsvC,WAIhCrR,EAAVt9B,UAAAuvC,6BACI,MAAOrB,IAEFsB,QAAQ,eAAgB,GAAG,IAAOnwC,KAAK2vC,sBACvCQ,QAAQ,aAAc,GAAG,GAAMnwC,KAAK2vC,sBACpCQ,QAAQ,YAAa,GAAGnwC,KAAKsvC,WAnHtCrR,EAAAkR,UAA6B,GAAIiB,MAAa1B,KAM9CzQ,EAAA2R,SAAmD,oBAjCnDpuC,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEC,SAAU,qBACVU,MACFsK,KAAA,cACMrK,MAAN,uBACI67B,mBAAJ,WACIC,oBAAJ,WACIrB,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,QACxBuR,cAAJ,QAEAnsC,QAAA,SACAR,SAAA,+aACEC,QAAS,u5EACTI,gBAAFC,EAAAA,wBAAAC;iDACEL,cAAFC,EAAAA,kBAAAC,mFA/EAT,SAAEuH,GAAFR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAuK,EAAAA,eAsIAgyB,EAAAv7B,uEAnCAw7B,OAAA18B,KAAAsB,EAAAA,QAYA2B,QAAAjD,KAAAsB,EAAAA,SAaAm7B,wCA4GA,GAAAl6B,GAAAC,EAAAC,KAAAjE,KAAA0D,EAAAy6B,EAAAxzB,IAAA3K,IACE,OAAF+D,GAAAm6B,KAAA,gBAAAn6B,EAzOA,6BA6OAvC,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oBArBAiL,KAAA,cACAsxB,KAAA,gBACA37B,MAAA,mCACM67B,mBAAN,WACIC,oBAAqB,YAEzBh8B,QAAA,SACAR,SAAA,+aACAC,QAAA,u5EACAI,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAq8B,EAAA1sB,eAAA,WAAA,QACApQ,KAAA4L,EAAAA,+GAvOAkxB,GAMAL,ICXAM,GAAA,yBAPA,sBAYA/8B,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,IACVI,SACEs0B,GACAK,GACA/0B,IAEFQ,cACEk0B,GACAK,QArBJC,KC8CI7L,GAAe,EAON8L,IACXtxB,QAAS0lB,EAAAA,kBACTzlB,YAAakP,EAAAA,WAAW,WAAM,MAAAoiB,MAC9B3L,OAAO,GAIT4L,GAAA,WACE,QAAFA,GAEW1L,EAEAvuB,GAFAzE,KAAXgzB,OAAWA,EAEAhzB,KAAXyE,MAAWA,EAjEX,MAAAi6B,MAuEAC,GAAA,yBAvEA,MAAAA,MAwEaC,GAA0Bx3B,EAAcu3B,mBA6HnD,QAAFF,GAAsBI,GAApB,GAAF96B,GACIC,EADJC,KAAAjE,OAAAA,WAAsB+D,GAAtB86B,gBAAsBA,EAtGtB96B,EAAA8zB,OAAwB,KAGxB9zB,EAAA+6B,MAA0B,mBAAmBpM,KAG7C3uB,EAAAg7B,UAA6C,KAG7Ch7B,EAAAi7B,gBAAoC,EAGpCj7B,EAAAk7B,eAA+C,QAG/Cl7B,EAAAm7B,WAA+B,EAG/Bn7B,EAAAyvB,WAA+B,EAG/BzvB,EAAAq0B,8BAAwD,aAMxDr0B,EAAAuvB,UAAyB,aAOzBvvB,EAAAuB,OAA4D,GAAIkX,GAAAA,eAjIhE,MAuFmCnY,GAAnCo6B,EAAAz6B,GAkDAM,OAAAC,eAAMk6B,EAAN99B,UAAA,YAAA,WAAuB,MAAOX,MAAK8+B,WACjC,SAASr6B,GACPzE,KAAK8+B,MAAQr6B,EACbzE,KAAKm/B,2DAKT76B,OAAAC,eAAMk6B,EAAN99B,UAAA,gCACI,MAAOX,MAAKi/B,oBAEd,SAAkBte,GAChB3gB,KAAKi/B,eAAuB,WAANte,EAAiB,SAAW,QAClD3gB,KAAKo/B,uDAKT96B,OAAAC,eAAMk6B,EAAN99B,UAAA,aAAA,WAAqB,MAAOX,MAAK63B,YAC/B,SAAUwH,GACJr/B,KAAK63B,SAAWwH,IAElBr/B,KAAK63B,OAASwH,EAEdr/B,KAAKs/B,gCACLt/B,KAAKu/B,8DAITd,EAAF99B,UAAA4+B,0BAAE,WACMv/B,KAAK++B,YAAc/+B,KAAK++B,UAAU9L,UACpCjzB,KAAK++B,UAAU9L,SAAU,IAM/B3uB,OAAAC,eAAMk6B,EAAN99B,UAAA,gBAAA,WAAmB,MAAOX,MAAK++B,eAC7B,SAAanO,GACX5wB,KAAK++B,UAAYnO,EACjB5wB,KAAKyE,MAAQmsB,EAAWA,EAASnsB,MAAQ,KACzCzE,KAAKu/B,6DAKTj7B,OAAAC,eAAMk6B,EAAN99B,UAAA,gBAAA,WAA4B,MAAOX,MAAKk/B,eACtC,SAAaz6B,GACXzE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,GACvCzE,KAAKo/B,uDAKT96B,OAAAC,eAAMk6B,EAAN99B,UAAA,gBAAA,WAA4B,MAAOX,MAAKwzB,eACtC,SAAa/uB,GACXzE,KAAKwzB,UAAY3uB,EAAAA,sBAAsBJ,GACvCzE,KAAKo/B,uDAWPX,EAAF99B,UAAAwE,mBAAE,WAIEnF,KAAKg/B,gBAAiB,GAOxBP,EAAF99B,UAAA6+B,OAAE,WACMx/B,KAAKszB,WACPtzB,KAAKszB,aAIDmL,EAAV99B,UAAAw+B,6CACQn/B,MAAKy/B,SACPz/B,KAAKy/B,QAAQ/4B,QAAQ,SAAAg5B,GACnBA,EAAMjsB,KAAO1P,EAAK0P,QAMhBgrB,EAAV99B,UAAA2+B,oDAEUK,EAAuC,OAAnB3/B,KAAK++B,WAAsB/+B,KAAK++B,UAAUt6B,QAAUzE,KAAK63B,MAE/E73B,MAAKy/B,UAAYE,IACnB3/B,KAAK++B,UAAY,KACjB/+B,KAAKy/B,QAAQ/4B,QAAQ,SAAAg5B,GACnBA,EAAMzM,QAAUlvB,EAAKU,QAAUi7B,EAAMj7B,MACjCi7B,EAAMzM,UACRlvB,EAAKg7B,UAAYW,OAOzBjB,EAAF99B,UAAA0zB,iBAAE,WACMr0B,KAAKg/B,gBACPh/B,KAAKsF,OAAOvE,KAAK,GAAI29B,IAAe1+B,KAAc,UAAGA,KAAK63B,UAI9D4G,EAAF99B,UAAAy+B,oBAAE,WACMp/B,KAAKy/B,SACPz/B,KAAKy/B,QAAQ/4B,QAAQ,SAAAg5B,GAAS,MAAAA,GAAME,mBAQxCnB,EAAF99B,UAAA4zB,WAAE,SAAW9vB,GACTzE,KAAKyE,MAAQA,EACbzE,KAAK6+B,gBAAgB35B,gBAQvBu5B,EAAF99B,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAKo4B,8BAAgC3D,GAQvCgK,EAAF99B,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAKszB,UAAYmB,GAOnBgK,EAAF99B,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKoB,SAAWwzB,EAChB50B,KAAK6+B,gBAAgB35B,+BAvNzB1D,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,kBACVC,SAAU,gBACVqL,WAAYuxB,IACZl8B,MACEsK,KAAQ,aACRrK,MAAS,mBAEXF,QAAS,oDAtEXb,KAAEsF,EAAAA,uCAkHFxB,SAAA9D,KAAG0B,EAAAA,SAGHu8B,UAAAj+B,KAAGqM,EAAAA,gBAAHnM,MAAmB2a,EAAAA,WAAW,WAAM,MAAAwjB,OAAmBC,aAAa,MAIpErsB,OAAAjS,KAAGsB,EAAAA,QAQH4wB,gBAAAlyB,KAAGsB,EAAAA,QAUH2B,QAAAjD,KAAGsB,EAAAA,QAmBH8tB,WAAApvB,KAAGsB,EAAAA,QASH1B,WAAAI,KAAGsB,EAAAA,QAQHszB,WAAA50B,KAAGsB,EAAAA,SA9LH27B,GAuFmCG,IAmNnCmB,GAAA,WAME,QAAFA,GAAqBz8B,GAAAtD,KAArBsD,YAAqBA,EAhTrB,MAAAy8B,MAoTaC,GACTx8B,EAAW2D,EAAmBD,EAAc64B,KAAsB,yBAwJpE,QAAFF,GAA0BI,EACZv8B,EACQm7B,EACA5O,EACAiQ,GAJpB,GAAFn8B,GAKIC,EALJC,KAAAjE,KAKU0D,IALV1D,WAEsB+D,GAAtB86B,gBAAsBA,EACA96B,EAAtBksB,cAAsBA,EACAlsB,EAAtBm8B,iBAAsBA,EAhItBn8B,EAAAwvB,UAA8B,gBAAeb,GAG7C3uB,EAAAsoB,GAAwBtoB,EAAKwvB,UAyF7BxvB,EAAAuB,OAA4D,GAAIkX,GAAAA,aAShEzY,EAAA0vB,UAA8B,EAS9B1vB,EAAA8zB,OAAwB,KASxB9zB,EAAAo8B,+BAAuD,aAcnDp8B,EAAKk8B,WAAaA,EAElBl8B,EAAKo8B,+BACHD,EAAiBE,OAAO,SAAC/T,EAAY5Y,GAC/B4Y,IAAOtoB,EAAKsoB,IAAM5Y,IAAS1P,EAAK0P,OAClC1P,EAAKkvB,SAAU,OAhBzB,MA7HoC5uB,GAApCw7B,EAAA77B,GAsBAM,OAAAC,eAAMs7B,EAANl/B,UAAA,eAAA,WAA2B,MAAOX,MAAKyzB,cACrC,SAAYhvB,GACV,GAAM47B,GAAkBx7B,EAAAA,sBAAsBJ,EAC1CzE,MAAKyzB,WAAa4M,IACpBrgC,KAAKyzB,SAAW4M,EACZA,GAAmBrgC,KAAKigC,YAAcjgC,KAAKigC,WAAWx7B,QAAUzE,KAAKyE,MACvEzE,KAAKigC,WAAWrP,SAAW5wB,MACjBqgC,GAAmBrgC,KAAKigC,YAAcjgC,KAAKigC,WAAWx7B,QAAUzE,KAAKyE,QAI/EzE,KAAKigC,WAAWrP,SAAW,MAGzByP,GAEFrgC,KAAKkgC,iBAAiBI,OAAOtgC,KAAKqsB,GAAIrsB,KAAKyT,MAE7CzT,KAAK6+B,gBAAgB35B,iDAM3BZ,OAAAC,eAAMs7B,EAANl/B,UAAA,aAAA,WAAqB,MAAOX,MAAK63B,YAC/B,SAAUpzB,GACJzE,KAAK63B,SAAWpzB,IAClBzE,KAAK63B,OAASpzB,EACU,OAApBzE,KAAKigC,aACFjgC,KAAKizB,UAERjzB,KAAKizB,QAAUjzB,KAAKigC,WAAWx7B,QAAUA,GAEvCzE,KAAKizB,UACPjzB,KAAKigC,WAAWrP,SAAW5wB,yCAQrCsE,OAAAC,eAAMs7B,EAANl/B,UAAA,gCACI,MAAOX,MAAKi/B,gBAAmBj/B,KAAKigC,YAAcjgC,KAAKigC,WAAWvM,eAAkB,aAEtF,SAAkBjvB,GAChBzE,KAAKi/B,eAAiBx6B,mCAM1BH,OAAAC,eAAMs7B,EAANl/B,UAAA,2BACI,MAAOX,MAAKk/B,WAAkC,OAApBl/B,KAAKigC,YAAuBjgC,KAAKigC,WAAW7+B,cAExE,SAAaqD,GACXzE,KAAKk/B,UAAYr6B,EAAAA,sBAAsBJ,oCAK3CH,OAAAC,eAAMs7B,EAANl/B,UAAA,2BACI,MAAOX,MAAKwzB,WAAcxzB,KAAKigC,YAAcjgC,KAAKigC,WAAW7J,cAE/D,SAAa3xB,GACXzE,KAAKwzB,UAAY3uB,EAAAA,sBAAsBJ,oCAczCH,OAAFC,eAAMs7B,EAANl/B,UAAA,eAAE,WAAwB,OAAUX,KAAKqsB,IAAMrsB,KAAKuzB,WAApD,0CA8CEsM,EAAFl/B,UAAA2c,MAAE,WACEtd,KAAKiwB,cAAc4E,SAAS70B,KAAK+zB,cAAc1zB,cAAe,aAQhEw/B,EAAFl/B,UAAAi/B,cAAE,WAGE5/B,KAAK6+B,gBAAgB35B,gBAGvB26B,EAAFl/B,UAAA8Z,SAAE,WACMza,KAAKigC,aAEPjgC,KAAKizB,QAAUjzB,KAAKigC,WAAWx7B,QAAUzE,KAAK63B,OAE9C73B,KAAKyT,KAAOzT,KAAKigC,WAAWxsB,OAIhCosB,EAAFl/B,UAAAkK,gBAAE,WAAA,GAAF9G,GAAA/D,IACIA,MAAKiwB,cACFE,QAAQnwB,KAAK+zB,cAAc1zB,eAC3BsF,UAAU,SAAAquB,GAAe,MAAAjwB,GAAKkwB,oBAAoBD,MAGvD6L,EAAFl/B,UAAAwF,YAAE,WACEnG,KAAKiwB,cAAcI,eAAerwB,KAAK+zB,cAAc1zB,eACrDL,KAAKmgC,kCAICN,EAAVl/B,UAAA0zB,4BACIr0B,KAAKsF,OAAOvE,KAAK,GAAI29B,IAAe1+B,KAAMA,KAAK63B,UAGjDgI,EAAFl/B,UAAA4/B,kBAAE,WACE,MAAOvgC,MAAK4G,eAAiB5G,KAAKoB,UAGpCy+B,EAAFl/B,UAAA2zB,cAAE,SAAclsB,GAQZA,EAAM+rB,mBAOR0L,EAAFl/B,UAAA6/B,eAAE,SAAep4B,GAIbA,EAAM+rB,iBAEN,IAAMsM,GAAoBzgC,KAAKigC,YAAcjgC,KAAKyE,QAAUzE,KAAKigC,WAAWx7B,KAC5EzE,MAAKizB,SAAU,EACfjzB,KAAKq0B,mBAEDr0B,KAAKigC,aACPjgC,KAAKigC,WAAW7H,8BAA8Bp4B,KAAKyE,OACnDzE,KAAKigC,WAAWT,SACZiB,GACFzgC,KAAKigC,WAAW5L,qBAMdwL,EAAVl/B,UAAAszB,oBAAA,SAA8BD,GAErBh0B,KAAK+0B,cAAgC,aAAhBf,EAEdA,IACNh0B,KAAKigC,YACPjgC,KAAKigC,WAAWT,SAGdx/B,KAAK+0B,eACP/0B,KAAK+0B,aAAaC,UAClBh1B,KAAK+0B,aAAe,OARtB/0B,KAAK+0B,aAAe/0B,KAAKi1B,QAAQC,OAAO,EAAG,GAAIC,YAAY,oBAzPjE3zB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEE,SAAU,66BACVC,QAAF,i3CACEO,QAAF,QAAA,gBAAA,YACEN,cAAFC,EAAAA,kBAAAC,KACEL,SAAF,iBACEU,MACFC,MAAA,mBACMm+B,4BAAN,UACIC,6BAAJ,WACIC,YAAJ,sDAMA1+B,gBAAAC,EAAAA,wBAAAC,4GAnPAZ,KAAasF,EAAAA,oBApEbtF,KAAE20B,EAAAA,eAJF30B,KAAEq/B,EAAAA,6BALFhB,EAAAn9B,0DA0UAixB,YAAAnyB,KAAAsB,EAAAA,MAAApB,MAAA,gBAGAkyB,iBAAApyB,KAAAsB,EAAAA,MAAApB,MAAA,qBAGAo/B,kBAAGt/B,KAAHsB,EAAAA,MAAApB,MAAA,sBAGAuxB,UAAAzxB,KAAAsB,EAAAA,QAGA2B,QAAAjD,KAAAsB,EAAAA,QAGA4wB,gBAAGlyB,KAAHsB,EAAAA,QAwBA1B,WAAAI,KAAAsB,EAAAA,QAkBAszB,WAAA50B,KAAAsB,EAAAA,QAUAwC,SAAA9D,KAAA0B,EAAAA,SASA+xB,UAAAzzB,KAAAoB,EAAAA,UAAAlB,MAAA20B,MAaAtC,gBAAAvyB,KAAAoB,EAAAA,UAAAlB,MAAA,YA8BAm+B,mCC3cA,sBAcAr+B,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUC,EAAAA,aAAcG,GAAiBF,IACzCI,SAAU80B,GAAeoB,GAAgBt2B,IACzCQ,cAAe00B,GAAeoB,QAjBhCkB,KCiBaC,IAIXC,gBAAiBlmB,EAAAA,QAAQ,aACvBC,EAAAA,MAAM,qBAAsB1a,EAAAA,OAC1B2a,UAAW,uBACX3B,WAAY,aAEd0B,EAAAA,MAAM,OAAQ1a,EAAAA,OACZgZ,WAAY,YAEd4B,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CCqBH+lB,GACT,GAAIvoB,GAAAA,eAAwB,+BAC1BC,WAAY,OACZC,QAAS,WAAM,OAAA,mBAuBnB,QAAF4Z,GACc5uB,EAC8Cs9B,GAD9CnhC,KAAd6D,mBAAcA,EAC8C7D,KAA5DmhC,WAA4DA,EAJ5DnhC,KAAAohC,UAAuDroB,KAAM,KAAMsR,MAAO,MAsT1E,MA/SEoI,GAAF9xB,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAKmhC,WAAWE,gBAAgB17B,UAAU,SAAA27B,GACxCv9B,EAAKq9B,SAAWE,EAChBv9B,EAAKF,mBAAmBqB,iCA5B9B1D,KAACC,EAAAA,UAADC,OAAAC,SAAA,qBACEE,SAAU,4BACVS,MACFC,MAAA,qBACMg/B,yBAAN,gBACIC,0BAAJ,kBAEAt/B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,2JAgUAwwB,qDAhLAzyB,MAAAsD,YAAAA,EAAEtD,KAAFyhC,kBAAAA,EAAsBzhC,KAAtBiwB,cAAAA,EACsBjwB,KAAtB0K,UAAAA,EACsB1K,KAAtB4D,QAAAA,EACsB5D,KAAtB0hC,KAAAA,EACsB1hC,KAAtB2hC,qCAAA,sDA5FA3hC,KAAA4hC,MAAA,OAaA5hC,KAAA6hC,eAAA,2MAoEA7hC,KAAA8hC,aAAAn8B,UAAA,SAAAo8B,GAqGAA,GAvFAh+B,EAAsB29B,OACtB39B,EAAA49B,qCAAA59B,EAAA29B,KAAA,eAEU39B,EAAKi+B,qBAAfj+B,EAAAk+B,YACAl+B,EAAAm+B,cAKAn+B,EAAAo+B,+MAUA,MAAAp+B,GAAAH,QAAAwiB,IAAA,WACAriB,EAAAq+B,QAEAh6B,EAAA+rB,wBAnDA,MAuDA7vB,QAAOC,eAAPguB,EAAA5xB,UAAA,YACAqH,uDArHAvD,EAAA,QAAAA,EAAA,MAAA,2BAEAzE,KAAA6b,UAAApX,EACQzE,KAAKqiC,kBAAkBthC,SAG/BmH,YAAA,EACAC,cAAA,6GAMAnI,KAAAsiC,aAAAl8B,QAEA8B,YAAA,EACAC,cAAA,6KAMEA,cAAF,0JAoBAD,YAAA,kOAMAA,YAAA,0KASAA,YAAA,uNAMAA,YAAA,4FAeA,MAAAlI,MAAA+hC,QAAA,SAAA/hC,KAAAk+B,MAEAh2B,YAAA,EACAC,cAAA,+UAsDAnI,KAAA2hC,+CAAAY,aAEAviC,KAAAiwB,cAAA4E,SAAA70B,KAAA2hC,qCAAA3hC,KAAAwiC,YAGAxiC,KAAAsD,YAAAjD,cAAAy4B,QAEA94B,KAAO2hC,qCAAP,KACA3hC,KAAAwiC,WAAA,8HAMAxiC,KAAAiiC,WAAAQ,QAAAziC,KAAAgiC,6KAeAhiC,KAAAiiC,WAAAS,WAGAp+B,OAAAC,eAAAguB,EAAA5xB,UAAA,UACAqH,2GAQEG,cAAF,2JAqCA,YAdA,KAAAw6B,IAAAA,GAAA3iC,KAAA+hC,YAAA,KAAAa,IAAAA,EAAA,WAAS5iC,KAAT6iC,QAAAF,EAAAA,GAGQ3iC,KAARylB,gBAAAzlB,KAAA8iC,kBAAA,OAAA,eAEQ9iC,KAARwiC,WAAAI,IAGA5iC,KAAAylB,gBAAA,OAAUzlB,KAAVmiC,iBAEMniC,KAAKiiC,aACXjiC,KAAAiiC,WAAAQ,QAAAziC,KAAAgiC,qBAGA,GAAA7pB,SAAqB,SAArBC,GACArU,EAAA+9B,aAAAr8B,KAAA0J,EAAAA,KAAA,IAAAxJ,UAAA,SAAAuiB,GAAA,MAAA9P,GAAA8P,EAAA,OAAA,+JAWA,IAAAnL,EAAAtG,QAAA,SAAA,SAAAwG,GACA,SAAAF,GAAuC,IAAvCE,EAAAxG,QAAA,UAEQzW,KAAR8hC,aAAA/gC,KAA+Bf,KAA/B6iC,UAGAv+B,OAAAC,eAAAguB,EAAA5xB,UAAA,UACAqH,sGAGAE,YAAA,EACAC,cAAA,mBAAA3G,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCA5QAE,SAAA,4BACE0P,YAAFyvB,GAAAC,iBACE3+B,MACFC,MAAA,aACAwgC,eAAA,kBACAC,qBAAA,4BACMC,oBAAN,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI77B,SAAJ,MAEAtF,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAswB,EAAA3gB,eAAA,WAAA,QACApQ,KAAA4L,EAAAA,+EA9FA5L,KAAEqF,EAAAA,SAdFrF,SAA8CuH,GAA9CR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAuK,EAAAA,eAIAsmB,EAAA7vB,gBAgBA0X,WAAA5Y,KAAAsB,EAAAA,QA2LAo7B,OAAA18B,KAAAsB,EAAAA,qEA1FAwgC,gBAAA9hC,KAAQ0B,EAAAA,OAARxB,MAAA,YAaA6hC,cAAA/hC,KAAA0B,EAAAA,SASAsgC,gBAAAhiC,KAAA0B,EAAAA,OAAAxB,MAAA,YAeA+hC,cAAAjiC,KAAA0B,EAAAA,SAKAm/B,oBAAA7gC,KAAA0B,EAAAA,OAAAxB,MAAA,qBAMAqgC,SAAAvgC,KAAAsB,EAAAA,SAeAyvB,mFA0QAvyB,KAAAkwB,SAAAA,iBAAElwB,KAAF6D,mBAAAA,EAGsB7D,KAAtB0jC,cAAA,GAAAlnB,GAAAA,aA7BAxc,KAAAulB,WAAA,GAAAphB,GAAAA,QAgBAnE,KAAA2jC,gBAAA,GAAAx/B,GAAAA,2CAGAR,GAEAA,EAAA2B,OAAAG,KAAAC,EAAAA,UAAA1F,KAAmFulB,aAAnF5f,UAAA,4DAeA3F,KAAA4jC,UAAAC,EA5EA,MA8EAv/B,QAAAC,eAAAiuB,EAAA7xB,UAAA,SAGIqH,mEA9EJ1D,OAAAC,eAAAiuB,EAAA7xB,UAAA,wEAGA2D,OAAAC,eAAAiuB,EAAA7xB,UAAA,6IAYA2D,OAAAC,eAAAiuB,EAAA7xB,UAAA,uKAWAkqB,8FAKE1iB,cAAF,8CAkDA,GAAApE,GAAA/D,6FAAA+D,EAAAiuB,SAAAtrB,QAAA,SAAAo9B,GAAA//B,EAAAggC,mBAAAD,GACA//B,EAAkBigC,qBAAlBF,GACA//B,EAAAkgC,iBAAAH,OAGA//B,EAAAiuB,SAAA7mB,QACQpH,EAAKmgC,cAAbngC,EAAiCogC,SACzBpgC,EAAKmgC,cAAbngC,EAAAqgC,QACArgC,EAAAsgC,wBAGAtgC,EAAAF,mBAAAqB,iBAEAlF,KAAA2jC,gBAAAl+B,KAAA6+B,EAAAA,aAAA,IAGA5+B,EAAAA,UAAW1F,KAAXulB,aAA6B5f,UAA7B,WAAA,MAAA5B,GAAAsgC,2BAOA7R,EAAA7xB,UAAAwF,uBAEAnG,KAAA2jC,gBAAAt9B,+EAOE,kFAKA,iEAEFmsB,EAAA7xB,UAAA4jC,qBAEA,GAAAxgC,GAAA/D,uCAAAA,KAAA4D,QAMGwB,kBANH,WAAA,MAAArB,GAAA4/B,gBAAAv9B,yMAcA,iBAAAgC,EAAA2U,SAIAhZ,EAAcmsB,SAAd7vB,cAAAqE,UAAAE,IAAA,mDAGMb,EAANF,mBAAAqB,iBAEA,SAAA4+B,EAAA5F,MAEM4F,EAANhC,aAAAr8B,KAAAC,EAAAA,UAAA1F,KAAAgyB,SAAA9mB,UAAAvF,UAAA,WACA,MAAA5B,GAAAygC,mBAAAV,EAAA/B,sEAeA+B,EAAAzB,kBAAA58B,KAAAC,EAAAA,UAAA1F,KAAAgyB,SAAA9mB,UAAAvF,UAAA,WACA5B,EAAAH,QAAA6iB,iBAAAhD,eAAAhe,KAAA0J,EAAAA,KAAA,IAAAxJ,UAAA,6KAWAA,UAAA,qCACA5B,EAAAF,mBAAAqB,8HAWQlF,KAAKkwB,SAAb7vB,cAAAqE,UAAAC,OAAA,mDAQU,sGACoB,MAA9BZ,EAAsBqgC,gBAIZrgC,EAAMqgC,KAAhBN,IAGA,MAAA//B,EAAAogC,QACAM,GAAA,SACY1gC,EAAZogC,OAAAL,KAGA9jC,KAAA0kC,OAAA1kC,KAAA2kC,MAAA,KAEO3kC,KAAP2D,MAAA,OAAA3D,KAAA2D,KAAAc,OAOMzE,KAAK2kC,MAAQ3kC,KAAKokC,KAClBpkC,KAAK0kC,OAAS1kC,KAAKmkC,SAPzBnkC,KAAA2kC,MAAA3kC,KAAAmkC,OAEQnkC,KAAR0kC,OAAsB1kC,KAAtBokC,6BAaU,8KAKVpkC,KAAA0jC,cAAA3iC,iCAGAyxB,EAAA7xB,UAAAikC,6BAEA,GAAA7gC,GAAA/D,6BAAAsL,OAAA,SAAAw4B,GAAA,MAAAA,KAAAA,EAAAe,cAAA9gC,EAAA+gC,iBAAAhB,KAAAp9B,QAAA,SAAAo9B,GAAA,MAAA,GAAA1B,WAKA5P,EAAA7xB,UAAAokC,8BAEA,MAAA/kC,MAAAkkC,cAAAlkC,KAAAmkC,SAAoBnkC,KAApB8kC,iBAAA9kC,KAAAmkC,uGAKU,SAAVL,8EAIU,SAAVA,yJAgBA/qB,GAAA/Y,KAAQ2kC,MAARK,WAGa,IAAb,QAAAhlC,KAAsB2kC,MAAtBzG,KAAA,CACU,GAAVjlB,GAAAjZ,KAAA2kC,MAAAK,MACQjsB,IAAQE,EAChBoR,GAAApR,EAEA,GAAAjZ,KAAA0kC,QAAA1kC,KAAA0kC,OAAA3C,OACA,GAAA,QAAQ/hC,KAAK0kC,OAAbxG,KACA7T,GAAArqB,KAAA0kC,OAAAM,WAGa,IAAb,QAAAhlC,KAAA0kC,OAAAxG,KAAA,CACU,GAAVjlB,GAAuCjZ,KAAvC0kC,OAAAM,MACQ3a,IAASpR,EACjBF,GAAAE,EAGAjZ,KAAA4D,QAAAwiB,IAAA,WAAA,MAAAriB,GAAAs9B,gBAAAj7B,MAAA2S,KAAAA,EAAAsR,MAAAA,OAEAmI,EAAAjqB,qEAGgB3G,SAAhB,qwEAtTAU,MACAC,MAAA,uBACAuvB,iDAAA,qBAEE5vB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAuwB,EAAA5gB,eAAA,WAAA,QACApQ,KAAAqQ,EAAAA,eAAAtJ,aAAA/G,KAAAwH,EAAAA,aACAxH,KAAA4L,EAAAA,aACA5L,KAAAqF,EAAAA,0FAxXA2rB,EAAA9vB,gBAaAsvB,WAAAxwB,KAAAqM,EAAAA,gBAAAnM,MAAA6wB,MAMAtW,WAAAza,KAAA0wB,EAAAA,aAAAxwB,MAAA+wB,MAVAwS,WAAAzjC,KAAAsB,EAAAA,QAwbAoiC,cAAA1jC,KAAAsB,EAAAA,gGAtEA0vB,oBX9VE,QAAFL,GACM5D,EAC+CvF,GACrD,MAAIhlB,GAAJC,KAAAjE,KAAUuuB,EAAmBvF,IAA7BhpB,KAsEA,MA1EuCqE,GAAvC8tB,EAAAnuB,kBAZAxC,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,4BACVS,MACFC,MAAA,yCACMg/B,yBAAN,gBACIC,0BAAJ,kBAEAt/B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,2JA8EAkwB,OA/GAF,GAAA,SAAAjuB,gBAuEA,GAAAD,GAAA,OAAAC,GAAAA,EAAA8M,MAAA9Q,KAAA0U,YAAA1U,IAcA,+CATA+D,EAAAohC,gBAAA,EASAphC,EAZA,gMAEEoE,cAAF,yKASEA,cAAF,kLASEA,cAAF,wFA/CAtG,SAAA,4BACE0P,YAAFyvB,GAAAC,iBACE3+B,MACFC,MAAA,yBACAiF,SAAA,KACAu7B,eAAA,kBACMC,qBAAN,4BACIC,oBAAJ,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI+B,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEApjC,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAgwB,EAAAvvB,gBACA6iC,kBAAA/jC,KAAAsB,EAAAA,sEAGAmvB,GASAM,IASAR,GAAA,SAAA/tB,6EAoByC+tB,EAAzCxpB;ovEAbAjG,MACAC,MAAA,6CACAuvB,iDAAA,qBAEE5vB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA8vB,EAAArvB,gBACAsvB,WAAAxwB,KAAAqM,EAAAA,gBAAAnM,MAAAuwB,MACAhW,WAAAza,KAAA0wB,EAAAA,aAAAxwB,MAAAywB,cCtGAC,GAAA,yBAPA,sBAgBA5wB,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACAC,GACA8oB,EAAAA,qBACAC,EAAAA,gBAEF3oB,SACEJ,GACAgpB,GACAC,GACAC,GACAR,GACAF,GACAI,IAEFpoB,cACEwoB,GACAC,GACAC,GACAR,GACAF,GACAI,QAtCJC,KC2CIM,GAAe,EAENC,IACXzlB,QAAS0lB,EAAAA,kBACTzlB,YAAakP,EAAAA,WAAW,WAAM,MAAAwW,MAC9BC,OAAO,GAITC,GAAA,WACE,QAAFA,GAEWC,EAEAC,GAFAjzB,KAAXgzB,OAAWA,EAEAhzB,KAAXizB,QAAWA,EAzDX,MAAAF,MA8DAG,GAAA,WACE,QAAFA,GAAqB5vB,GAAAtD,KAArBsD,YAAqBA,EA/DrB,MAAA4vB,MAiEaC,GACXjsB,EAAc1D,EAAW2D,EAAmBC,EAAc8rB,KAAsB,0BA6EhF,QAAFL,GAAcnvB,EACQgH,EACAulB,EACApsB,EACe2D,EACf5D,GALpB,GAAFG,GAOIC,EAPJC,KAAAjE,KAOU0D,IAPV1D,WACsB+D,GAAtB2G,UAAsBA,EACA3G,EAAtBksB,cAAsBA,EACAlsB,EAAtBF,mBAAsBA,EAEAE,EAAtBH,QAAsBA,EA1DtBG,EAAAqvB,SAAqB,SAACC,KACtBtvB,EAAAuvB,UAAsB,aAEtBvvB,EAAAwvB,UAA8B,uBAAsBb,GAEpD3uB,EAAAyvB,WAA+B,EAC/BzvB,EAAA0vB,UAA8B,EAM9B1vB,EAAA0P,KAAiC,KAGjC1P,EAAAsoB,GAAwBtoB,EAAKwvB,UAG7BxvB,EAAA2vB,cAA+C,QAK/C3vB,EAAA4vB,UAAkD,KAGlD5vB,EAAA6vB,eAA4D,KAgB5D7vB,EAAAuB,OAAM,GAAIkX,GAAAA,aAmBNzY,EAAKyD,SAAWC,SAASD,IAAa,IAV1C,MAtDoCnD,GAApCwuB,EAAA7uB,GAiCAM,OAAAC,eAAMsuB,EAANlyB,UAAA,gBAAA,WAA4B,MAAOX,MAAKwzB,eACtC,SAAa/uB,GAASzE,KAAKwzB,UAAY3uB,EAAAA,sBAAsBJ,oCAI/DH,OAAAC,eAAMsuB,EAANlyB,UAAA,eAAA,WAA2B,MAAOX,MAAKyzB,cACrC,SAAYhvB,GACVzE,KAAKyzB,SAAW5uB,EAAAA,sBAAsBJ,GACtCzE,KAAK6D,mBAAmBqB,gDAO1BZ,OAAFC,eAAMsuB,EAANlyB,UAAA,eAAE,WAAwB,OAAUX,KAAKqsB,IAAMrsB,KAAKuzB,WAApD,0CAmBEV,EAAFlyB,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAK6zB,eAAiB,GAAIC,IAAoB9zB,KAAKsD,YAAatD,KAAK0K,WAErE1K,KAAKiwB,cACFE,QAAQnwB,KAAK+zB,cAAc1zB,eAC3BsF,UAAU,SAAAquB,GAAe,MAAAjwB,GAAKkwB,oBAAoBD,MAGvDnB,EAAFlyB,UAAAwF,YAAE,WACEnG,KAAKiwB,cAAcI,eAAerwB,KAAK+zB,cAAc1zB,gBAIvDwyB,EAAFlyB,UAAAuzB,eAAE,SAAe9rB,GASb,GALAA,EAAM+rB,kBAKFn0B,KAAK6zB,eAAeO,SAEtB,YADAp0B,KAAK+zB,cAAc1zB,cAAc4yB,QAAUjzB,KAAKizB,QAKlDjzB,MAAKizB,QAAUjzB,KAAK+zB,cAAc1zB,cAAc4yB,QAIhDjzB,KAAKq0B,oBAIPxB,EAAFlyB,UAAA2zB,cAAE,SAAclsB,GAQZA,EAAM+rB,mBAIRtB,EAAFlyB,UAAA4zB,WAAE,SAAW9vB,GACTzE,KAAKizB,UAAYxuB,GAInBouB,EAAFlyB,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAKozB,SAAWqB,GAIlB5B,EAAFlyB,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAKszB,UAAYmB,GAInB5B,EAAFlyB,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKoB,SAAWwzB,EAChB50B,KAAK6D,mBAAmBqB,gBAI1B2tB,EAAFlyB,UAAA2c,MAAE,WACEtd,KAAKiwB,cAAc4E,SAAS70B,KAAK+zB,cAAc1zB,cAAe,aAIhEwyB,EAAFlyB,UAAAm0B,OAAE,WACE90B,KAAKizB,SAAWjzB,KAAKizB,SAIfJ,EAAVlyB,UAAAszB,oBAAA,SAA8BD,GAErBh0B,KAAK+0B,cAAgC,aAAhBf,EAGdA,IACVh0B,KAAKszB,YAGDtzB,KAAK+0B,eACP/0B,KAAK+0B,aAAaC,UAClBh1B,KAAK+0B,aAAe,OAPtB/0B,KAAK+0B,aAAe/0B,KAAKi1B,QAAQC,OAAO,EAAG,GAAIC,YAAY,KAevDtC,EAAVlyB,UAAA0zB,4BACIr0B,KAAKozB,SAASpzB,KAAKizB,SACnBjzB,KAAKsF,OAAOvE,KAAK,GAAIgyB,IAAqB/yB,KAAMA,KAAKizB,WAGvDJ,EAAFlyB,UAAAy0B,aAAE,WACOp1B,KAAKoB,UACRpB,KAAK6zB,eAAewB,eAAer1B,KAAKizB,UAI5CJ,EAAFlyB,UAAA20B,QAAE,SAAQltB,GACFpI,KAAK6zB,eAAeO,UACtBp0B,KAAK6zB,eAAe0B,oBAAoBntB,EAAMotB,SAIlD3C,EAAFlyB,UAAA80B,WAAE,WAAA,GAAF1xB,GAAA/D,IACI,IAAIA,KAAK6zB,eAAeO,SAAU,CAChC,GAAMsB,GAAkB11B,KAAK6zB,eAAe8B,eAAiB,EAEzDD,KAAoB11B,KAAKizB,UAC3BjzB,KAAKizB,QAAUyC,EACf11B,KAAKq0B,oBAKPr0B,KAAK4D,QAAQwB,kBAAkB,WAC7BwwB,WAAW,WAAM,MAAA7xB,GAAK8vB,eAAegC,sBAM3ChD,EAAFlyB,UAAAm1B,mBAAE,WAIE91B,KAAK6D,mBAAmBqB,+BA9N5B1D,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iBACVU,MACFC,MAAA,mBACMwzB,OAAN,KACIC,sBAAJ,UACIC,uBAAJ,WACIC,wCAAJ,6BAEAr0B,SAAA,4iCACAC,QAAA,uoEACEmL,WAAF0lB,IACEtwB,QAAS,WAAX,gBAAA,QAAA,YACEN,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAlEAZ,KAAE20B,EAAAA,eAPF30B,KAAQsF,EAAAA,oBAFRtF,SAAQuH,GAARR,aAAA/G,KAAA2H,EAAAA,UAAAzH,MAAA,gBAOAF,KAAEqF,EAAAA,UAUFgsB,EAAAnwB,0DA6EAgxB,gBAAAlyB,KAAAsB,EAAAA,QAGA6wB,YAAAnyB,KAAAsB,EAAAA,MAAApB,MAAA,gBAGAkyB,iBAAApyB,KAAAsB,EAAAA,MAAApB,MAAA,qBAKA00B,WAAA50B,KAAAsB,EAAAA,QAGAmwB,UAAAzxB,KAAAsB,EAAAA,QAGAwC,SAAA9D,KAAA0B,EAAAA,SAKA6wB,gBAAGvyB,KAAHoB,EAAAA,UAAAlB,MAAA,WAOAuzB,UAAAzzB,KAAAoB,EAAAA,UAAAlB,MAAA20B,OAUAxD,qJAoLQ7yB,KAARs2B,YAA2B5yB,EAA3BrD,cAAAk2B,cAAA,0BA+CA,8DAvCAv2B,KAAAw2B,eAAAx2B,KAAAs2B,YAAAG,YAAAz2B,KAAA02B,SAAAD,YAAAz2B,KAAA02B,SAAAhyB,UAAAE,IAAA,gBAEI5E,KAAK22B,iBAAT1D,EACIjzB,KAAKo0B,UAAT,iEAQAp0B,KAAAo0B,UAAsC,EAAtCp0B,KAAA02B,SAAAhyB,UAAAC,OAAA,gBAGI3E,KAAK02B,SAASp2B,MAAlB2a,UAAA,sHAUI,IAAJ2b,GAAA52B,KAAA21B,eAAA,IAAA31B,KAAAw2B,qJAYA,OAJAx2B,MAAA22B,2BAIApe,KAAAqI,IAAA,EAAArI,KAAAE,IAAAoe,EAAA,OAGA/C,iCChXA,sBAeAtyB,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUI,GAAiBF,GAAiBG,EAAAA,iBAC5CC,SAAUkpB,GAAgBtpB,IAC1BQ,cAAe8oB,IACf5lB,YACGC,QAAS4pB,EAAAA,sBAAuBC,SAAUC,SApB/CC,KCoEaC,IACXhqB,QAAS0lB,EAAAA,kBACTzlB,YAAakP,EAAAA,WAAW,WAAM,MAAA8a,MAC9BrE,OAAO,GAITsE,GAAA,yBA3EA,MAAAA,MAsFAC,GAAA,WACE,QAAFA,GAAqB/zB,GAAAtD,KAArBsD,YAAqBA,EAvFrB,MAAA+zB,MAyFaC,GACXpwB,EAAc1D,EAAW4D,EAAciwB,IAAgB,0BAmVvD,QAAFF,GAAczzB,EACQusB,EACApsB,EACYF,EACG6D,GAJnC,GAAFzD,GAKIC,EALJC,KAAAjE,KAKU0D,IALV1D,WACsB+D,GAAtBksB,cAAsBA,EACAlsB,EAAtBF,mBAAsBA,EACYE,EAAlCJ,KAAkCA,EAjSlCI,EAAAwzB,SAAoB,EAYpBxzB,EAAAyzB,KAAyB,IAiBzBzzB,EAAA0zB,KAAyB,EAezB1zB,EAAA2zB,MAA0B,EAM1B3zB,EAAA4zB,aAAiC,EAiBjC5zB,EAAA6zB,cAA2C,EAoB3C7zB,EAAA8zB,OAAkC,KAelC9zB,EAAA+zB,WAAsB,EAGtB/zB,EAAAuB,OAA6D,GAAIkX,GAAAA,aAGjEzY,EAAAg0B,MAA4D,GAAIvb,GAAAA,aA6BhEzY,EAAAuvB,UAAyB,aAIzBvvB,EAAAi0B,SAA6B,EAM7Bj0B,EAAAk0B,YAAwB,EAMxBl0B,EAAAkE,WAAuB,EAqGvBlE,EAAAm0B,qBAAyC,EAGzCn0B,EAAAo0B,kBAAiD,KAEjDp0B,EAAAq0B,8BAAgE,aAMhEr0B,EAAAs0B,uBAAmC9c,EAAAA,aAAaC,MA4B5CzX,EAAKyD,SAAWC,SAASD,IAAa,IAtB1C,MAvR+BnD,GAA/B8yB,EAAAnzB,GAIAM,OAAAC,eAAM4yB,EAANx2B,UAAA,cAAA,WAA0B,MAAOX,MAAKu3B,aACpC,SAAW9yB,GACTzE,KAAKu3B,QAAU1yB,EAAAA,sBAAsBJ,oCAMzCH,OAAAC,eAAM4yB,EAANx2B,UAAA,WAAA,WAAsB,MAAOX,MAAKw3B,UAChC,SAAQ7W,GACN3gB,KAAKw3B,KAAOnZ,EAAAA,qBAAqBsC,EAAG3gB,KAAKw3B,MACzCx3B,KAAKg4B,SAAWh4B,KAAKs4B,qBAAqBt4B,KAAK63B,QAG/C73B,KAAK6D,mBAAmBqB,gDAM5BZ,OAAAC,eAAM4yB,EAANx2B,UAAA,WAAA,WAAsB,MAAOX,MAAKy3B,UAChC,SAAQ9W,GACN3gB,KAAKy3B,KAAOpZ,EAAAA,qBAAqBsC,EAAG3gB,KAAKy3B,MAGrB,OAAhBz3B,KAAK63B,SACP73B,KAAKyE,MAAQzE,KAAKy3B,MAEpBz3B,KAAKg4B,SAAWh4B,KAAKs4B,qBAAqBt4B,KAAK63B,QAG/C73B,KAAK6D,mBAAmBqB,gDAM5BZ,OAAAC,eAAM4yB,EAANx2B,UAAA,YAAA,WAAuB,MAAOX,MAAK03B,WACjC,SAAS/W,GACP3gB,KAAK03B,MAAQrZ,EAAAA,qBAAqBsC,EAAG3gB,KAAK03B,OAEtC13B,KAAK03B,MAAQ,GAAM,IACrB13B,KAAKu4B,cAAgBv4B,KAAK03B,MAAMc,WAAWC,MAAM,KAAKC,MAAOvtB,QAI/DnL,KAAK6D,mBAAmBqB,gDAM5BZ,OAAAC,eAAM4yB,EAANx2B,UAAA,kBAAA,WAA8B,MAAOX,MAAK23B,iBACxC,SAAelzB,GAAkBzE,KAAK23B,YAAc9yB,EAAAA,sBAAsBJ,oCAQ5EH,OAAAC,eAAM4yB,EAANx2B,UAAA,oBAAA,WAAuB,MAAOX,MAAK43B,mBACjC,SAAiBnzB,GAEbzE,KAAK43B,cADO,SAAVnzB,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxB4Z,EAAAA,qBAAqB5Z,EAAOzE,KAA4B,eAExD,mCAO3BsE,OAAAC,eAAM4yB,EAANx2B,UAAA,wBAKI,MAHoB,QAAhBX,KAAK63B,SACP73B,KAAKyE,MAAQzE,KAAKy3B,MAEbz3B,KAAK63B,YAEd,SAAUlX,GACJA,IAAM3gB,KAAK63B,SACb73B,KAAK63B,OAASxZ,EAAAA,qBAAqBsC,GACnC3gB,KAAKg4B,SAAWh4B,KAAKs4B,qBAAqBt4B,KAAK63B,QAG/C73B,KAAK6D,mBAAmBqB,iDAc9BZ,OAAAC,eAAM4yB,EAANx2B,UAAA,gBAAA,WAA4B,MAAOX,MAAK83B,eACtC,SAAarzB,GACXzE,KAAK83B,UAAYjzB,EAAAA,sBAAsBJ,oCAWzCH,OAAFC,eAAM4yB,EAANx2B,UAAA,oBAAE,WACE,MAAIX,MAAK24B,YACA34B,KAAK24B,YAAY34B,KAAKyE,OAM3BzE,KAAKu4B,eAAiBv4B,KAAKyE,OAASzE,KAAKyE,MAAQ,GAAM,EAClDzE,KAAKyE,MAAMm0B,QAAQ54B,KAAKu4B,eAG1Bv4B,KAAKyE,OAAS,mCAIvB0yB,EAAFx2B,UAAA2c,MAAE,WACEtd,KAAK64B,qBAIP1B,EAAFx2B,UAAAm4B,KAAE,WACE94B,KAAK+4B,oBAOPz0B,OAAFC,eAAM4yB,EAANx2B,UAAA,eAAE,WAAwB,MAAOX,MAAKg5B,OAAOh5B,KAAKg4B,2CAmBhD1zB,OAAFC,eAAM4yB,EAANx2B,UAAA,mBAAE,WAGE,MAAOX,MAAKi5B,UAAYj5B,KAAKk5B,OAASl5B,KAAKk5B,wCAK7C50B,OAAFC,eAAM4yB,EAANx2B,UAAA,mBAAE,WACE,MAAwB,KAAjBX,KAAKm5B,yCAOd70B,OAAFC,eAAM4yB,EAANx2B,UAAA,iBAAE,WACE,MAAIX,MAAKoB,SAvQc,EA0QnBpB,KAAKo5B,cAAgBp5B,KAAKq5B,WACrBr5B,KAAKiI,UArQiB,GAHG,EA0Q3B,mCAIT3D,OAAFC,eAAM4yB,EAANx2B,UAAA,8BAAE,WACE,GAAI24B,GAAOt5B,KAAKi5B,SAAW,IAAM,GAEjC,QACEhe,UAAa,YAAYqe,EAA/B,KAFet5B,KAAKu5B,mBAAqB,IAAM,IAEDv5B,KAAKw5B,UAAnD,YAAwEF,EAAxE,KAAgF,EAAIt5B,KAAKm5B,SAAzF,sCAKE70B,OAAFC,eAAM4yB,EAANx2B,UAAA,wBAAE,WACE,GAAI24B,GAAOt5B,KAAKi5B,SAAW,IAAM,GAEjC,QACEhe,UAAa,YAAYqe,EAA/B,KAFet5B,KAAKu5B,mBAAqB,GAAK,KAEAv5B,KAAKw5B,UAAnD,YAAwEF,EAAxE,IAAgFt5B,KAAKm5B,QAArF,sCAKE70B,OAAFC,eAAM4yB,EAANx2B,UAAA,6BAAE,WAME,OACEsa,UAAa,aANJjb,KAAKi5B,SAAW,IAAM,KAMrC,KAHgBj5B,KAAKi5B,UAA+B,OAAnBj5B,KAAK+rB,WAA2B,IAAL,IAC3C/rB,KAAKk4B,qBAAuB,EAAI,IAEjD,uCAKE5zB,OAAFC,eAAM4yB,EAANx2B,UAAA,oBAAE,WACE,GAAI84B,GAAuC,IAA5Bz5B,KAAKk4B,qBAChBwB,EAAiB15B,KAAKi5B,SAAW,OAAOQ,EAAhD,IAAiEA,EAAjE,QACQH,EAAOt5B,KAAKi5B,SAAW,IAAM,IAI7BU,EAAQ35B,KAAKi5B,UAA+B,OAAnBj5B,KAAK+rB,WAA4B,GAAN,IACpD6N,EAAU55B,KAAKi5B,UAA+B,OAAnBj5B,KAAK+rB,WAA0C,GAApB,kBACtDjqB,GACF43B,eAAkBA,EAElBze,UAAa,0BAA0Bqe,EAA7C,IAAqDK,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAI55B,KAAKo5B,aAAep5B,KAAKw5B,UAAW,CAItC13B,EAAO,WAHI9B,KAAKi5B,SACXj5B,KAAK65B,YAAc,SAAW,MAC9B75B,KAAK65B,YAAc,QAAU,SACJ75B,KAAKw5B,UAAzC,KAGI,MAAO13B,oCAGTwC,OAAFC,eAAM4yB,EAANx2B,UAAA,6BAAE,WAOE,OACEsa,UAAa,aAPJjb,KAAKi5B,SAAW,IAAM,KAOrC,KAFoE,MADxC,OAAnBj5B,KAAK+rB,YAAwB/rB,KAAKi5B,SAAgCj5B,KAAK65B,aAAxB75B,KAAK65B,aAC5B75B,KAAKm5B,QAAU,EAAIn5B,KAAKm5B,SAEzD,uCA4BA70B,OAAAC,eAAc4yB,EAAdx2B,UAAA,qCACI,MAA2B,OAAnBX,KAAK+rB,YAAwB/rB,KAAKi5B,SAAgCj5B,KAAK65B,aAAxB75B,KAAK65B,6CAIhEv1B,OAAAC,eAAc4yB,EAAdx2B,UAAA,6BACI,MAAQX,MAAK2D,MAA2B,OAAnB3D,KAAK2D,KAAKc,MAAkB,MAAQ,uCAa3D0yB,EAAFx2B,UAAA8Z,SAAE,WAAA,GAAF1W,GAAA/D,IACIA,MAAKiwB,cACAE,QAAQnwB,KAAKsD,YAAYjD,eAAe,GACxCsF,UAAU,SAAC0U,GACVtW,EAAKkE,YAAcoS,GAAqB,aAAXA,EAC7BtW,EAAKF,mBAAmB0iB,kBAE1BvmB,KAAK2D,OACP3D,KAAKq4B,uBAAyBr4B,KAAK2D,KAAK2B,OAAOK,UAAU,WACvD5B,EAAKF,mBAAmBqB,mBAK9BiyB,EAAFx2B,UAAAwF,YAAE,WACEnG,KAAKiwB,cAAcI,eAAerwB,KAAKsD,YAAYjD,eACnDL,KAAKq4B,uBAAuBlhB,eAG9BggB,EAAFx2B,UAAAm5B,cAAE,WACM95B,KAAKoB,WAMTpB,KAAKm4B,kBAAoBn4B,KAAK+5B,uBAC9B/5B,KAAKg6B,+BAGP7C,EAAFx2B,UAAAs5B,SAAE,SAAS7xB,GACP,IAAIpI,KAAKoB,SAAT,CAIA,GAAI84B,GAAWl6B,KAAKyE,KACpBzE,MAAKi4B,YAAa,EAClBj4B,KAAK64B,oBACL74B,KAAKm6B,0BAA0BC,EAAGhyB,EAAMiyB,QAASC,EAAGlyB,EAAMmyB,UAGtDL,GAAYl6B,KAAKyE,QACnBzE,KAAKw6B,kBACLx6B,KAAKq0B,sBAIT8C,EAAFx2B,UAAA85B,SAAE,SAASryB,GACP,IAAIpI,KAAKoB,SAAT,CAMKpB,KAAKi4B,YACRj4B,KAAK06B,cAAc,MAIrBtyB,EAAMC,gBAEN,IAAI6xB,GAAWl6B,KAAKyE,KACpBzE,MAAKm6B,0BAA0BC,EAAGhyB,EAAMuyB,OAAOP,EAAGE,EAAGlyB,EAAMuyB,OAAOL,IAG9DJ,GAAYl6B,KAAKyE,OACnBzE,KAAKw6B,oBAITrD,EAAFx2B,UAAA+5B,cAAE,SAActyB,GACRpI,KAAKoB,UAAYpB,KAAKi4B,aAK1Bj4B,KAAK85B,gBAEL95B,KAAKi4B,YAAa,EAClBj4B,KAAK64B,oBACL74B,KAAK46B,mBAAqB56B,KAAKyE,MAE3B2D,IACFpI,KAAKm6B,0BAA0BC,EAAGhyB,EAAMuyB,OAAOP,EAAGE,EAAGlyB,EAAMuyB,OAAOL,IAClElyB,EAAMC,oBAIV8uB,EAAFx2B,UAAAk6B,YAAE,WACE76B,KAAKi4B,YAAa,EAEdj4B,KAAK46B,oBAAsB56B,KAAKyE,OAAUzE,KAAKoB,UACjDpB,KAAKq0B,mBAEPr0B,KAAK46B,mBAAqB,MAG5BzD,EAAFx2B,UAAAm6B,SAAE,WAGE96B,KAAKm4B,kBAAoBn4B,KAAK+5B,uBAC9B/5B,KAAKg6B,8BAGP7C,EAAFx2B,UAAAo6B,QAAE,WACE/6B,KAAKszB,aAGP6D,EAAFx2B,UAAAq6B,WAAE,SAAW5yB,GACT,IAAIpI,KAAKoB,SAAT,CAEA,GAAI84B,GAAWl6B,KAAKyE,KAEpB,QAAQ2D,EAAM2W,SACZ,IAAKkc,GAAAA,QACHj7B,KAAKk7B,WAAW,GAChB,MACF,KAAKC,GAAAA,UACHn7B,KAAKk7B,YAAY,GACjB,MACF,KAAK5b,GAAAA,IACHtf,KAAKyE,MAAQzE,KAAK4gB,GAClB,MACF,KAAKxB,GAAAA,KACHpf,KAAKyE,MAAQzE,KAAKyY,GAClB,MACF,KAAKyG,GAAAA,WAQHlf,KAAKk7B,WAA8B,OAAnBl7B,KAAK+rB,WAAsB,GAAK,EAChD,MACF,KAAKqP,GAAAA,SACHp7B,KAAKk7B,WAAW,EAChB,MACF,KAAKlc,GAAAA,YAEHhf,KAAKk7B,WAA8B,OAAnBl7B,KAAK+rB,YAAuB,EAAI,EAChD,MACF,KAAKsP,GAAAA,WACHr7B,KAAKk7B,YAAY,EACjB,MACF,SAGE,OAGAhB,GAAYl6B,KAAKyE,QACnBzE,KAAKw6B,kBACLx6B,KAAKq0B,oBAGPr0B,KAAKi4B,YAAa,EAClB7vB,EAAMC,mBAGR8uB,EAAFx2B,UAAA26B,SAAE,WACEt7B,KAAKi4B,YAAa,GAIZd,EAAVx2B,UAAAu6B,WAAA,SAAqBK,GACjBv7B,KAAKyE,MAAQzE,KAAKg5B,QAAQh5B,KAAKyE,OAAS,GAAKzE,KAAKw7B,KAAOD,EAAUv7B,KAAKyY,IAAKzY,KAAK4gB,MAI5EuW,EAAVx2B,UAAAw5B,yBAAA,SAAmCsB,GAC/B,GAAKz7B,KAAKm4B,kBAAV,CAIA,GAAI7X,GAAStgB,KAAKi5B,SAAWj5B,KAAKm4B,kBAAkB5N,IAAMvqB,KAAKm4B,kBAAkBpf,KAC7E2iB,EAAO17B,KAAKi5B,SAAWj5B,KAAKm4B,kBAAkB53B,OAASP,KAAKm4B,kBAAkBlf,MAC9E0iB,EAAe37B,KAAKi5B,SAAWwC,EAAInB,EAAImB,EAAIrB,EAG3CjB,EAAUn5B,KAAKg5B,QAAQ2C,EAAerb,GAAUob,EAUpD,IARI17B,KAAKu5B,qBACPJ,EAAU,EAAIA,GAOA,IAAZA,EACFn5B,KAAKyE,MAAQzE,KAAKyY,QACb,IAAgB,IAAZ0gB,EACTn5B,KAAKyE,MAAQzE,KAAK4gB,QACb,CACL,GAAIgb,GAAa57B,KAAK67B,gBAAgB1C,GAIlC2C,EAAevjB,KAAKwjB,OAAOH,EAAa57B,KAAKyY,KAAOzY,KAAKw7B,MAAQx7B,KAAKw7B,KAAOx7B,KAAKyY,GAGtFzY,MAAKyE,MAAQzE,KAAKg5B,OAAO8C,EAAc97B,KAAKyY,IAAKzY,KAAK4gB,QAKlDuW,EAAVx2B,UAAA0zB,4BACIr0B,KAAKo4B,8BAA8Bp4B,KAAKyE,OACxCzE,KAAKsF,OAAOvE,KAAKf,KAAKsiB,uBAIhB6U,EAAVx2B,UAAA65B,2BACIx6B,KAAK+3B,MAAMh3B,KAAKf,KAAKsiB,uBAIf6U,EAAVx2B,UAAAq5B,sCACI,GAAKh6B,KAAKg8B,cAAiBh8B,KAAKm4B,kBAIhC,GAAyB,QAArBn4B,KAAKg8B,aAAwB,CAC/B,GAAIC,GAAYj8B,KAAKi5B,SAAWj5B,KAAKm4B,kBAAkB53B,OAASP,KAAKm4B,kBAAkBlf,MACnFijB,EAAgBD,EAAYj8B,KAAKw7B,MAAQx7B,KAAK4gB,IAAM5gB,KAAKyY,KACzD0jB,EAAe5jB,KAAKC,KArmBG,GAqmB6B0jB,GACpDE,EAAgBD,EAAen8B,KAAKw7B,IACxCx7B,MAAKk4B,qBAAuBkE,EAAgBH,MAE5Cj8B,MAAKk4B,qBAAuBl4B,KAAKg8B,aAAeh8B,KAAKw7B,MAAQx7B,KAAK4gB,IAAM5gB,KAAKyY,MAKzE0e,EAAVx2B,UAAA2hB,mBAAA,SAA6B7d,OAA7B,KAAAA,IAA6BA,EAAQzE,KAAKyE,MACtC,IAAI2D,GAAQ,GAAIgvB,GAKhB,OAHAhvB,GAAM4qB,OAAShzB,KACfoI,EAAM3D,MAAQA,EAEP2D,GAID+uB,EAAVx2B,UAAA23B,qBAAA,SAA+B7zB,GAC3B,QAASA,GAAS,GAAKzE,KAAKyY,MAAQzY,KAAK4gB,IAAM5gB,KAAKyY,MAI9C0e,EAAVx2B,UAAAk7B,gBAAA,SAA0BhF,GACtB,MAAO72B,MAAKyY,IAAMoe,GAAc72B,KAAK4gB,IAAM5gB,KAAKyY,MAI1C0e,EAAVx2B,UAAAq4B,OAAA,SAAiBv0B,EAAegU,EAASmI,GACrC,WADJ,KAAAnI,IAAgCA,EAAhC,OAAA,KAAAmI,IAAyCA,EAAzC,GACWrI,KAAKqI,IAAInI,EAAKF,KAAKE,IAAIhU,EAAOmc,KAQ/BuW,EAAVx2B,UAAAo5B,gCACI,MAAO/5B,MAAKq8B,eAAiBr8B,KAAKq8B,eAAeh8B,cAAci8B,wBAA0B,MAOnFnF,EAAVx2B,UAAAk4B,6BACI74B,KAAKsD,YAAYjD,cAAcid,SAIzB6Z,EAAVx2B,UAAAo4B,4BACI/4B,KAAKsD,YAAYjD,cAAcy4B,QAOjC3B,EAAFx2B,UAAA4zB,WAAE,SAAW9vB,GACTzE,KAAKyE,MAAQA,GAQf0yB,EAAFx2B,UAAA6zB,iBAAE,SAAiBC,GACfz0B,KAAKo4B,8BAAgC3D,GAQvC0C,EAAFx2B,UAAA+zB,kBAAE,SAAkBD,GAChBz0B,KAAKszB,UAAYmB,GAQnB0C,EAAFx2B,UAAAg0B,iBAAE,SAAiBC,GACf50B,KAAKoB,SAAWwzB,kBAjpBpBpzB,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACVqL,WAAFiqB,IACE50B,MACFi6B,UAAA,aACMC,SAAN,YACI3zB,UAAW,mBACX4zB,YAAJ,qBACIC,UAAW,aACXjN,eAAJ,kBACIkN,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACIt6B,MAAJ,aACIqK,KAAJ,SACIkwB,aAAJ,WACIr0B,uBAAJ,WACIs0B,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,uDAEA97B,SAAA,ipBACAC,QAAA,u5NACEO,QAAF,WAAA,QAAA,YACEN,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAA2CC,yFAzG3CZ,KAAEsF,EAAAA,oBAlBFtF,KAAQqQ,EAAAA,eAARtJ,aAAA/G,KAAAwH,EAAAA,aAgBAxH,SAAEuH,GAAFR,aAAA/G,KAAA2H,EAAAA,UAAAzH,MAAA,iBAyZAy1B,EAAAz0B,6DAvSA+V,MAAAjX,KAAAsB,EAAAA,QAQA04B,OAAAh6B,KAAAsB,EAAAA,QAYAu2B,aAAA73B,KAAAsB,EAAAA,QAiBAk5B,eAAAx6B,KAAAsB,EAAAA,QAeA2B,QAAAjD,KAAAsB,EAAAA,QASA61B,cAAAn3B,KAAAsB,EAAAA,QAcAm2B,WAAAz3B,KAAAsB,EAAAA,QAwBAwC,SAAA9D,KAAA0B,EAAAA,SAGA60B,QAAAv2B,KAAA0B,EAAAA,SAQAm5B,iBAAA76B,KAAAoB,EAAAA,UAAAlB,MAAA,oBAsKAy1B,mCC9ZA,sBAeA31B,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUC,EAAAA,aAAcC,IACxBI,SAAUwtB,GAAW5tB,IACrBQ,cAAeotB,IACflqB,YAAaC,QAAS4pB,EAAAA,sBAAuBC,SAAUC,SAnBzD4G,KtBsBA7a,GAAA,WA4BE,QAAFA,GAAcY,EACQV,GADpB,GAAFlf,GAAA/D,IACsBA,MAAtBijB,YAAsBA,EAlBtBjjB,KAAAqjB,gBAAqC,GAAIlf,GAAAA,QAGzCnE,KAAA8iB,aAAkC,GAAI3e,GAAAA,QAGtCnE,KAAAmjB,UAA+B,GAAIhf,GAAAA,QASnCnE,KAAAujB,oBAA+B,EAI3BvjB,KAAK2jB,kBAAoBA,EAEzB3jB,KAAK6jB,WAAWle,UAAU,WAAM,MAAA5B,GAAKukB,YACrC3E,EAAkB6B,QAAQ7f,UAAU,WAAM,MAAA5B,GAAKif,mBAvDnD,MA2DED,GAAFpiB,UAAA2nB,QAAE,WACOtoB,KAAKqjB,gBAAgBD,QACxBpjB,KAAK2jB,kBAAkB6C,OAEzBqX,aAAa79B,KAAK89B,qBAIpB/a,EAAFpiB,UAAAykB,kBAAE,WACOplB,KAAKmjB,UAAUC,SAClBpjB,KAAKujB,oBAAqB,EAC1BvjB,KAAKmjB,UAAU/c,OACfpG,KAAKmjB,UAAU9c,aAUnB0c,EAAFpiB,UAAAo9B,gBAAE,WACE/9B,KAAKolB,qBAIPrC,EAAFpiB,UAAAipB,cAAE,SAAc1F,GAAd,GAAFngB,GAAA/D,IACIA,MAAK89B,mBAAqBlI,WAAW,WAAM,MAAA7xB,GAAKukB,WAAWpE,IAI7DnB,EAAFpiB,UAAAq9B,MAAE,WACOh+B,KAAK8iB,aAAaM,SACrBpjB,KAAK8iB,aAAa1c;oDAClBpG,KAAK8iB,aAAazc,aAKd0c,EAAVpiB,UAAAqiB,0BACIhjB,KAAKijB,YAAYC,UAEZljB,KAAKmjB,UAAUC,QAClBpjB,KAAKmjB,UAAU9c,WAGjBrG,KAAKqjB,gBAAgBjd,MAAMkd,kBAAmBtjB,KAAKujB,qBACnDvjB,KAAKqjB,gBAAgBhd,WACrBrG,KAAKujB,oBAAqB,GAI5BR,EAAFpiB,UAAA6iB,eAAE,WACE,MAAOxjB,MAAKqjB,gBAAgBI,gBAI9BV,EAAFpiB,UAAA+iB,YAAE,WACE,MAAO1jB,MAAK2jB,kBAAkBC,UAIhCb,EAAFpiB,UAAAkjB,SAAE,WACE,MAAO7jB,MAAKmjB,UAAUM,gBA3H1BV,KCaae,GAAqB,GAAInL,GAAAA,eAAoB,mBAW1DoL,GAAA,wBAEA/jB,KAAAgkB,WAAoC,YAGpChkB,KAAAikB,oBAAiC,GAMjCjkB,KAAAkkB,SAAsB,EAStBlkB,KAAAwN,KAAoB,KAGpBxN,KAAAmkB,mBAAuD,SAGvDnkB,KAAAokB,iBAAmD,SAlDnD,MAAAL,MCkBaM,IAKXC,YAAavJ,EAAAA,QAAQ,eACnBG,EAAAA,WAAW,UACT5a,EAAAA,OAAOikB,QAAS,MAChBpJ,EAAAA,QAAWqJ,GAAmBC,QAApC,IAA+CC,GAAgBC,oBAK7DC,cAAe7J,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,8BAA+B1a,EAAAA,OAAO2a,UAAW,oBACvDC,EAAAA,WAAW,6DACTC,EAAAA,QAAWqJ,GAAmBK,QADpC,IAC+CH,GAAgBI,qBAC3D5J,EAAAA,WAAW,8CACTC,EAAAA,QAAWqJ,GAAmBO,SADpC,IACgDL,GAAgBM,sCCD9D,QAAFC,GACWC,EACqB1X,GADrBxN,KAAXklB,YAAWA,EAEPllB,KAAKwN,KAAOA,EADhB,MAKEyX,GAAFtkB,UAAAwkB,OAAE,WACEnlB,KAAKklB,YAAYE,qBAInB9gB,OAAFC,eAAM0gB,EAANtkB,UAAA,iBAAE,WACE,QAASX,KAAKwN,KAAK2X,uDA9BvB3jB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEE,SAAU,iJACVC,QAAF,+VACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEmP,YAAa8S,GAAfC,aACEhiB,MACF+iB,iBAAA,GACM9iB,MAAN,+HAWA0iB,oBCkCE,QAAFK,GACY1hB,EACAN,EACAO,GAHV,GAAFE,GAIIC,EAJJC,KAAAjE,OAAAA,WACY+D,GAAZH,QAAYA,EACAG,EAAZT,YAAYA,EACAS,EAAZF,mBAAYA,EApBZE,EAAAwhB,YAAuB,EAMvBxhB,EAAAyhB,QAAmC,GAAIrhB,GAAAA,QAGvCJ,EAAA6f,SAAoC,GAAIzf,GAAAA,QAGxCJ,EAAA0hB,gBAAoB,SATpB,MAL0CphB,GAA1CihB,EAAAthB,GA2BEshB,EAAF3kB,UAAA+kB,sBAAE,SAAyBC,GAGvB,MAFA3lB,MAAK4lB,qBACL5lB,KAAK6lB,wBACE7lB,KAAK8lB,cAAcJ,sBAAsBC,IAIlDL,EAAF3kB,UAAAolB,qBAAE,SAAwBJ,GAGtB,MAFA3lB,MAAK4lB,qBACL5lB,KAAK6lB,wBACE7lB,KAAK8lB,cAAcC,qBAAqBJ,IAIjDL,EAAF3kB,UAAAqlB,eAAE,SAAe5d,GACN,GAAA6U,GAAX7U,EAAA6U,UAAsBF,EAAtB3U,EAAA2U,OAMI,KAJiB,SAAZA,GAAoC,SAAdE,GAAyBF,EAAQkJ,WAAW,YACrEjmB,KAAKkmB,gBAGHnJ,EAAQkJ,WAAW,WAAY,CAGjC,GAAME,GAAUnmB,KAAK4jB,QAErB5jB,MAAK4D,QAAQwiB,IAAI,WACfD,EAAQ/f,OACR+f,EAAQ9f,eAMdif,EAAF3kB,UAAA0lB,MAAE,WACOrmB,KAAKulB,aACRvlB,KAAKylB,gBAAkB,WAAWzlB,KAAKsmB,eAAelC,iBACtDpkB,KAAK6D,mBAAmB0iB,kBAK5BjB,EAAF3kB,UAAA6lB,KAAE,WAEE,MADAxmB,MAAKylB,gBAAkB,UAAUzlB,KAAKsmB,eAAelC,iBAC9CpkB,KAAKwlB,SAIdF,EAAF3kB,UAAAwF,YAAE,WACEnG,KAAKulB,YAAa,EAClBvlB,KAAKkmB,iBAOCZ,EAAV3kB,UAAAulB,mCACIlmB,MAAK4D,QAAQ6iB,iBAAiBhD,eAAehe,KAAK0J,EAAAA,KAAK,IAAIxJ,UAAU,WACnE5B,EAAKyhB,QAAQpf,OACbrC,EAAKyhB,QAAQnf,cAKTif,EAAV3kB,UAAAklB,iCACI,GAAM7gB,GAAuBhF,KAAKsD,YAAYjD,cACxCqmB,EAAe1mB,KAAKsmB,eAAeK,UAErCD,KACEE,MAAMC,QAAQH,GAEhBA,EAAahgB,QAAQ,SAAAogB,GAAY,MAAA9hB,GAAQN,UAAUE,IAAIkiB,KAEvD9hB,EAAQN,UAAUE,IAAI8hB,IAIqB,WAA3C1mB,KAAKsmB,eAAenC,oBACtBnf,EAAQN,UAAUE,IAAI,wBAGqB,QAAzC5E,KAAKsmB,eAAelC,kBACtBpf,EAAQN,UAAUE,IAAI,sBAKlB0gB,EAAV3kB,UAAAilB,8BACI,GAAI5lB,KAAK8lB,cAAc/J,cACrB,KAAMgL,OAAM,4FApIlBvlB,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEE,SAAU,8CACVC,QAAF,opBACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEsP,YAAF8S,GAAAO,eACEtiB,MACFsK,KAAc,QACRrK,MAAN,0BACIykB,WAAJ,kBACIC,gBAAJ,sGAzBAzlB,KAAEsF,EAAAA,qBALFwe,EAAA5iB,6EAwCA4iB,uBC1Ba4B,GACT,GAAIvO,GAAAA,eAAkC,iCACpCC,WAAY,OACZC,QAAS,WAAM,MAAA,IAAIkL,qBA6BvB,QAAFoD,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvCznB,KAAdonB,SAAcA,EACApnB,KAAdqnB,MAAcA,EACArnB,KAAdsnB,UAAcA,EACAtnB,KAAdunB,oBAAcA,EACwBvnB,KAAtCwnB,gBAAsCA,EACexnB,KAArDynB,eAAqDA,EAtBrDznB,KAAA0nB,wBAAgE,KA/ChE,MAkDEpjB,QAAFC,eAAM4iB,EAANxmB,UAAA,0BAAE,WACE,GAAMgnB,GAAS3nB,KAAKwnB,eACpB,OAAOG,GAASA,EAAOC,mBAAqB5nB,KAAK0nB,6BAGnD,SAAuBjjB,GACjBzE,KAAKwnB,gBACPxnB,KAAKwnB,gBAAgBI,mBAAqBnjB,EAE1CzE,KAAK0nB,wBAA0BjjB,mCAmBnC0iB,EAAFxmB,UAAAknB,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAO/nB,MAAKgoB,QAAQF,EAAWC,IAUjCZ,EAAFxmB,UAAAsnB,iBAAE,SAAiBpmB,EAA4BkmB,GAE3C,MAAO/nB,MAAKgoB,QAAQnmB,EAAUkmB,IAShCZ,EAAFxmB,UAAAunB,KAAE,SAAKC,EAAiBhD,EAAqB4C,OAA7C,KAAA5C,IAAwBA,EAAxB,GAEI,IAAMiD,GAAVC,MAAwBroB,KAAKynB,eAAmBM,EAO5C,OAHAK,GAAQ5a,MAAQ2a,QAApBA,EAA6BhD,OAA7BA,GACIiD,EAAQnE,oBAAsBkE,EAEvBnoB,KAAK6nB,kBAAkB5C,GAAgBmD,IAMhDjB,EAAFxmB,UAAA2nB,QAAE,WACMtoB,KAAK4nB,oBACP5nB,KAAK4nB,mBAAmBU,WAOpBnB,EAAVxmB,UAAA4nB,yBAAA,SAAmCC,EACAT,GAC/B,GAAMU,GAAkB,GAAIC,GAAAA,gBAAgBpD,GAAsByC,EAAOrO,kBACnEiP,EAAmDH,EAAWxM,OAAOyM,EAE3E,OADAE,GAAaC,SAAStC,eAAiByB,EAChCY,EAAaC,UAMdzB,EAAVxmB,UAAAqnB,QAAA,SAAqBa,EAA4CC,GAG7D,GAAMf,GAAVM,MAAuBroB,KAAKynB,eAAmBqB,GACrCN,EAAaxoB,KAAK+oB,eAAehB,GACjCiB,EAAYhpB,KAAKuoB,yBAAyBC,EAAYT,GACtD7C,EAAc,GAAInC,IAAyCiG,EAAWR,EAE5E,IAAIK,YAAmBlP,GAAAA,YAAa,CAClC,GAAMgM,GAAS,GAAIjL,GAAAA,eAAemO,EAAO,MACvCI,UAAWlB,EAAOva,KAClB0X,YAARA,GAGMA,GAAY0D,SAAWI,EAAUjD,qBAAqBJ,OACjD,CACL,GAAMuD,GAAWlpB,KAAKmpB,gBAAgBpB,EAAQ7C,GACxCS,EAAS,GAAI+C,GAAAA,gBAAgBG,MAAS9f,GAAWmgB,GACjDE,EAAaJ,EAAUtD,sBAAyBC,EAGtDT,GAAY0D,SAAWQ,EAAWR,SAkBpC,MAZA5oB,MAAKunB,oBAAoB8B,QAAQC,EAAAA,YAAYC,SAAS9jB,KACpDC,EAAAA,UAAU8iB,EAAWgB,cAAc/jB,KAAK0J,EAAAA,KAAK,MAC7CxJ,UAAU,SAAAqV,GACNA,EAAMyO,QACRjB,EAAWkB,eAAehlB,UAAUE,IAAI,yBAExC4jB,EAAWkB,eAAehlB,UAAUC,OAAO,2BAI/C3E,KAAK2pB,iBAAiBzE,EAAa6C,GACnC/nB,KAAK4nB,mBAAqB1C,EACnBllB,KAAK4nB,oBAINT,EAAVxmB,UAAAgpB,iBAAA,SAA2BzE,EAAkC6C,aAEzD7C,GAAY1B,iBAAiB7d,UAAU,WAEjC5B,EAAK6jB,oBAAsB1C,IAC7BnhB,EAAK6jB,mBAAqB,QAI1B5nB,KAAK4nB,oBAGP5nB,KAAK4nB,mBAAmBpE,iBAAiB7d,UAAU,WACjDuf,EAAYvB,kBAAkB0C,UAEhCrmB,KAAK4nB,mBAAmBU,WAGxBpD,EAAYvB,kBAAkB0C,QAI5B0B,EAAO7D,UAAY6D,EAAO7D,SAAW,GACvCgB,EAAYxB,cAAc/d,UAAU,WAAM,MAAAuf,GAAY0E,cAAc7B,EAAe,YAGjFA,EAAO9D,qBACTjkB,KAAKqnB,MAAMwC,SAAS9B,EAAO9D,oBAAqB8D,EAAO/D,aAQnDmD,EAAVxmB,UAAAooB,eAAA,SAAyBhB,GACrB,GAAM+B,GAAgB,GAAIC,GAAAA,aAC1BD,GAAcpU,UAAYqS,EAAOrS,SAEjC,IAAIsU,GAAmBhqB,KAAKonB,SAAShN,WAAW6P,SAE1CC,EAA6B,QAArBnC,EAAOrS,UACfyU,EAC0B,SAA9BpC,EAAO5D,oBACwB,UAA9B4D,EAAO5D,qBAAmC+F,GACZ,QAA9BnC,EAAO5D,oBAAgC+F,EACpCE,GAAWD,GAAwC,WAA9BpC,EAAO5D,kBAgBlC,OAfIgG,GACFH,EAAiBjR,KAAK,KACbqR,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BvC,EAAO3D,iBACT4F,EAAiBO,IAAI,KAErBP,EAAiBQ,OAAO,KAG1BV,EAAcE,iBAAmBA,EAC1BhqB,KAAKonB,SAASqD,OAAOX,IAQtB3C,EAAVxmB,UAAAwoB,gBACA,SAAMpB,EACA7C,GAEF,GAAMwF,GAAe3C,GAAUA,EAAOrO,kBAAoBqO,EAAOrO,iBAAiBwP,SAC5EyB,EAAkB,GAAIC,QAK5B,OAHAD,GAAgBE,IAAI9H,GAAgBmC,GACpCyF,EAAgBE,IAAI/G,GAAoBiE,EAAOva,MAExC,GAAIsd,GAAAA,eAAeJ,GAAgB1qB,KAAKsnB,UAAWqD,mBA3N9DnpB,KAACupB,EAAAA,iDA9BDvpB,KAAQwpB,EAAAA,UAFRxpB,KAAQypB,EAAAA,gBAURzpB,KAAE0pB,EAAAA,WATF1pB,KAAQ2pB,EAAAA,qBAgCR3pB,KAAa2lB,EAAb5e,aAAA/G,KA2BOwH,EAAAA,WA3BPxH,KA2BmB4pB,EAAAA,aA3CnB5pB,KAA4BuiB,GAA5Bxb,aAAA/G,KA4COyH,EAAAA,OA5CPvH,MA4CcwlB,SArEdC,iCCAA,sBAmBA3lB,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEgiB,EAAAA,cACA7hB,EAAAA,aACAF,EAAAA,aACA8I,GACA7I,IAEFI,SAAU2b,GAAsB/b,IAChCQ,cAAeub,GAAsBL,IACrCqG,iBAAkBhG,GAAsBL,IACxChY,WAAYka,QA9BdoE,KCmDAC,GAAA,yBAnDA,MAAAA,MAoDaC,GAAoBC,EAAiBtkB,EAAcokB,qFAWhEznB,GAAA4nB,UAAc,GAAIC,KAGlB7nB,EAAA8nB,cAA2B,GAAI1nB,GAAAA,QAS/BJ,EAAA+nB,MAAiD,MAWjD/nB,EAAAgoB,WAAsC,GAYtChoB,EAAA+S,WAAqE,GAAI0F,GAAAA,eAlGzE,MA4D6BnY,GAA7B2nB,EAAAhoB,GAmBAM,OAAAC,eAAMynB,EAANrrB,UAAA,iBAAA,WAAmC,MAAOX,MAAK+rB,gBAC7C,SAAcrW,GACZ,GAAI5K,EAAAA,aAAe4K,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAMuW,IAA6BvW,EAErC1V,MAAK+rB,WAAarW,mCAStBpR,OAAAC,eAAMynB,EAANrrB,UAAA,oBAAA,WAAgC,MAAOX,MAAKksB,mBAC1C,SAAiBvL,GAAc3gB,KAAKksB,cAAgBrnB,EAAAA,sBAAsB8b,oCAU1EqL,EAAFrrB,UAAAwrB,SAAE,SAASC,GACP,IAAKA,EAASC,GACZ,KAAMC,KAGR,IAAItsB,KAAK2rB,UAAUY,IAAIH,EAASC,IAC9B,KAAMG,IAAgCJ,EAASC,GAEjDrsB,MAAK2rB,UAAUd,IAAIuB,EAASC,GAAID,IAOlCJ,EAAFrrB,UAAA8rB,WAAE,SAAWL,GACTpsB,KAAK2rB,UAAUe,OAAON,EAASC,KAIjCL,EAAFrrB,UAAA8U,KAAE,SAAK2W,GACCpsB,KAAKiG,QAAUmmB,EAASC,IAC1BrsB,KAAKiG,OAASmmB,EAASC,GACvBrsB,KAAK0V,UAAY0W,EAASN,MAAQM,EAASN,MAAQ9rB,KAAK8rB,OAExD9rB,KAAK0V,UAAY1V,KAAK2sB,qBAAqBP,GAG7CpsB,KAAK8W,WAAW/V,MAAMkF,OAAQjG,KAAKiG,OAAQyP,UAAW1V,KAAK0V,aAI7DsW,EAAFrrB,UAAAgsB,qBAAE,SAAqBP,GACnB,IAAKA,EAAY,MAAO,EAGxB,IAAMQ,GAAwC,MAAzBR,EAASQ,aAAuBR,EAASQ,aAAe5sB,KAAK4sB,aAC9EC,EAAqBC,GAAsBV,EAASN,OAAS9rB,KAAK8rB,MAAOc,GAGzEG,EAAqBF,EAAmBpW,QAAQzW,KAAK0V,WAAa,CAEtE,OADIqX,IAAsBF,EAAmB1hB,SAAU4hB,EAAqB,GACrEF,EAAmBE,IAG5Bf,EAAFrrB,UAAA8Z,SAAE,WACEza,KAAKgtB,oBAGPhB,EAAFrrB,UAAA4Z,YAAE,WACEva,KAAK6rB,cAAczlB,QAGrB4lB,EAAFrrB,UAAAwF,YAAE,WACEnG,KAAK6rB,cAAcxlB,2BAvGvB7E,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,YACVC,SAAU,UACVS,QAAS,mDAWX4D,SAAAzE,KAAGsB,EAAAA,MAAHpB,MAAS,mBAMToqB,QAAAtqB,KAAGsB,EAAAA,MAAHpB,MAAS,kBAGTgU,YAAAlU,KAAGsB,EAAAA,MAAHpB,MAAS,sBAcTkrB,eAAAprB,KAAGsB,EAAAA,MAAHpB,MAAS,yBAMToV,aAAAtV,KAAG0B,EAAAA,OAAHxB,MAAU,oBAlGVsqB,GA4D6BP,IC1CvBwB,GAA4BzI,GAAmBO,SAAW,IAC9BL,GAAgBC,eAGrCuI,IASXC,UAAWpS,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmB1a,EAAAA,OAAO2a,UAAW,qBAE3CD,EAAAA,MAAM,oBAAqB1a,EAAAA,OAAO2a,UAAW,sBAC7CC,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ8R,OAInDG,YAAarS,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmB1a,EAAAA,OAAO2a,UAAW,oBAC3CD,EAAAA,MAAM,oBAAqB1a,EAAAA,OAAO2a,UAAW,mBAC7CC,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ8R,OAInDI,aAActS,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmB1a,EAAAA,OAAO2a,UAAW,mBAC3CD,EAAAA,MAAM,oBAAqB1a,EAAAA,OAAO2a,UAAW,oBAC7CC,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ8R,OAInDK,aAAcvS,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyC1a,EAAAA,OAAOikB,QAAS,KAC/DvJ,EAAAA,MAAM,kCAAmC1a,EAAAA,OAAOikB,QAAS,OACzDvJ,EAAAA,MAAM,sEACF1a,EAAAA,OAAOikB,QAAS,KAEpBrJ,EAAAA,WAAW,8CAA+CC,EAAAA,QAAQ,QAClED,EAAAA,WAAW,UAAWC,EAAAA,QAAQ8R,OAUhCM,cAAexS,EAAAA,QAAQ,iBAErBG,EAAAA,WAAW,yCACPC,EAAAA,QAAQ8R,GAA2BO,EAAAA,WACjCltB,EAAAA,OAAO2a,UAAW,qBAClB3a,EAAAA,OAAO2a,UAAW,sBAGxBC,EAAAA,WAAW,yCACPC,EAAAA,QAAQ8R,GAA2BO,EAAAA,WACjCltB,EAAAA,OAAO2a,UAAW,kBAClB3a,EAAAA,OAAO2a,UAAW,wBAGxBC,EAAAA,WAAW,uCACPC,EAAAA,QAAQ8R,GAA2BO,EAAAA,WACjCltB,EAAAA,OAAO2a,UAAW,oBAClB3a,EAAAA,OAAO2a,UAAW,sBAGxBC,EAAAA,WAAW,uCACPC,EAAAA,QAAQ8R,GAA2BO,EAAAA,WACjCltB,EAAAA,OAAO2a,UAAW,kBAClB3a,EAAAA,OAAO2a,UAAW,yBAExBD,EAAAA,MAAM,yEACF1a,EAAAA,OAAO2a,UAAW,mBACtBD,EAAAA,MAAM,qCACF1a,EAAAA,OAAO2a,UAAW,sBACtBD,EAAAA,MAAM,kCACF1a,EAAAA,OAAO2a,UAAW,uBAIxBwS,cAAe1S,EAAAA,QAAQ,iBACrBG,EAAAA,WAAW,WACTwS,EAAAA,MAAM,KAAMC,EAAAA,gBAAiBC,UAAU,oCCrF7C5tB,KAAAkL,QAAoC,GAAI/G,GAAAA,QAGxCnE,KAAA6tB,gBAAoB,SAACxB,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeA7qB,KAACupB,EAAAA,WAADrpB,OAAakX,WAAY,8GAfzBkV,KAkCaC,IAEX7gB,QAAS4gB,GACTE,OAAQ,GAAIhlB,GAAAA,SAAY,GAAIoiB,GAAAA,SAAY0C,KACxCG,WAAYC,ICTdC,GAAA,yBA7BA,MAAAA,MA8BaC,GAA0BhnB,EAAc+mB,mBAmGnD,QAAFE,GAAqBC,EACPC,EACmB5X,EACA6X,GAH/B,GAAFzqB,GAKIC,EALJC,KAAAjE,OAAAA,IAOI,IAPiB+D,EAArBuqB,MAAqBA,EAEYvqB,EAAjC4S,MAAiCA,EACA5S,EAAjCyqB,cAAiCA,EAtCjCzqB,EAAA0qB,oBAAgC,EAUhC1qB,EAAA2qB,gBAAmC,GAKnC3qB,EAAA4qB,4BAA+B,EAS/B5qB,EAAAwpB,cAA+C,SAkBtC5W,EACH,KAAMiY,YAGR7qB,GAAK8qB,sBAAwBrpB,EAAAA,MAAMmR,EAAMG,WAAYH,EAAMkV,cAAeyC,EAAMpjB,SAC3EvF,UAAU,WACL5B,EAAK+qB,aACP/qB,EAAKgrB,yBAIFhrB,EAAK+qB,aAAe/qB,EAAKirB,YAA0C,WAA5BjrB,EAAKirB,WAAWjS,UAC1DhZ,EAAK4qB,4BAA6B,EAClC5qB,EAAKkrB,8BAA8BhS,UAAW,SAAUF,QAAShZ,EAAK2qB,mBAGxEH,EAAkBrpB,mBA5B5B,MArCmCb,GAAnCgqB,EAAArqB,GAsCAM,OAAAC,eAAM8pB,EAAN1tB,UAAA,oBAAA,WAAgC,MAAOX,MAAKksB,mBAC1C,SAAiBvL,GAAK3gB,KAAKksB,cAAgBrnB,EAAAA,sBAAsB8b,oCA8BjE0N,EAAF1tB,UAAA8Z,SAAE,YACOza,KAAKqsB,IAAMrsB,KAAKwuB,gBACnBxuB,KAAKqsB,GAAKrsB,KAAKwuB,cAAc/a,MAI/BzT,KAAK+uB,wBACL/uB,KAAKivB,8BACAlS,QAAS/c,KAAK8uB,YAAc,SAAW9uB,KAAK0uB,kBAEjD1uB,KAAK2W,MAAMwV,SAASnsB,OAGtBquB,EAAF1tB,UAAAwF,YAAE,WACEnG,KAAK2W,MAAM8V,WAAWzsB,MACtBA,KAAK6uB,sBAAsB1X,eAO7BkX,EAAF1tB,UAAAuuB,yBAAE,SAAyBC,GAEnBnvB,KAAKovB,eAAiBD,IAE1BnvB,KAAKyuB,mBAAqBU,EAErBnvB,KAAK8uB,cACR9uB,KAAK+uB,wBACD/uB,KAAKyuB,mBACPzuB,KAAKivB,8BAA8BhS,UAAWjd,KAAK0uB,gBAAiB3R,QAAS,SAE7E/c,KAAKivB,8BAA8BhS,UAAW,OAAQF,QAAS/c,KAAK0uB,qBAU1EL,EAAF1tB,UAAAsuB,6BAAE,SAA6BI,GAC3BrvB,KAAKgvB,WAAaK,EAIdrvB,KAAK2uB,6BACP3uB,KAAKgvB,YAAcjS,QAASsS,EAAUtS,WAK1CsR,EAAF1tB,UAAAK,aAAE,WACE,IAAIhB,KAAKovB,cAAT,CAEApvB,KAAK2W,MAAMlB,KAAKzV,MAGgB,SAA5BA,KAAKgvB,WAAWjS,SAAkD,WAA5B/c,KAAKgvB,WAAWjS,UACxD/c,KAAK2uB,4BAA6B,EAKpC,IAAMU,GAAsCrvB,KAAK8uB,aAC5C7R,UAAWjd,KAAK0uB,gBAAiB3R,QAAS,WAC1CE,UAAW,SAAUF,QAAS/c,KAAK0uB,gBACxC1uB,MAAKivB,6BAA6BI,GAElCrvB,KAAKyuB,oBAAqB,IAI5BJ,EAAF1tB,UAAAmuB,UAAE,WACE,MAAO9uB,MAAK2W,MAAM1Q,QAAUjG,KAAKqsB,KACH,QAAzBrsB,KAAK2W,MAAMjB,WAAgD,SAAzB1V,KAAK2W,MAAMjB,YAIpD2Y,EAAF1tB,UAAA2uB,wBAAE,WACE,OAAUtvB,KAAK8uB,YAAc,UAAY,IAAK9uB,KAAK0uB,iBAIrDL,EAAF1tB,UAAA4uB,mBAAE,WACE,GAAMtS,GAAYjd,KAAKgvB,WAAW/R,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAMjd,KAAKgvB,WAAWjS,SAajEsR,EAAF1tB,UAAAouB,sBAAE,WACE/uB,KAAK0uB,gBAAkB1uB,KAAK8uB,YACxB9uB,KAAK2W,MAAMjB,UACV1V,KAAK8rB,OAAS9rB,KAAK2W,MAAMmV,OAGhCuC,EAAF1tB,UAAAyuB,YAAE,WACE,MAAOpvB,MAAK2W,MAAMvV,UAAYpB,KAAKoB,UASrCitB,EAAF1tB,UAAA6uB,sBAAE,WACE,MAAKxvB,MAAK8uB,YAEqB,OAAxB9uB,KAAK2W,MAAMjB,UAAqB,YAAc,aAFrB,qBArNpClU,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,gBACVC,SAAU,qiCACVC,QAAF,guCACEQ,MACFuG,UAAA,iBACM4mB,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEA9tB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,OACEC,QAAF,YACEkP,YACF2b,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkBK,cAClBL,GAAkBO,4FA1DtBjsB,KAAQwqB,GAARzjB,aAAA/G,KAAAwH,EAAAA,aAZAxH,KAAEgS,EAAAA,aAAFjL,aAAA/G,KAAAwH,EAAAA,cAHAqlB,EAAA3rB,4FA0GAopB,QAAAtqB,KAAAsB,EAAAA,QAGA8pB,eAAAprB,KAAAsB,EAAAA,SAMAurB,mCC5HA,sBAeA7sB,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUC,EAAAA,cACVK,SAAUqiB,GAASqC,IACnBtkB,cAAeiiB,GAASqC,IACxBphB,WAAY8gB,QAnBd+B,oBCeE,QAAFrd,GAAc5Q,GACd,MAAImC,GAAJC,KAAAjE,KAAU6B,IAAV7B,KAhBA,MAckCqE,GAAlCoO,EAAAzO,kBAHAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,yDAJZH,KAAmBmY,EAAAA,eARnBlH,GAckCsd,EAAAA,yCCKlC/vB,KAAAkL,QAAoC,GAAI/G,GAAAA,QAGxCnE,KAAAgwB,cAA0B,WAtB1B,sBAaAxuB,KAACupB,EAAAA,WAADrpB,OAAakX,WAAY,8GAbzBhG,mBC6DE,QAAFF,GACW4b,EACC2B,EACAC,EACR3B,GAHOvuB,KAAXsuB,MAAWA,EACCtuB,KAAZiwB,cAAYA,EACAjwB,KAAZkwB,SAAYA,EAERD,EAAcE,QAAQD,EAAS7vB,eAAe,GAC9CL,KAAKowB,kBAAoB9B,EAAMpjB,QAAQvF,UAAU,WAAM,MAAA4oB,GAAkBrpB,iBAR7E,MAWEwN,GAAF/R,UAAAwF,YAAE,WACEnG,KAAKowB,kBAAkBjZ,cACvBnX,KAAKiwB,cAAcI,eAAerwB,KAAKkwB,SAAS7vB,gBAIlDqS,EAAF/R,UAAA2vB,aAAE,WACE,MAAOtwB,MAAKuwB,gBAAiB9d,IAAe,KAAOzS,KAAKuwB,OAI1D7d,EAAF/R,UAAA6vB,eAAE,WACE,MAAOxwB,MAAKuwB,gBAAiB9d,IAAezS,KAAKuwB,MAAQ,MAI3D7d,EAAF/R,UAAA8vB,gBAAE,WACE,MAAOzwB,MAAKkwB,SAAS7vB,eAIvBqS,EAAF/R,UAAA+vB,gBAAE,WACE,OACEphB,MAAOtP,KAAKsP,MACZrJ,OAAQjG,KAAKiG,OACb2nB,SAAU5tB,KAAK4tB,WAInBlb,EAAF/R,UAAA2c,MAAE,WACEtd,KAAKywB,kBAAkBnT,wBA3E3B9b,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEE,SAAU,y8CACVC,QAAF,4nBACEQ,MACFC,MAAA,kBACMqK,KAAN,OAEA7K,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,+EAZAZ,KAAQ4L,EAAAA,aAbR5L,KAAQsF,EAAAA,qBAGR4L,EAAAhQ,8DA8BAiuB,gBAAAnvB,KAAAsB,EAAAA,QAGAwM,QAAA9N,KAAGsB,EAAAA,QAGH8tB,WAAApvB,KAAAsB,EAAAA,QAGAmD,SAAAzE,KAAAsB,EAAAA,QAGA8qB,WAAApsB,KAAGsB,EAAAA,SAMH4P,KC1CalB,IAKXqf,yBAA0B9V,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAY1a,EAAAA,OAAO2a,UAAW,2BAA4B3B,WAAY,YAC5E0B,EAAAA,MAAM,UAAW1a,EAAAA,OAAO2a,UAAW,OAAQ3B,WAAY,aACvD0B,EAAAA,MAAM,OAAQ1a,EAAAA,OAAO2a,UAAW,0BAA2B3B,WAAY,YACvE4B,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/B1J,uBAAwBsJ,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAY1a,EAAAA,OAAOC,OAAQ,MAAO+Y,WAAY,YACpD0B,EAAAA,MAAM,OAAQ1a,EAAAA,OAAOC,OAAQ,MAAO+Y,WAAY,YAChD0B,EAAAA,MAAM,UAAW1a,EAAAA,OAAOC,OAAQ,IAAK+Y,WAAY,aACjD4B,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,0DCJtC,QAAFxI,GAAqB8G,GAAAzZ,KAArByZ,YAAqBA,EA9BrB,sBAuBAjY,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,sEAhBZH,KAA0BmY,EAAAA,iCAoB1BlG,OAAAjS,KAAGsB,EAAAA,MAAHpB,MAAS,qBA5BTiR,oBhCoDE,QAAFH,GAAoDse,EAClBC,GADhC,GAAFhtB,GAEIC,EAFJC,KAAAjE,KAEU8wB,IAFV9wB,WACkC+D,GAAlCgtB,mBAAkCA,IAHlC,MAF6B1sB,GAA7BmO,EAAAxO,GAUEwO,EAAF7R,UAAAqwB,aAAE,SAAaC,EAA6BC,GACxC,GAAMC,GAAqBnxB,KAAK+wB,mBAAmBC,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAWrxB,KAAKsxB,WAE/D,OAAOH,IAAsBC,kBA3BjC5vB,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEE,SAAU,uDACVoL,YAAFC,QAAA2F,GAAA1F,YAAAqF,IACEzQ,cAAFC,EAAAA,kBAAAC,KACEL,SAAF,UACEM,gBAAFC,EAAAA,wBAAAC,2KAbAoQ,EAAA9P,6DAmBA8P,cAlDAd,GAAA,SAAA1N,gBA0EA,GAAAD,GAAA,OAAAC,GAAAA,EAAA8M,MAAA9Q,KAAA0U,YAAA1U,qEAWA,mEAKAuxB,EAAAvxB,KAAAwxB,OAAAxR,WAAA,OAAA,OAaG,UAbHtZ,QAAA,SAAA+M,GACA,GAAAge,GAAAF,EAAAvrB,KAAA,SAAA0rB,GAAA,MAAAA,GAAAje,OAAAA,GAEAge,KACA1tB,EAAA4tB,eAAAle,GAAAge,EAAiChY,eAKjCzZ,KAAA4xB,OAAA1mB,QAAAzF,KAAAC,EAAAA,UAAA1F,KAAAulB,aAAA5f,UAAA,WAAA,MAAA5B,GAAA8tB,iFAMA7xB,KAAAc,cAAAC,QAGA2Q,EAAAnJ,aACA/G,KAAAgH,EAAAA,UAAA9G,+IAjCA8vB,SAAAhwB,KAAAqM,EAAAA,gBAAenM,MAAfiR,MAGA7R,gBAAAU,KAAA0B,EAAAA,UAMAwO,iBArFAa,GAAA,SAAAvO,gBAiIA,MAAA,QAAAA,GAAAA,EAAA8M,MAAA9Q,KAAA0U,YAAA1U,KAHA,uHAdA6B,SAAA,ipCACEC,QAAF,8pDACEO,QAAF,iBACEC,MACFC,MAAe,yBACf+O,mBAAA,aACA1E,KAAA,WAEA2E,YAAaC,GAAbqf,0BACA5jB,YAAAC,QAAAwE,GAAAvE,YAAAoF,IACAxQ,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAmQ,GACAb,IACAC,GAAA,SAAA3N,+CAoBA,kCAAAD,gBACA4N,EAAApJ,aAEA/G,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qDACAE,SAAA;sqDArBAQ,QAAA,iBACEC,MACFC,MAAA,uBACA+O,mBAAA,WACA1E,KAAA,WAEE2E,YAAFC,GAAAC,wBACExE,YAAFC,QAAAwE,GAAAvE,YAAAwE,IACA5P,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAuP,EAAAC,eAAA,WAAA,QACApQ,KAAAqQ,EAAAA,eAAAtJ,aAAA/G,KAAmCwH,EAAAA,aACnCxH,KAAAsF,EAAAA,uGClJA,MAsBoCzC,GAApCyN,EAAA9N,kBATAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,yBACVW,MACEuG,UAAW,kBACXkJ,SAAU,QAEZ1P,QAAS,QACT4K,YAAaC,QAAS8E,EAAAA,WAAY7E,YAAauE,SApBjDI,GAsBoCG,EAAAA,2FAtBpC,MAkCwC5N,GAAxC6N,EAAAlO,kBATAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,6BACVW,MACEuG,UAAW,sBACXkJ,SAAU,QAEZ1P,QAAS,QACT4K,YAAaC,QAAS8E,EAAAA,WAAY7E,YAAauE,SAhCjDQ,GAkCwCC,EAAAA,gDClCxC,sBAuBA3Q,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEE,GACAD,EAAAA,aACAE,EAAAA,aACA4I,GACAC,EAAAA,iBACAC,GACA7I,IAEFE,SACEJ,GACAgJ,GACAZ,GACAa,GACAC,GACAf,GACAI,GACAI,GACAQ,GACAC,IAEF5I,cACEwI,GACAZ,GACAa,GACAC,GACAf,GACAI,GACAI,GACAQ,GACAC,IAEF1F,WAAY2F,GAAgBC,QAxD9BC,gFCyBA,MACiCzO,GAAjC0O,EAAA/O,kBAZAxC,KAACC,EAAAA,UAADC,OAAAC,SAAA,8BACEC,SAAU,WACVC,SAAUmR,EAAAA,mBACVlR,QAAF,w4CACEQ,MACFC,MAAA,aAEAR,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGA2Q,0FCzBA,MAyBgC1O,GAAhC4O,EAAAjP,kBAJAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,eACVsL,YAAaC,QAASgG,EAAAA,WAAY/F,YAAa8F,QAvBjDA,GAyBgCC,EAAAA,uFAzBhC,MAmCsC7O,GAAtC8O,EAAAnP,kBAJAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,qBACVsL,YAAaC,QAASkG,EAAAA,iBAAkBjG,YAAagG,QAjCvDA,GAmCsCC,EAAAA,6FAnCtC,MA6CsC/O,GAAtCgP,EAAArP,kBAJAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,qBACVsL,YAAaC,QAASoG,EAAAA,iBAAkBnG,YAAakG,QA3CvDA,GA6CsCC,EAAAA,6FA7CtC,MAuDkCjP,GAAlCkP,EAAAvP,kBAJAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,iBACVsL,YAAaC,QAASsG,EAAAA,aAAcrG,YAAaoG,0BAInDE,OAAAjS,KAAGsB,EAAAA,MAAHpB,MAAS,mBAzDT6R,GAuDkCC,EAAAA,6BAchC,QAAFE,GAAcC,EACAjQ,GADZ,GAAFK,GAEIC,EAFJC,KAAAjE,KAEU2T,EAAWjQ,IAFrB1D,WAGI0D,GAAWrD,cAAcqE,UAAUE,IAAI,cAAc+O,EAAUC,wBAxEnE,MAoEmCvP,GAAnCqP,EAAA1P,kBAPAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,uCACVW,MACEC,MAAS,kBACTqK,KAAQ,wDArDZpL,KAAEgS,EAAAA,eAJFhS,KAAmB4L,EAAAA,cARnBsG,GAoEmCG,EAAAA,8BAiBjC,QAAFC,GAAcH,EACAjQ,GADZ,GAAFK,GAEIC,EAFJC,KAAAjE,KAEU2T,EAAWjQ,IAFrB1D,WAGI0D,GAAWrD,cAAcqE,UAAUE,IAAI,cAAc+O,EAAUC,wBAxFnE,MAoFmCvP,GAAnCyP,EAAA9P,kBAPAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,uCACVW,MACEC,MAAS,kBACTqK,KAAQ,oDArEZpL,KAAEgS,EAAAA,eAJFhS,KAAmB4L,EAAAA,cARnB0G,GAoFmCC,EAAAA,8BAiBjC,QAAFC,GAAcL,EACAjQ,GADZ,GAAFK,GAEIC,EAFJC,KAAAjE,KAEU2T,EAAWjQ,IAFrB1D,WAGI0D,GAAWrD,cAAcqE,UAAUE,IAAI,cAAc+O,EAAUC,wBAxGnE,MAoG6BvP,GAA7B2P,EAAAhQ,kBAPAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,yBACVW,MACEC,MAAS,WACTqK,KAAQ,oDArFZpL,KAAEgS,EAAAA,eAJFhS,KAAmB4L,EAAAA,cARnB4G,GAoG6BC,EAAAA,oFCpG7B,MA0BqC5P,GAArC6P,EAAAlQ,kBALAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,oBACVsL,YAAaC,QAASiH,EAAAA,gBAAiBhH,YAAa+G,IACpD7R,QAAS,gCAxBX6R,GA0BqCC,EAAAA,4FA1BrC,MAqCqC9P,GAArC+P,EAAApQ,kBALAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,oBACVsL,YAAaC,QAASmH,EAAAA,gBAAiBlH,YAAaiH,IACpD/R,QAAS,gCAnCX+R,GAqCqCC,EAAAA,4FArCrC,MAiDkChQ,GAAlCiQ,EAAAtQ,kBALAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,cACVsL,YAAaC,QAASqH,EAAAA,UAAWpH,YAAamH,IAC9CjS,QAAS,4BAA6B,2BA/CxCiS,GAiDkCC,EAAAA,sFAelC,MACkClQ,GAAlCmQ,EAAAxQ,kBAZAxC,KAACC,EAAAA,UAADC,OAAAC,SAAA,qCACEE,SAAU4S,EAAAA,iBACVnS,MACFC,MAAA,iBACMqK,KAAN,OAEA1K,gBAAiBC,EAAAA,wBAAjBC,OACAL,cAAAC,EAAAA,kBAAAC,KACEL,SAAF,mBAGA4S,+CAgBA,MAAA,QAAAxQ,GAAAA,EAAA8M,MAAA9Q,KAAA0U,YAAA1U,KAHA,+HATAsC,MACAC,MAAA,iBACAqK,KAAA,OAEE1K,gBAAFC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,KACAL,SAAU,mBAGV+S,GACAC,EAAAA,yFAYA,cAK4BC,EAA5BtM,uHAZAqE,KAAA,OAEE1K,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEL,SAAF,aAGAiT,GACAC,EAAAA,QC5DMC,IAEJhC,GAGAI,GACAe,GACAX,GACAN,GACAqB,GACAjB,GACAe,GAGAV,GACAM,GACAF,GAGAU,GACAK,GACAF,gCApDF,sBAuDAnT,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAU2L,EAAAA,eAAgB1L,EAAAA,aAAcC,IACxCI,QAASoL,GACThL,aAAcgL,OA1DhBE,KC+BAC,GAAA,SAAAlR,GA2IE,QAAFkR,GAAc9E,OAAd,KAAAA,IAAcA,KAAZ,IAAFrM,GACIC,EADJC,KAAAjE,OAAAA,WAtIA+D,GAAAoR,YAAiC,GAAI7E,GAAAA,oBAGrCvM,EAAAqR,QAA6B,GAAI9E,GAAAA,gBAAwB,IAiEzDvM,EAAAsR,oBAAM,SAAC7H,EAAS8H,GACZ,GAAM7Q,GAAa+I,EAAK8H,EACxB,OAAOC,GAAAA,eAAe9Q,GAASoI,OAAOpI,GAASA,GAYnDV,EAAAyR,SAAkD,SAAChI,EAAWiI,GAC1D,GAAMxP,GAASwP,EAAKxP,OACdyP,EAAYD,EAAKC,SACvB,OAAKzP,IAAuB,IAAbyP,EAERlI,EAAKiI,KAAK,SAACE,EAAGC,GACnB,GAAIC,GAAS9R,EAAKsR,oBAAoBM,EAAG1P,GACrC6P,EAAS/R,EAAKsR,oBAAoBO,EAAG3P,GAMrC8P,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbL,EAAqB,GAAK,KAxBdlI,GAsC7CzJ,EAAAiS,gBAA4D,SAACxI,EAASlC,GAElE,GAAM2K,GAAc,SAACC,EAAaC,GAAQ,MAAAD,GAAc1I,EAAK2I,IACvDC,EAAU9R,OAAO+R,KAAK7I,GAAM8I,OAAOL,EAAa,IAAIM,cAGpDC,EAAoBlL,EAAOO,OAAO0K,aAExC,QAA8C,GAAvCH,EAAQK,QAAQD,IAKvBzS,EAAKyM,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtCrM,EAAK2S,8BA7KT,MA+B2CrS,GAA3C6Q,EAAAlR,GAyBEM,OAAFC,eAAM2Q,EAANvU,UAAA,YAAE,WAAa,MAAOX,MAAKwQ,MAAM/L,WAC/B,SAAS+I,GAAaxN,KAAKwQ,MAAMpK,KAAKoH,oCAMtClJ,OAAFC,eAAM2Q,EAANvU,UAAA,cAAE,WAAuB,MAAOX,MAAKoV,QAAQ3Q,WAC3C,SAAW6G,GAAkBtL,KAAKoV,QAAQhP,KAAKkF,oCAM/ChH,OAAFC,eAAM2Q,EAANvU,UAAA,YAAE,WAA6B,MAAOX,MAAK2W,WACzC,SAASlB,GACPzV,KAAK2W,MAAQlB,EACbzV,KAAK0W,6DAcPpS,OAAFC,eAAM2Q,EAANvU,UAAA,iBAAE,WAAuC,MAAOX,MAAK4W,gBACnD,SAAcC,GACZ7W,KAAK4W,WAAaC,EAClB7W,KAAK0W,6DA2FPxB,EAAFvU,UAAA+V,0BAAE,WAAA,GAAF3S,GAAA/D,KAOU8W,EAAoC9W,KAAK2W,MAC3CnR,EAAAA,MAAYxF,KAAK2W,MAAMG,WAAY9W,KAAK2W,MAAMI,aAC9CxR,EAAAA,GAAa,MACXyR,EAAyChX,KAAK4W,WAChDpR,EAAAA,MAAiBxF,KAAK4W,WAAWK,KAAMjX,KAAK4W,WAAWG,aACvDxR,EAAAA,GAAa,KAEbvF,MAAKkX,4BACPlX,KAAKkX,2BAA2BC,aAGlC,IAAMC,GAAapX,KAAKwQ,MAElB6G,EAAeC,EAAAA,cAAcF,EAAYpX,KAAKoV,SACjD3P,KAAKsL,EAAAA,IAAI,SAACwG,GAAjB,GAAkB/J,GAAlB+J,EAAA,EAA4B,OAAAxT,GAAKyT,YAAYhK,MAEnCiK,EAAcH,EAAAA,cAAcD,EAAcP,GAC7CrR,KAAKsL,EAAAA,IAAI,SAACwG,GAAjB,GAAkB/J,GAAlB+J,EAAA,EAA4B,OAAAxT,GAAK2T,WAAWlK,KAElB8J,GAAAA,cAAcG,EAAaT,GAC9CvR,KAAKsL,EAAAA,IAAI,SAACwG,GAAjB,GAAkB/J,GAAlB+J,EAAA,EAA4B,OAAAxT,GAAK4T,UAAUnK,MAEzB7H,UAAU,SAAA6H,GAAQ,MAAAzJ,GAAKoR,YAAY/O,KAAKoH,MAQxD0H,EAAFvU,UAAA6W,YAAE,SAAYhK,GAAZ,GAAFzJ,GAAA/D,IASI,OALAA,MAAKqX,aACArX,KAAKsL,OAAgBkC,EAAKlC,OAAO,SAAAsM,GAAO,MAAA7T,GAAKiS,gBAAgB4B,EAAK7T,EAAKuH,UAAzDkC,EAEfxN,KAAK6W,WAAa7W,KAAK6X,iBAAiB7X,KAAKqX,aAAalM,QAEvDnL,KAAKqX,cAQdnC,EAAFvU,UAAA+W,WAAE,SAAWlK,GAET,MAAKxN,MAAKyV,KAEHzV,KAAKwV,SAAShI,EAAKpC,QAASpL,KAAKyV,MAFfjI,GAS3B0H,EAAFvU,UAAAgX,UAAE,SAAUnK,GACR,IAAKxN,KAAK6W,UAAa,MAAOrJ,EAE9B,IAAMsK,GAAa9X,KAAK6W,UAAUkB,UAAY/X,KAAK6W,UAAUmB,QAC7D,OAAOxK,GAAKpC,QAAQ6M,OAAOH,EAAY9X,KAAK6W,UAAUmB,WAQxD9C,EAAFvU,UAAAkX,iBAAE,SAAiBK,GAAjB,GAAFnU,GAAA/D,IACImY,SAAQC,UAAUC,KAAK,WACrB,GAAKtU,EAAK8S,YAEV9S,EAAK8S,UAAU1L,OAAS+M,EAGpBnU,EAAK8S,UAAUkB,UAAY,GAAG,CAChC,GAAMO,GAAgBC,KAAKC,KAAKzU,EAAK8S,UAAU1L,OAASpH,EAAK8S,UAAUmB,UAAY,GAAK,CACxFjU,GAAK8S,UAAUkB,UAAYQ,KAAKE,IAAI1U,EAAK8S,UAAUkB,UAAWO,OASpEpD,EAAFvU,UAAA+P,QAAE,WAAY,MAAO1Q,MAAKmV,aAMxBD,EAAFvU,UAAAqQ,WAAE,aA1RFkE,GA+B2CjE,EAAAA,YCV9ByH,GACX,GAAIC,GAAAA,eAAqC,uBACvCC,WAAY,OACZC,QAAS,WAAM,MAAAC,OAMNA,GAA6C,SAAC9T,GACzD,OACE+T,KAAM/T,GAAWA,EAAQgU,YAAc,GAAK,KAAO,IACnDC,MAAOjU,GAAWA,EAAQkU,aAAe,GAAK,KAAO,oBAevD,QAAFlP,GACY1G,EACAM,EACiCuV,GAFjCnZ,KAAZsD,YAAYA,EACAtD,KAAZ4D,QAAYA,EACiC5D,KAA7CmZ,kBAA6CA,EAnD7C,MA0DEnP,GAAFrJ,UAAA6F,eAAE,SAAexB,GAAf,GAAFjB,GAAA/D,IACIA,MAAKuG,OAEgC,mBAA1B6S,uBACTpZ,KAAK4D,QAAQwB,kBAAkB,WAC7BgU,sBAAsB,WAAM,MAAArV,GAAKsV,WAAWrU,OAG9ChF,KAAKqZ,WAAWrU,IAKpBgF,EAAFrJ,UAAA4F,KAAE,WACEvG,KAAKsD,YAAYjD,cAAcC,MAAMgZ,WAAa,WAIpDtP,EAAFrJ,UAAA8F,KAAE,WACEzG,KAAKsD,YAAYjD,cAAcC,MAAMgZ,WAAa,UAO5CtP,EAAVrJ,UAAA0Y,WAAA,SAAqBrU,GACjB,GAAMuU,GAAYvZ,KAAKmZ,kBAAkBnU,GACnCwU,EAAsBxZ,KAAKsD,YAAYjD,aAE7CmZ,GAAOlZ,MAAMyY,KAAOQ,EAAUR,KAC9BS,EAAOlZ,MAAM2Y,MAAQM,EAAUN,sBAhDnCzX,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,cACVW,MACEC,MAAS,uDApCbf,KAAmB4L,EAAAA,aAAnB5L,KAAuDqF,EAAAA,SA2CvDrF,SAAAuH,GAAAR,aAAA/G,KAAKyH,EAAAA,OAALvH,MAAYgX,SAnDZ1O,oBCgBE,QAAFJ,GAAc6P,EAA+BC,GAC7C,MAAI1V,GAAJC,KAAAjE,KAAUyZ,EAAaC,IAAvB1Z,KAjBA,MAeiCqE,GAAjCuF,EAAA5F,kBAHAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,yEALZH,KAAmBmY,EAAAA,cAAnBnY,KAAgC6K,EAAAA,oBARhCzC,GAeiCgQ,EAAAA,yBCF/B,QAAF9P,GAAqBjI,GAAA7B,KAArB6B,SAAqBA,EAbrB,sBAWAL,KAACgH,EAAAA,UAAD9G,OAAYC,SAAU,0DAHtBH,KAAmBmY,EAAAA,eARnB7P,KC+BA+P,GAAA,yBA/BA,MAAAA,MAgCaC,GAAmB1S,EAAcyS,mBAyD5C,QAAFhQ,GAAsBkQ,GAApB,GAAFhW,GACIC,EADJC,KAAAjE,OAAAA,WAAsB+D,GAAtBgW,kBAAsBA,EAjCtBhW,EAAAiW,UAAsC,GAGtCjW,EAAAkW,eAAkD,KAQlDlW,EAAAmW,aAA0B,GAAI/V,GAAAA,QAG9BJ,EAAAoW,eAA4B,GAAIhW,GAAAA,QAMhCJ,EAAAqW,SAA4B,KAM5BrW,EAAAsW,OAA0B,KAK1BtW,EAAAuW,UAAa,IA/Bb,MAb4BjW,GAA5BwF,EAAA7F,GAmBEM,OAAFC,eAAMsF,EAANlJ,UAAA,eAAE,WACE,MAAOX,MAAKia,gDA8BdpQ,EAAFlJ,UAAA4Z,YAAE,SAAYrP,GACNA,EAAQsP,eAAe,cACzBxa,KAAKka,aAAa9T,OAGhB8E,EAAQsP,eAAe,aACzBxa,KAAKma,eAAe/T,QAIxByD,EAAFlJ,UAAAwF,YAAE,WACEnG,KAAKma,eAAe9T,WACpBrG,KAAKka,aAAa7T,YAGpBwD,EAAFlJ,UAAA8Z,SAAE,WACEza,KAAKia,eAAiB,GAAIS,GAAAA,eACtB1a,KAAK2a,kBAAoB3a,KAAK4a,iBAAkB5a,KAAK+Z,mCA5E7DvY,KAACC,EAAAA,UAADC,OAAAC,SAAA,UACEE,SAAU,uDACVQ,QAAF,YACEH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEL,SAAF,4EAnBAiI,EAAAnH,wIAyBAkY,mBAAApZ,KAAAoB,EAAAA,UAAAlB,MAAgBiY,EAAAA,eAKhBK,YAAAxY,KAAAsB,EAAAA,MAAGpB,MAAH,YAMAmI,OCvCagR,IAIXC,aAAcC,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyD1a,EAAAA,OAAO2a,UAAW,UACjFD,EAAAA,MAAM,OAAQ1a,EAAAA,OAAO2a,UAAW,8BAChCD,EAAAA,MAAM,QAAS1a,EAAAA,OAAO2a,UAAW,6BACjCC,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yCACZD,EAAAA,WAAW,8BACT5a,EAAAA,OAAO2a,UAAW,6BAClBE,EAAAA,QAAQ,0CAEVD,EAAAA,WAAW,+BACT5a,EAAAA,OAAO2a,UAAW,4BAClBE,EAAAA,QAAQ,4DCiCZ,QAAFhR,GACIiR,EACA1B,EAC8C2B,GAHhD,GAAFtX,GAIMC,EAJNC,KAAAjE,KAIYob,EAA0B1B,IAJtC1Z,WAGkD+D,GAAlDsX,MAAkDA,EAPlDtX,EAAAuX,cAA0BC,EAAAA,aAAaC,MAEvCzX,EAAA0X,YAAwBF,EAAAA,aAAaC,QAjErC,MA6DsCnX,GAAtC8F,EAAAnG,GAcEmG,EAAFxJ,UAAA8Z,SAAE,WAAA,GAAF1W,GAAA/D,IACIgE,GAAJrD,UAAU8Z,SAAVxW,KAAAjE,MAEIA,KAAKsb,cAAgBtb,KAAKqb,MAAMK,iBAC7BjW,KAAKkW,EAAAA,UAAU3b,KAAKqb,MAAMO,kBAAkB5b,KAAKqb,MAAMQ,aACvDlW,UAAU,SAACmW,GACNA,IAAgB/X,EAAKgY,eACvBhY,EAAKiY,OAAOjY,EAAKsX,MAAMY,YAI7Bjc,KAAKyb,YAAczb,KAAKqb,MAAMa,oBAAoBvW,UAAU,WAC1D5B,EAAKoY,YAKThS,EAAFxJ,UAAAwF,YAAE,WACEnC,EAAJrD,UAAUwF,YAAVlC,KAAAjE,MACIA,KAAKsb,cAAcnE,cACnBnX,KAAKyb,YAAYtE,8BArCrB3V,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,2DAtCZH,KAAE4a,EAAAA,2BACF5a,KAAE6K,EAAAA,mBA6FF7K,KAAa0I,GAAb3B,aAAA/G,KA7CKyH,EAAAA,OA6CLvH,MA7CY2a,EAAAA,WAAW,WAAM,MAAAnS,YAtE7BC,GA6DsCmS,EAAAA,+BAoGpC,QAAFpS,GAAsB5G,EACYK,GADZ3D,KAAtBsD,YAAsBA,EACYtD,KAAlC2D,KAAkCA,EA7ClC3D,KAAAuc,aAA0D,GAAIC,GAAAA,aAG9Dxc,KAAA0b,iBAA+D,GAAIc,GAAAA,aAGnExc,KAAAkc,oBAAkE,GAAIM,GAAAA,aAGtExc,KAAAyc,YAAuD,GAAID,GAAAA,cAAmB,GAsB9E,MAZAlY,QAAAC,eAAM2F,EAANvJ,UAAA,gBAAA,SAAeyZ,GAETpa,KAAK6b,UADHzB,EAAW,EACkC,OAA9Bpa,KAAK0c,sBAAiC,OAAS,QACvDtC,EAAW,EAC2B,OAA9Bpa,KAAK0c,sBAAiC,QAAU,OAEhD,0CAOvBpY,OAAAC,eAAM2F,EAANvJ,UAAA,cAAA,SAAa0Z,GACT,GAAc,MAAVA,EAAJ,CAEA,GAAMsC,GAAM3c,KAAK0c,qBAEf1c,MAAK4c,QADK,OAAPD,GAAgBtC,GAAU,GAAc,OAAPsC,GAAgBtC,EAAS,EAC9C,OAEA,0CAYnBnQ,EAAFvJ,UAAA8Z,SAAE,WACwB,UAAlBza,KAAK6b,WAAyB7b,KAAK4c,UACrC5c,KAAK6b,UAA4B,QAAhB7b,KAAK4c,QAAoB,qBAAuB,wBAIrE1S,EAAFvJ,UAAAkc,uBAAE,SAAuBC,GACrB,GAAMhB,GAAc9b,KAAK4b,kBAAkBkB,EAAEC,QAC7C/c,MAAK0b,iBAAiB3a,KAAK+a,GACvBA,GACF9b,KAAKuc,aAAaxb,KAAKf,KAAKsD,YAAYjD,cAAcQ,eAI1DqJ,EAAFvJ,UAAAqc,wBAAE,SAAwBF,GAElB9c,KAAK4b,kBAAkBkB,EAAEC,UAAY/c,KAAK4b,kBAAkB5b,KAAK6b,YACnE7b,KAAKyc,YAAY1b,OAGff,KAAK4b,kBAAkBkB,EAAEG,aAAejd,KAAK4b,kBAAkB5b,KAAK6b,YACtE7b,KAAKkc,oBAAoBnb,QAK7BmJ,EAAFvJ,UAAA+b,oBAAE,WACE,MAAO1c,MAAK2D,MAA4B,QAApB3D,KAAK2D,KAAKc,MAAkB,MAAQ,OAI1DyF,EAAFvJ,UAAAib,kBAAE,SAAkBxB,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,kBAnGR5Y,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEE,SAAU,wOACVC,QAAF,wHACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEmP,YAAasJ,GAAfC,cACExY,MACFC,MAAe,oIAlFf2H,EAAAxH,kFAyFAwZ,sBAAA1a,KAAA0B,EAAAA,SAGAuZ,cAAAjb,KAAA0B,EAAAA,SAGAga,cAAA1b,KAAAoB,EAAAA,UAAAlB,MAAAyb,EAAAA,uBAGAlB,WAAAza,KAAAsB,EAAAA,MAAApB,MAAA,aAGA0Y,WAAA5Y,KAAAsB,EAAAA,QAGAuX,SAAA7Y,KAAAsB,EAAAA,SAgBAoH,KCvIAkT,GAAA,yBAbA,MAAAA,MAcaC,GAA+BjW,EAAcgW,mBAcxD,QAAFnT,GAAqBvG,GAAnB,GAAFK,GACIC,EADJC,KAAAjE,OAAAA,WAAqB+D,GAArBL,WAAqBA,IA5BrB,MA2BwCW,GAAxC4F,EAAAjG,GAMEiG,EAAFtJ,UAAA2c,MAAE,WACEtd,KAAK0D,WAAWrD,cAAcid,SAGhCrT,EAAFtJ,UAAA4c,cAAE,WACE,MAAOvd,MAAK0D,WAAWrD,cAAc2Y,YAGvC/O,EAAFtJ,UAAA6c,eAAE,WACE,MAAOxd,MAAK0D,WAAWrD,cAAc6Y,4BAtBzC1X,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,uBACVU,QAAS,YACTC,MACEqG,2BAA4B,oDAhBhCnH,KAAmB4L,EAAAA,cARnBnD,GA2BwCoT,ICuBxCI,GAAA,yBAlDA,MAAAA,MAmDaC,GAAyBvW,EAAmBsW,mBA+EvD,QAAFrT,GAAsB9G,EACAO,EACAC,EACYH,GAHhC,GAAFI,GAIIC,EAJJC,KAAAjE,OAAAA,WAAsB+D,GAAtBT,YAAsBA,EACAS,EAAtBF,mBAAsBA,EACAE,EAAtBD,eAAsBA,EACYC,EAAlCJ,KAAkCA,EAlDlCI,EAAA4Z,YAAgC,EAGhC5Z,EAAA6Z,gBAA4B,EAG5B7Z,EAAA8Z,uBAAkC,EAGlC9Z,EAAA+Z,eAA2BvC,EAAAA,aAAaC,MAGxCzX,EAAAga,yBAA4B,EAG5Bha,EAAAia,qBAAwB,EAGxBja,EAAAka,sBAAyB,EAWzBla,EAAAma,eAAmC,EAanCna,EAAAoa,mBAA0C,GAAI3B,GAAAA,aAG9CzY,EAAAqa,aAAoC,GAAI5B,GAAAA,eAAxC,MAtDkCnY,GAAlC+F,EAAApG,GA0CAM,OAAAC,eAAM6F,EAANzJ,UAAA,qBAAA,WAAgC,MAAOX,MAAKke,oBAC1C,SAAkBzZ,GAChBA,EAAQ4Z,EAAAA,qBAAqB5Z,GAC7BzE,KAAK6d,sBAAwB7d,KAAKke,gBAAkBzZ,EACpDzE,KAAKke,eAAiBzZ,EACtBzE,KAAK2d,YAAclZ,mCAgBrB2F,EAAFzJ,UAAAkF,sBAAE,WAEM7F,KAAKse,gBAAkBte,KAAKue,eAAepT,SAC7CnL,KAAKwe,oBACLxe,KAAKse,eAAiBte,KAAKue,eAAepT,OAC1CnL,KAAK6D,mBAAmBqB,gBAKtBlF,KAAK6d,wBACP7d,KAAKye,eAAeze,KAAKke,gBACzBle,KAAK0e,0BACL1e,KAAK2e,4BACL3e,KAAK6d,uBAAwB,EAC7B7d,KAAK6D,mBAAmBqB,gBAKtBlF,KAAK4e,yBACP5e,KAAK6e,2BACL7e,KAAK4e,wBAAyB,EAC9B5e,KAAK6D,mBAAmBqB,iBAI5BkF,EAAFzJ,UAAAme,eAAE,SAAe1W,GACb,OAAQA,EAAM2W,SACZ,IAAKC,GAAAA,YACHhf,KAAKif,eACL,MACF,KAAKC,GAAAA,WACHlf,KAAKmf,mBACL,MACF,KAAKC,GAAAA,KACHpf,KAAKqf,iBACLjX,EAAMC,gBACN,MACF,KAAKiX,GAAAA,IACHtf,KAAKuf,gBACLnX,EAAMC,gBACN,MACF,KAAKmX,GAAAA,MACL,IAAKC,GAAAA,MACHzf,KAAKme,mBAAmBpd,KAAKf,KAAKsB,YAClC8G,EAAMC,mBAQZ+B,EAAFzJ,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,KACUqF,EAAYrF,KAAK2D,KAAO3D,KAAK2D,KAAK2B,OAASC,EAAAA,GAAa,MACxDma,EAAS1f,KAAK8D,eAAewB,OAAO,KACpCqa,EAAU,WACd5b,EAAKya,oBACLza,EAAK4a,4BAK0B,oBAA1BvF,uBAAwCA,sBAAsBuG,GAAWA,IAChF3f,KAAK8d,eAAiBtY,EAAAA,MAAMH,EAAWqa,GAAQ/Z,UAAUga,IAG3DvV,EAAFzJ,UAAAwF,YAAE,WACEnG,KAAK8d,eAAe3G,eAMtB/M,EAAFzJ,UAAAif,kBAAE,WACE5f,KAAKwe,oBACLxe,KAAK2e,4BACL3e,KAAK6D,mBAAmBqB,gBAM1BkF,EAAFzJ,UAAA6d,kBAAE,WACExe,KAAK6f,0BACL7f,KAAK0e,0BACL1e,KAAK6e,4BAIPva,OAAFC,eAAM6F,EAANzJ,UAAA,kBASE,WAA2B,MAAOX,MAAK2d,iBATvC,SAAelZ,GACRzE,KAAK8f,cAAcrb,IAAUzE,KAAK2d,aAAelZ,IAEtDzE,KAAK2d,YAAclZ,EACnBzE,KAAKoe,aAAard,KAAK0D,GACvBzE,KAAK+f,aAAatb,qCAUpB2F,EAAFzJ,UAAAmf,cAAE,SAAcxQ,GACZ,IAAKtP,KAAKue,eAAkB,OAAO,CAEnC,IAAMtd,GAAMjB,KAAKue,eAAiBve,KAAKue,eAAeyB,UAAU1Q,GAAS,IACzE,SAASrO,IAAQA,EAAIG,UAOvBgJ,EAAFzJ,UAAAof,aAAE,SAAavY,GAKX,GAJIxH,KAAK+d,yBACP/d,KAAKye,eAAejX,GAGlBxH,KAAKue,gBAAkBve,KAAKue,eAAepT,OAAQ,CACrDnL,KAAKue,eAAeyB,UAAUxY,GAAU8V,OAKxC,IAAM2C,GAAcjgB,KAAKkgB,kBAAkB7f,cACrCsc,EAAM3c,KAAK0c,qBAGfuD,GAAYE,WADH,OAAPxD,EACuB,EAEAsD,EAAYG,YAAcH,EAAY/G,cASrE9O,EAAFzJ,UAAA0f,WAAE,SAAWC,GACT,GAAItgB,KAAKue,eAGP,IAAK,GAFCgC,GAA6BvgB,KAAKue,eAAeyB,UAE9ChQ,EAAIhQ,KAAKsB,WAAagf,EAAQtQ,EAAIuQ,EAAKpV,QAAU6E,GAAK,EAAGA,GAAKsQ,EACrE,GAAItgB,KAAK8f,cAAc9P,GAErB,YADAhQ,KAAKsB,WAAa0O,IAQ1B5F,EAAFzJ,UAAAse,cAAE,WACEjf,KAAKqgB,WAAyC,OAA9BrgB,KAAK0c,sBAAiC,GAAK,IAI7DtS,EAAFzJ,UAAAwe,kBAAE,WACEnf,KAAKqgB,WAAyC,OAA9BrgB,KAAK0c,uBAAkC,EAAI,IAIrDtS,EAAVzJ,UAAA0e,0BACI,IAAK,GAAIrP,GAAI,EAAGA,EAAIhQ,KAAKue,eAAepT,OAAQ6E,IAC9C,GAAIhQ,KAAK8f,cAAc9P,GAAI,CACzBhQ,KAAKsB,WAAa0O,CAClB,SAME5F,EAAVzJ,UAAA4e,yBACI,IAAK,GAAIvP,GAAIhQ,KAAKue,eAAepT,OAAS,EAAG6E,GAAK,EAAGA,IACnD,GAAIhQ,KAAK8f,cAAc9P,GAAI,CACzBhQ,KAAKsB,WAAa0O,CAClB,SAMN5F,EAAFzJ,UAAA+b,oBAAE,WACE,MAAO1c,MAAK2D,MAA4B,QAApB3D,KAAK2D,KAAKc,MAAkB,MAAQ,OAI1D2F,EAAFzJ,UAAAke,yBAAE,WACE,GAAM2B,GAAiBxgB,KAAKwgB,eACtBC,EAA4C,QAA/BzgB,KAAK0c,uBAAmC8D,EAAiBA,CAE5ExgB,MAAK0gB,SAASrgB,cAAcC,MAAM2a,UAAY,eAAewF,EAAjE,aAIEnc,OAAFC,eAAM6F,EAANzJ,UAAA,sBAAE,WAA+B,MAAOX,MAAK4d,qBAC3C,SAAmB+C,GACjB3gB,KAAK4d,gBAAkBrF,KAAKqI,IAAI,EAAGrI,KAAKE,IAAIzY,KAAK6gB,wBAAyBF,IAI1E3gB,KAAK4e,wBAAyB,EAC9B5e,KAAK0e,2DAWPtU,EAAFzJ,UAAAmgB,cAAE,SAAcC,GACZ,GAAMC,GAAahhB,KAAKkgB,kBAAkB7f,cAAc6Y,WAGxDlZ,MAAKwgB,iBAAgC,UAAbO,GAAyB,EAAI,GAAKC,EAAa,GASzE5W,EAAFzJ,UAAA8d,eAAE,SAAewC,GACb,GAAMC,GAAgBlhB,KAAKue,eAAiBve,KAAKue,eAAeyB,UAAUiB,GAAc,IAExF,IAAKC,EAAL,CAGA,GAEIC,GAAwBC,EAFtBJ,EAAahhB,KAAKkgB,kBAAkB7f,cAAc6Y,WAGtB,QAA9BlZ,KAAK0c,uBACPyE,EAAiBD,EAAc3D,gBAC/B6D,EAAgBD,EAAiBD,EAAc1D,mBAE/C4D,EAAgBphB,KAAK0gB,SAASrgB,cAAc6Y,YAAcgI,EAAc3D,gBACxE4D,EAAiBC,EAAgBF,EAAc1D,iBAGjD,IAAM6D,GAAmBrhB,KAAKwgB,eACxBc,EAAkBthB,KAAKwgB,eAAiBQ,CAE1CG,GAAiBE,EAEnBrhB,KAAKwgB,gBAAkBa,EAAmBF,EAxVjB,GAyVhBC,EAAgBE,IAEzBthB,KAAKwgB,gBAAkBY,EAAgBE,EA3Vd,MAuW7BlX,EAAFzJ,UAAAkf,wBAAE,WACE,GAAM0B,GACFvhB,KAAK0gB,SAASrgB,cAAc+f,YAAcpgB,KAAKsD,YAAYjD,cAAc6Y,WAExEqI,KACHvhB,KAAKwgB,eAAiB,GAGpBe,IAAcvhB,KAAK+d,yBACrB/d,KAAK6D,mBAAmBqB,eAG1BlF,KAAK+d,wBAA0BwD,GAYjCnX,EAAFzJ,UAAA+d,wBAAE,WAEE1e,KAAKie,qBAA8C,GAAvBje,KAAKwgB,eACjCxgB,KAAKge,oBAAsBhe,KAAKwgB,gBAAkBxgB,KAAK6gB,wBACvD7gB,KAAK6D,mBAAmBqB,gBAU1BkF,EAAFzJ,UAAAkgB,sBAAE,WAGE,MAFwB7gB,MAAK0gB,SAASrgB,cAAc+f,YACjCpgB,KAAKkgB,kBAAkB7f,cAAc6Y,aACf,GAI3C9O,EAAFzJ,UAAAge,0BAAE,WACE,GAAM6C,GAAuBxhB,KAAKue,gBAAkBve,KAAKue,eAAepT,OACpEnL,KAAKue,eAAeyB,UAAUhgB,KAAKqB,eAAeqC,WAAWrD,cAC7D,IAEJL,MAAKsG,QAAQE,eAAegb,mBA3YhChgB,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEE,SAAU,+7BACVC,QAAF,y+DACEO,QAAF,iBACEN,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEE,MACFC,MAAA,iBACMkf,qDAAN,0BACIC,6BAAJ,yHAlDAlgB,KAAEuF,EAAAA,gBAHFvF,KAAEqQ,EAAAA,eAAFtJ,aAAA/G,KAAAwH,EAAAA,cARAoB,EAAA1H,2GAqEAwd,oBAAA1e,KAAAoB,EAAAA,UAAAlB,MAAA,sBACAgf,WAAAlf,KAAAoB,EAAAA,UAAAlB,MAAA,aACAL,gBAAAG,KAAAsB,EAAAA,QACAqb,qBAAA3c,KAAA0B,EAAAA,SAmCAkb,eAAA5c,KAAA0B,EAAAA,UAaAkH,OlC1FIuX,GAAS,EAGbC,GAAA,yBAzCA,MAAAA,MAqDAC,GAAA,WACE,QAAFA,GAAqBve,GAAAtD,KAArBsD,YAAqBA,EAtDrB,MAAAue,MAwDaC,GAAwBte,EAAW2D,EAAmB0a,IAAkB,0BA4FnF,QAAFnhB,GAAcgD,EACQG,GADpB,GAAFE,GAEIC,EAFJC,KAAAjE,KAEU0D,IAFV1D,WACsB+D,GAAtBF,mBAAsBA,EA7DtBE,EAAAge,eAA0C,EAG1Che,EAAA7D,sBAA0C,EAG1C6D,EAAAie,kBAA8BzG,EAAAA,aAAaC,MAG3CzX,EAAAke,sBAAkC1G,EAAAA,aAAaC,MAM/CzX,EAAA9D,gBAAoC,EAQpC8D,EAAAma,eAA0C,KAG1Cna,EAAAhB,eAAkD,QAmBlDgB,EAAAd,oBAAiE,GAAIuZ,GAAAA,aAIrEzY,EAAAZ,YAAM,GAAIqZ,GAAAA,aAGVzY,EAAAjD,cAAyD,GAAI0b,GAAAA,aAI7DzY,EAAAX,kBAAM,GAAIoZ,GAAAA,cAAgC,GAOtCzY,EAAKme,SAAWP,OARpB,MAjEiCtd,GAAjC3D,EAAAsD,GAuBAM,OAAAC,eAAM7D,EAANC,UAAA,qBAAA,WAAiC,MAAOX,MAAKC,oBAC3C,SAAkBwE,GAAkBzE,KAAKC,eAAiB4E,EAAAA,sBAAsBJ,oCAKlFH,OAAAC,eAAM7D,EAANC,UAAA,qBAAA,WAAuC,MAAOX,MAAKke,oBACjD,SAAkBzZ,GAChBzE,KAAK+hB,eAAiB1D,EAAAA,qBAAqB5Z,EAAO,uCAStDH,OAAAC,eAAM7D,EAANC,UAAA,uBAAA,WAAwC,MAAOX,MAAKwE,sBAClD,SAAoBC,GAClB,GAAMpE,GAA6BL,KAAKsD,YAAYjD,aAEpDA,GAAcqE,UAAUC,OAAO,kBAAkB3E,KAAKgD,iBAElDyB,GACFpE,EAAcqE,UAAUE,IAAI,kBAAkBH,GAGhDzE,KAAKwE,iBAAmBC,mCAgC1B/D,EAAFC,UAAAkF,sBAAE,WAAA,GAAF9B,GAAA/D,KAKQmiB,EAAgBniB,KAAK+hB,eACrBxJ,KAAKE,IAAIzY,KAAKoiB,MAAMjX,OAAS,EAAGoN,KAAKqI,IAAI5gB,KAAK+hB,gBAAkB,EAAG,GAIvE,IAAI/hB,KAAKke,gBAAkBiE,GAAwC,MAAvBniB,KAAKke,eAAwB,CACvE,GAAMmE,GAAiBriB,KAAKsiB,mBAAmBH,EAC/CniB,MAAKoD,kBAAkBrC,KAAKshB,GAG5BlK,QAAQC,UAAUC,KAAK,WAAM,MAAAtU,GAAKd,oBAAoBlC,KAAKohB,KAI7DniB,KAAKoiB,MAAM1b,QAAQ,SAACzF,EAAaqO,GAC/BrO,EAAImZ,SAAW9K,EAAQ6S,EACvBlhB,EAAIqZ,SAAWhL,IAAU6S,EAIE,MAAvBpe,EAAKma,gBAA0C,GAAhBjd,EAAImZ,UAAkBnZ,EAAIoZ,SAC3DpZ,EAAIoZ,OAAS8H,EAAgBpe,EAAKma,kBAIlCle,KAAKke,iBAAmBiE,IAC1BniB,KAAKke,eAAiBiE,EACtBniB,KAAK6D,mBAAmBqB,iBAI5BxE,EAAFC,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAKuiB,wBAILviB,KAAKgiB,kBAAoBhiB,KAAKoiB,MAAMlX,QAAQvF,UAAU,WACpD5B,EAAKwe,wBACLxe,EAAKF,mBAAmBqB,kBAI5BxE,EAAFC,UAAAwF,YAAE,WACEnG,KAAKgiB,kBAAkB7K,cACvBnX,KAAKiiB,sBAAsB9K,eAI7BzW,EAAFC,UAAA6hB,cAAE,WACMxiB,KAAK2C,YACP3C,KAAK2C,WAAWgc,6BAIpBje,EAAFC,UAAA8hB,cAAE,SAAcnT,GACZtP,KAAKmD,YAAYpC,KAAKf,KAAKsiB,mBAAmBhT,KAGxC5O,EAAVC,UAAA2hB,mBAAA,SAA6BhT,GACzB,GAAMlH,GAAQ,GAAIwZ,GAKlB,OAJAxZ,GAAMkH,MAAQA,EACVtP,KAAKoiB,OAASpiB,KAAKoiB,MAAMjX,SAC3B/C,EAAMnH,IAAMjB,KAAKoiB,MAAMpC,UAAU1Q,IAE5BlH,GASD1H,EAAVC,UAAA4hB,2CACQviB,MAAKiiB,uBACPjiB,KAAKiiB,sBAAsB9K,cAG7BnX,KAAKiiB,sBAAwBzc,EAAAA,MAAjCsL,UAAA,GACW9Q,KAAKoiB,MAAMrR,IAAI,SAAA9P,GAAO,MAAAA,GAAIkZ,iBADrCuI,OAEW1iB,KAAKoiB,MAAMrR,IAAI,SAAA9P,GAAO,MAAAA,GAAIiZ,iBAAevU,UAAU,WACxD5B,EAAKF,mBAAmBqB,kBAK5BxE,EAAFC,UAAAgiB,eAAE,SAAe3S,GACb,MAAO,iBAAiBhQ,KAAKkiB,SAAjC,IAA6ClS,GAI3CtP,EAAFC,UAAAiiB,iBAAE,SAAiB5S,GACf,MAAO,mBAAmBhQ,KAAKkiB,SAAnC,IAA+ClS,GAO7CtP,EAAFC,UAAAkiB,yBAAE,SAAyBpiB;iDACvB,GAAKT,KAAKC,gBAAmBD,KAAKE,sBAAlC,CAEA,GAAMC,GAAuBH,KAAKI,gBAAgBC,aAElDF,GAAQG,MAAMC,OAASP,KAAKE,sBAAwB,KAIhDF,KAAKI,gBAAgBC,cAAcG,eACrCL,EAAQG,MAAMC,OAASE,EAAY,QAKvCC,EAAFC,UAAAC,4BAAE,WACEZ,KAAKE,sBAAwBF,KAAKI,gBAAgBC,cAAcQ,aAChEb,KAAKI,gBAAgBC,cAAcC,MAAMC,OAAS,GAClDP,KAAKc,cAAcC,QAIrBL,EAAFC,UAAAK,aAAE,SAAaC,EAAaC,EAAyBC,GAC5CF,EAAIG,WACPpB,KAAKqB,cAAgBH,EAAUI,WAAaH,IAKhDT,EAAFC,UAAAY,aAAE,SAAaN,EAAaE,GACxB,MAAIF,GAAIG,SACC,KAEFpB,KAAKqB,gBAAkBF,EAAM,GAAK,kBA1O7CK,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVC,SAAU,2wCACVC,QAAF,gsCACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,QAAF,QAAA,iBACEC,MACFC,MAAA,gBACMC,uCAAN,gBACIC,wCAAJ,sHA5DA/B,EAAEgC,wHAoEFC,aAAAnB,KAAAoB,EAAAA,UAAAlB,MAAA,eAEAmB,gBAAArB,KAAAsB,EAAAA,QAEAzB,gBAAAG,KAAAsB,EAAAA,QAeAC,iBAAAvB,KAAAsB,EAAAA,QAMAE,kBAAAxB,KAAAsB,EAAAA,QAQAG,sBAAAzB,KAAQ0B,EAAAA,SAGRC,cAAA3B,KAAA0B,EAAAA,SAgBApC,gBAAAU,KAAA0B,EAAAA,SAGAE,oBAAG5B,KAAM0B,EAAAA,UAOTxC,OC3FA2C,GAAA,WACE,QAAFA,GAAqBC,GAAAtD,KAArBsD,YAAqBA,EArDrB,MAAAD,MAuDaE,GAAsBC,EAAWH,GAAe,0BAyD3D,QAAFI,GAAcC,EACoBC,EACZC,EACAC,EACAC,GAJpB,GAAFC,GAKIC,EALJC,KAAAjE,KAKU0D,IALV1D,WACkC+D,GAAlCJ,KAAkCA,EACZI,EAAtBH,QAAsBA,EACAG,EAAtBF,mBAAsBA,EACAE,EAAtBD,eAAsBA,EAxCtBC,EAAAG,WAAgC,GAAIC,GAAAA,QAkCpCJ,EAAAK,gBAAoC,IANpC,MAhC+BC,GAA/BZ,EAAAO,GAiBAM,OAAAC,eAAMd,EAAN9C,UAAA,uBAAA,WAAwC,MAAOX,MAAKwE,sBAClD,SAAoBC,GAClB,GAAMpE,GAA6BL,KAAKsD,YAAYjD,aAEpDA,GAAcqE,UAAUC,OAAO,kBAAkB3E,KAAKgD,iBAElDyB,GACFpE,EAAcqE,UAAUE,IAAI,kBAAkBH,GAGhDzE,KAAKwE,iBAAmBC,mCAM5BH,OAAAC,eAAMd,EAAN9C,UAAA,qBAAA,WAAwB,MAAOX,MAAKoE,oBAClC,SAAkBK,GAChBzE,KAAKoE,eAAiBS,EAAAA,sBAAsBJ,GAC5CzE,KAAK8E,yDAgBPrB,EAAF9C,UAAAoE,iBAAE,SAAiBC,GAEfhF,KAAKiF,qBAAuBD,EAC5BhF,KAAK6D,mBAAmBqB,gBAG1BzB,EAAF9C,UAAAwE,mBAAE,WAAA,GAAFpB,GAAA/D,IACIA,MAAK4D,QAAQwB,kBAAkB,WAC7B,GAAMC,GAAYtB,EAAKJ,KAAOI,EAAKJ,KAAK2B,OAASC,EAAAA,GAAa,KAE9D,OAAOC,GAAAA,MAAMH,EAAWtB,EAAKD,eAAewB,OAAO,KAC9CG,KAAKC,EAAAA,UAAU3B,EAAKG,aACpByB,UAAU,WAAM,MAAA5B,GAAK6B,mBAG5B5F,KAAK8E,yBAIPrB,EAAF9C,UAAAkF,sBAAE,WACE,GAAI7F,KAAKiF,mBAAoB,CAC3B,GAAMa,GAAY9F,KAAK+F,UAAUC,KAAK,SAAA/E,GAAO,MAAAA,GAAIgF,QAEjDjG,MAAKkG,mBAAqBJ,EAAYA,EAAUxC,YAAc,KAC9DtD,KAAK4F,eACL5F,KAAKiF,oBAAqB,IAI9BxB,EAAF9C,UAAAwF,YAAE,WACEnG,KAAKkE,WAAWkC,OAChBpG,KAAKkE,WAAWmC,YAIlB5C,EAAF9C,UAAAiF,aAAE,WACM5F,KAAKkG,oBACPlG,KAAKsG,QAAQC,OACbvG,KAAKsG,QAAQE,eAAexG,KAAKkG,mBAAmB7F,gBAEpDL,KAAKsG,QAAQG,QAKThD,EAAV9C,UAAAmE,2CACQ9E,MAAK+F,WACP/F,KAAK+F,UAAUW,QAAQ,SAAAC,GAAQ,MAAAA,GAAKC,cAAgB7C,EAAK6C,gCA9G/DpF,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,0BACVS,QAAF,SACER,SAAU,6HACVC,QAAS,g+BACTQ,MAAFC,MAAA,mBACER,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,0HAjDAZ,KAAEqF,EAAAA,SAZFrF,KAAQsF,EAAAA,oBAgBRtF,KAAEuF,EAAAA,iBAbFtD,EAAAf,wJAuEAM,kBAAAxB,KAAAsB,EAAAA,QAGA8D,gBAAApF,KAAAsB,EAAAA,SAoBAW,OAxGAuD,GAAA,qCAkLAC,GAAAC,EAAAC,EAAAC,EAAAJ,6CAoBA,GAAAjD,GAAAC,EAAAC,KAAAjE,OAAAA,IAmDA,OAlBA+D,GAAAsD,WAAAA,EAAEtD,EAAFT,YAAAA,oEAVAS,EAAAuD,eAA+BC,mBAA/BjE,EAAAjD,eAkBI0D,EAAKyD,SAATC,SAAAD,IAAA,EACAE,IAEA3D,EAAA4D,cAEAC,qBAAAF,EAAAE,qBACAC,YAAAH,EAAAI,gBACQC,UAARL,EAAAK,YAGAhE,EAzCA,0DA2CAiE,2EAzCAhI,KAAAiI,UAAAxD,EACQzE,KAAKqH,WAAbtC,iBAAA/E,KAAAsD,eAGA4E,YAAA,EACAC,cAAA,iHAaAD,YAAA,EACAC,cAAA,uIA+BAC,EAAAC,kBAGAC,EAAAC,aACA/G,KAAAgH,EAAAA,UAAA9G,+CA/EAE,SAAA,aACES,QAAF,WAAA,gBAAA,YACEC,MACFC,MAAA,eACMkG,uBAAN,sBACIC,kBAAJ,WACIC,2BAAJ,WACIC,+BAAJ,SACIC,UAAJ,8FAzHArH,KAAaqF,EAAAA,SArDbrF,KAAEsH,EAAAA,WAIFtH,SAAEuH,GAAFR,aAAA/G,KAAAwH,EAAAA,WAAAxH,KAAAyH,EAAAA,OAAAvH,MAAAwH,QAdA1H,SAAQuH,GAARR,aAAA/G,KAAA2H,EAAAA,UAAAzH,MAAA,iBAmOA4G,EAAA5F,yCA5BA4F,mCChNA,sBAwBA9G,KAAC4H,EAAAA,SAAD1H,OACE2H,SACEC,EAAAA,aACAC,GACAC,EAAAA,aACAC,GACAC,EAAAA,iBAGFC,SACEJ,GACA7I,GACAkJ,GACAC,GACApG,GACA6E,GACAwB,IAEFC,cACErJ,GACAkJ,GACAC,GACAG,GACAC,GACAxG,GACA6E,GACA4B,GACAC,GACAC,GACAN,QArDJO,KC0BAC,GAAA,WACE,QAAFA,GAAqBhH,GAAAtD,KAArBsD,YAAqBA,EA3BrB,MAAAgH,MA6BaC,GAAuB/G,EAAW8G,gCA7B/C,sBA+BA9I,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,kBACVC,SAAU,gBACVU,MAAOC,MAAS,uBAlClBiI,KAoCAC,GAAA,SAAAzG,GAuBE,QAAFyG,GACI/G,EACQgH,EACUC,GAHpB,GAAF5G,GAIIC,EAJJC,KAAAjE,KAIU0D,IAJV1D,WAEY+D,GAAZ2G,UAAYA,EAKR3G,EAAK6G,UAAYD,IATrB,MAJgCtG,GAAhCoG,EAAAzG,GAgBEyG,EAAF9J,UAAAkK,gBAAE,WAAA,GAAF9G,GAAA/D,IACS8K,GAAAA,aAAgB9K,KAAK0K,UAAUK,YAIpC/K,KAAKgL,0BACLhL,KAAKiL,aAAaC,QAAQvF,UAAU,WAAM,MAAA5B,GAAKiH,8BAMzCP,EAAV9J,UAAAqK,6CACI,IAAKhL,KAAKiL,aAAaE,OAAvB,IAM2BC,MAAMnH,KAAKjE,KAAKsD,YAAYjD,cAAcgL,YAClEC,OAAO,SAAAC,GAAQ,QAAEA,EAAK7G,WAAa6G,EAAK7G,UAAU8G,SAAS,sBAC3DF,OAAO,SAAAC,GAAQ,MAAAA,GAAKE,YAAc1H,EAAK6G,UAAY7G,EAAK6G,UAAUc,aAAe,KACjFC,KAAK,SAAAJ,GAAQ,MAAAA,GAAKK,YAAYC,UAG/BC,sBAxDNtK,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEC,SAAU,aACVC,SAAU,8EACVC,QAAF,yiBACEO,QAAF,SACEC,MACFC,MAAA,cACMwJ,oCAAN,2BACIC,iCAAJ,6BAEA9J,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAnCAT,SAAEuH,GAAFR,aAAA/G,KAAAyH,EAAAA,OAAAvH,MAAAuK,EAAAA,eAgDAxB,EAAA/H,mEALA+H,mCCzDA,sBAaAjJ,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUE,IACVI,SAAUc,GAAYD,GAAejB,IACrCQ,cAAeU,GAAYD,QAhB7B0B,mBCqBE,QAAFC,GAAqBC,GAAApM,KAArBoM,cAAqBA,EArBrB,sBAiBA5K,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,8DARZH,KAAE6K,EAAAA,oBAVFF,KC2BaG,GAAwBpF,EAAcE,EAAcmF,EAAAA,cACpDC,GAA8BtF,EAAcE,EAAcqF,EAAAA,mCAoBrE,QAAFC,GAAwBpJ,EACAqJ,EACanF,GAFnC,GAAFzD,GAGIC,EAHJC,KAAAjE,KAGUsD,EAAaqJ,IAHvB3M,WAAwB+D,GAAxBT,YAAwBA,EACAS,EAAxB4I,MAAwBA,EAHxB5I,EAAA6I,KAAwC,WAOpC7I,EAAKyD,SAAWqF,OAAOrF,IAAa,IArDxC,MA6CoCnD,GAApCqI,EAAA1I,kBAZAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,gBACVC,SAAU,cACVS,QAAS,WAAY,YACrBC,MACEwK,uBAAwB,aACxBC,oBAAqB,QACrBC,cAAe,OACfzK,MAAS,iBAEX0K,YAAaC,QAASX,EAAAA,YAAaY,YAAaT,4CA/BlDlL,KAAE4L,EAAAA,aAOF5L,KAAE6L,EAAAA,UA+BF7L,SAAAuH,GAAAR,aAAA/G,KAAe2H,EAAAA,UAAfzH,MAAyB,mCAJzBkL,OAAApL,KAAGsB,EAAAA,SA9CH4J,GA6CoCJ,+EA7CpC,MAmEuCjI,GAAvCiJ,EAAAtJ,kBAPAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,mBACVU,QACE,4BAEF4K,YAAaC,QAASK,EAAAA,eAAgBJ,YAAaG,0BAGrDE,OAAAhM,KAAGsB,EAAAA,MAAHpB,MAAS,kBApET4L,GAmEuCC,EAAAA,+BA4BrC,QAAFE,GAAwBnK,EACAqJ,EACAe,EACalG,GAHnC,GAAFzD,GAIIC,EAJJC,KAAAjE,KAIUsD,EAAaqJ,EAAOe,IAJ9B1N,WAAwB+D,GAAxBT,YAAwBA,EACAS,EAAxB4I,MAAwBA,EACA5I,EAAxB2J,SAAwBA,EAIpB3J,EAAKyD,SAAWqF,OAAOrF,IAAa,IArGxC,MAwF0CnD,GAA1CoJ,EAAAzJ,GAmBEyJ,EAAF9M,UAAAwE,mBAAE,WACEnB,EAAJrD,UAAUwE,mBAAVlB,KAAAjE,OAGEyN,EAAF9M,UAAAwF,YAAE,WACEnC,EAAJrD,UAAUwF,YAAVlC,KAAAjE,sBAtCAwB,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,uBACVC,SAAU,oBACVU,MACEwK,uBAAwB,aACxBE,cAAe,OACfzK,MAAS,wBAEXF,QAAS,WAAY,YACrB4K,YACGC,QAAST,EAAAA,kBAAmBU,YAAaM,IACzCP,QAASX,EAAAA,YAAaY,YAAaM,4CAzExCjM,KAAE4L,EAAAA,aAOF5L,KAAE6L,EAAAA,UALF7L,KAAEmM,EAAAA,kBAoFFnM,SAAAuH,GAAAR,aAAA/G,KAAe2H,EAAAA,UAAfzH,MAAyB,mCAPzB6J,OAAA/J,KAAGsB,EAAAA,MAAHpB,MAAS,uBAETkM,aAAApM,KAAGqM,EAAAA,gBAAHnM,MAAmByK,OA7FnBsB,GAwF0CjB,+ECxF1C,MAkB2CnI,GAA3CyJ,EAAA9J,kBAJAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,uBACVsL,YAAaC,QAASa,EAAAA,mBAAoBZ,YAAaW,0BAKzDE,QAAAxM,KAAGsB,EAAAA,MAAHpB,MAAS,wBAGTuM,SAAAzM,KAAGsB,EAAAA,MAAHpB,MAAS,+BAxBToM,GAkB2CC,EAAAA,+FCa3C,MAFgC1J,GAAhC6J,EAAAlK,kBAdAxC,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,UACVC,SAAU,kDACVS,MACFC,MAAA,WACMqK,KAAN,QAEA9K,QAAA,mLACAC,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE6K,YAAFC,QAAAG,EAAAA,QAAkCF,YAAlCe,sEAMAA,8FCTAnK,GAAAoK,WAA4D,IAtB5D,MAqB0C9J,GAA1C+J,EAAApK,kBAPAxC,KAACgH,EAAAA,UAAD9G,OACEC,SAAU,sBACVW,MACEuG,UAAW,mBAEboE,YAAaC,QAASmB,EAAAA,kBAAmBlB,YAAaiB,0BAGxDD,YAAA3M,KAAGsB,EAAAA,MAAHpB,MAAS,iCAtBT0M,GAqB0CC,EAAAA,mBCFpCC,IACJb,GACAH,GACAQ,GACAM,GACAF,GACAxB,GACAP,gCA1BF,sBA6BA3K,KAAC4H,EAAAA,SAAD1H,OACE2H,SAAUkF,EAAAA,cAAejF,EAAAA,aAAcC,IACvCI,QAAS2E,GACTvE,aAAcuE,OAhChBE,KCgDAC,GAAA,WAEE,QAAFA,GAAqBC,EACAC,EACAC,EACAC,GAHA7O,KAArB0O,kBAAqBA,EACA1O,KAArB2O,SAAqBA,EACA3O,KAArB4O,aAAqBA,EACA5O,KAArB6O,YAAqBA,EArDrB,MAuDEJ,GAAF9N,UAAAmO,aAAE,SAAavD,EAASyC,EACTe,EAAkBC,GAD/B,GAAFjL,GAAA/D,KAEUiP,EAAWjP,KAAK0O,kBAAkBnD,EAAMyC,EAY9C,OAXAe,GAAYG,KAAKD,GAEbjP,KAAK4O,aAAaK,IACpBjP,KAAK6O,YAAYtD,GAAM9F,KAAK0J,EAAAA,KAAK,IAAIxJ,UAAU,SAAAyJ,GAC7CA,EAAS1I,QAAQ,SAAC2I,EAAOC,GACvB,GAAIC,GAA4BP,EAAU5D,OAC1CmE,GAAeL,KAAKI,GAASF,EAASjE,OAAS,GAC/CpH,EAAK+K,aAAaO,EAAOrB,EAAQ,EAAGe,EAAaQ,OAIhDR,GAQTN,EAAF9N,UAAA6O,aAAE,SAAaC,GAAb,GAAF1L,GAAA/D,KACQ+O,IAEJ,OADAU,GAAe/I,QAAQ,SAAA6E,GAAQ,MAAAxH,GAAK+K,aAAavD,EAAM,EAAGwD,QACnDA,GAOTN,EAAF9N,UAAA+O,qBAAE,SAAqBC,EAAYC,GAAjC,GAAF7L,GAAA/D,KACQ6P,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMjJ,QAAQ,SAAC6E,GAEb,IAAK,GADDwE,IAAS,EACJC,EAAI,EAAGA,GAAKjM,EAAK4K,SAASpD,GAAOyE,IACxCD,EAASA,GAAUD,EAAcE,EAE/BD,IACFF,EAAQX,KAAK3D,GAEXxH,EAAK6K,aAAarD,KACpBuE,EAAc/L,EAAK4K,SAASpD,GAAQ,GAAKqE,EAAYK,WAAW1E,MAG7DsE,GAxGXpB,KAoHAyB,GAAA,SAAAlM,GAaE,QAAFkM,GAAsBN,EACAO,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAFrM,GAGIC,EAHJC,KAAAjE,OAAAA,WAAsB+D,GAAtB6L,YAAsBA,EACA7L,EAAtBoM,cAAsBA,EAbtBpM,EAAAsM,eAAmB,GAAIC,GAAAA,oBAEvBvM,EAAAwM,cAAkB,GAAID,GAAAA,oBAclBvM,EAAKyM,MAAQ,GAAIF,GAAAA,gBAAqBF,KArI1C,MAoHiD/L,GAAjD6L,EAAAlM,GAMEM,OAAFC,eAAM2L,EAANvP,UAAA,YAAE,WAAa,MAAOX,MAAKwQ,MAAM/L,WAC/B,SAASA,GACPzE,KAAKwQ,MAAMpK,KAAK3B,GAChBzE,KAAKqQ,eAAejK,KAAKpG,KAAKmQ,cAAcX,aAAaxP,KAAKwN,OAC9DxN,KAAK4P,YAAYa,UAAYzQ,KAAKqQ,eAAe5L,uCAUnDyL,EAAFvP,UAAA+P,QAAE,SAAQC,GAAR,GAAF5M,GAAA/D,KACUkL,GACJyF,EAAiBC,WACjB5Q,KAAK4P,YAAYiB,eAAuB,SACxC7Q,KAAKqQ,eAEP,OAAO7K,GAAAA,MAAXsL,UAAA,GAAoB5F,GAASzF,KAAKsL,EAAAA,IAAI,WAGhC,MAFAhN,GAAKwM,cAAcnK,KACjBrC,EAAKoM,cAAcT,qBAAqB3L,EAAKsM,eAAe5L,MAAOV,EAAK6L,cACnE7L,EAAKwM,cAAc9L,UAI9ByL,EAAFvP,UAAAqQ,WAAE,aArJFd,GAoHiDe,EAAAA,YCjGjDC,GAAA,SAAAlN,oEACAD,GAAAyM,MAAU,GAAIF,GAAAA,sBApBd,MAmBgDjM,GAAhD6M,EAAAlN,GAMEM,OAAFC,eAAM2M,EAANvQ,UAAA,YAAE,WAAa,MAAOX,MAAKwQ,MAAM/L,WAC/B,SAASA,GAAczE,KAAKwQ,MAAMpK,KAAK3B,oCAEvCyM,EAAFvQ,UAAA+P,QAAE,SAAQC,GAAR,GAAF5M,GAAA/D,IACI,OAAOwF,GAAAA,MAAXsL,UAAA,IAAqBH,EAAiBC,WAAY5Q,KAAKwQ,QAChD/K,KAAKsL,EAAAA,IAAI,WACR,MAAOhN,GAAKyJ,SAIlB0D,EAAFvQ,UAAAqQ,WAAE,aAnCFE,GAmBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,+OC4CO,+BAGD,qlFC9CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,SAAU,8tCCOmB,88EC2ET,6BAGD,mCAGOC,2BAGR,oCAUUA,mCAMF,25ECrEX,yBAGC"}